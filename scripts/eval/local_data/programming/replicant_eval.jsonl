{"task_id":0,"prompt":"\ndef almost_anagram(word1: str, word2: str) -> bool:\n    \"\"\"Return True if word1 and word2 are almost anagrams, False otherwise.\n    Two words are almost anagrams if you can add or remove a single letter\n    from word1 to make a word that is an anagram of word2.\n    Return False if word1 and word2 are perfect anagrams of each other.\n    >>> almost_anagram('cat', 'cats')\n    True\n    >>> almost_anagram('desert', 'dessert')\n    True\n    >>> almost_anagram('hola', 'hello')\n    return False\n    >>> almost_anagram('cat', 'act')\n    return False\n    \"\"\"\n","entry_point":"almost_anagram","canonical_solution":"\ndef almost_anagram(word1: str, word2: str) -> bool:\n    \"\"\"Return True if word1 and word2 are almost anagrams, False otherwise.\n    Two words are almost anagrams if you can add or remove a single letter\n    from word1 to make a word that is an anagram of word2.\n    Return False if word1 and word2 are perfect anagrams of each other.\n    >>> almost_anagram('cat', 'cats')\n    True\n    >>> almost_anagram('desert', 'dessert')\n    True\n    >>> almost_anagram('hola', 'hello')\n    return False\n    >>> almost_anagram('cat', 'act')\n    return False\n    \"\"\"\n# SOLUTION\n    all_keys = set(word1 + word2)\n    word1_dict = {letter: word1.count(letter) for letter in all_keys}\n    word2_dict = {letter: word2.count(letter) for letter in all_keys}\n    return sum(abs(word1_dict[letter] - word2_dict[letter]) for letter in all_keys) == 1\n\n","test":"tests","test_inputs":[["cat","cats"],["desert","dessert"],["hola","hello"],["cat","act"],["cat","tac"],["cat","tacs"],["cat","tacss"],["cat","tact"]],"test_outputs":[true,true,false,false,false,true,false,true],"language":"python"}
{"task_id":1,"prompt":"\ndef almost_palindrome(string: str) -> bool:\n    \"\"\"Return True if the given string is almost a palindrome.\n    A string is almost a palindrome if it becomes a palindrome by removing one character.\n    >>> almost_palindrome(\"racecar\")\n    False\n    >>> almost_palindrome(\"abccdba\")\n    True\n    >>> almost_palindrome(\"gooddog\")\n    True\n    \"\"\"\n","entry_point":"almost_palindrome","canonical_solution":"\ndef almost_palindrome(string: str) -> bool:\n    \"\"\"Return True if the given string is almost a palindrome.\n    A string is almost a palindrome if it becomes a palindrome by removing one character.\n    >>> almost_palindrome(\"racecar\")\n    False\n    >>> almost_palindrome(\"abccdba\")\n    True\n    >>> almost_palindrome(\"gooddog\")\n    True\n    \"\"\"\n# SOLUTION\n    if string == string[::-1]:\n        return False\n    for i in range(len(string)):\n        new_string = string[:i] + string[i+1:]\n        if new_string == new_string[::-1]:\n            return True\n    return False\n\n","test":"tests","test_inputs":[["racecar"],["abccdba"],["gooddog"],["a"],["ab"],["abc"],["abcb"]],"test_outputs":[false,true,true,false,true,false,true],"language":"python"}
{"task_id":2,"prompt":"\ndef almost_power_of_two(n: int) -> bool:\n    \"\"\"Returns True if n is almost a power of 2, False otherwise.\n    A number is almost a power of 2 if it's prime factorization is 2^k * 3,\n    where k is a positive integer.\n    >>> almost_power_of_two(2)\n    False\n    >>> almost_power_of_two(3)\n    False\n    >>> almost_power_of_two(12)\n    True\n    >>> almost_power_of_two(192)\n    True\n    >>> almost_power_of_two(2048)\n    False\n    \"\"\"\n","entry_point":"almost_power_of_two","canonical_solution":"\ndef almost_power_of_two(n: int) -> bool:\n    \"\"\"Returns True if n is almost a power of 2, False otherwise.\n    A number is almost a power of 2 if it's prime factorization is 2^k * 3,\n    where k is a positive integer.\n    >>> almost_power_of_two(2)\n    False\n    >>> almost_power_of_two(3)\n    False\n    >>> almost_power_of_two(12)\n    True\n    >>> almost_power_of_two(192)\n    True\n    >>> almost_power_of_two(2048)\n    False\n    \"\"\"\n# SOLUTION\n    if n % 2 == 1:\n        return False\n\n    while n % 2 == 0:\n        n \/\/= 2\n\n    return n == 3\n\n","test":"tests","test_inputs":[[2],[3],[12],[192],[2048],[1],[4],[6]],"test_outputs":[false,false,true,true,false,false,false,true],"language":"python"}
{"task_id":3,"prompt":"\ndef argsort(values: list) -> list[int]:\n    \"\"\"\n    Returns the indices that would sort an array.\n    >>> argsort([3, 1, 2])\n    [1, 2, 0]\n    >>> argsort([])\n    []\n    >>> argsort([10, 10, 10])\n    [0, 1, 2]\n    \"\"\"\n","entry_point":"argsort","canonical_solution":[12,80,63,92,3,20,58,33,27,83,75,87,44,42,1,8,69,49,15,9,46,41,31,65,39,76,90,30,77,54,73,11,7,37,5,84,79,22,52,28,18,13,66,86,26,81,2,70,91,36,4,50,43,78,59,14,89,67,23,47,34,0,32,29,48,60,25,6,71,24,10,19,62,21,82,38,56,85,40,17,93,45,57,74,88,35,68,53,55,72,16,51,61,64],"test":"tests","test_inputs":[[[3,1,2]],[[]],[[10,10,10]],[[14,3,94,35,31,28,17,13,86,69,11,75,54,4,98,89,27,29,64,77,85,71,25,90,53,97,57,96,0,20,87,43,72,19,83,68,92,5,24,6,22,76,59,38,16,51,2,46,82,34,7,61,62,67,18,40,39,23,36,12,91,88,99,45,47,37,60,48,93,50,70,26,84,52,65,80,33,21,8,58,56]],[[81,21,68,93,31,20,59,48,34,99,88,71,28,41,7,29,4,40,51,91,8,27,72,82,78,63,50,58,18,33,17,95,70,54,90,46,87,79,32,97,5,92,3,55,85,9,76,10,73,43,75,38,83,24,64,77,84,67,16,35,0,56,80,69,98,44,89,49,52,14,39,23,74,62,86,45,96]],[[13,80,38,81,64,77,25,19,47,20,69,67,0,76,41,62,2,14,46,39,30,7,79,72,10,75,84,8,68,16,70,60,21,33,54,27,93,45,92,63,42,85,23,28,66,56,78,15,82,4,88,1,37,35,51,91,73,87,50,40,3,43,58,83]],[[9,65,30,35,85,62,27,69,16,73,90,60,31,88,52,24,12,83,55,45,54,95,59,6,82,7,51,43,13,87,84,92,57,17,79,23,96,29,15,81,77,4]],[[70,12,6,83,69,1,11,30,21,52,62,61,27,51,7,91,48,0,49,33,58,36,54,71,89,19,24,37,87,85,95,99,40,68,97,88,20,3,64,32,5,77,93,4,38,56,43,15,25,66,78,90,72,55,2,39]],[[53,84,74,72,66,40,33,26,85,91]],[[30,33,50,16,85,82,38,58,40,9,1,92,79,72,12,90,68,27,64,98,96,44,8,31,47,36,20,56,69,93,67,89,70,13,17,80,14,86,6,75]],[[19,34,36,77,26,91,43,95,87,81,33,64,62,32,6,11,90,54,35,5,0,42,16,89,20,56,70,82,71,1,14,9,99,4,47,18,55,8,2,67,23,57,50,63,61,22,13,93,15,78,85,72,83,92,39,68,51,10,84,46,73,41,21,40,52,17,58,49,24,27]],[[60,28,25,58]],[[39,29,28,3,84,24,51,42,35,8,91,44,82,65,93,68,92,96,14,33,22,74,80,4,13,55,88,40,78,86,81,49,94,32,5,71,0,77,59,85,34,43,46,47]],[[85,25,46,55,8,99,42,79,40,84,15,38,64,39,94,52,41,51,37,70,16,24,53,48,22,72,88,82,80,0,73,36,26,96,83,59,56,28,43,13,32,30,50,57,47,10,93,5,18,87,77,91,86,21,90,89,61,19,14,12,9,1,2,44,58,4,29,67,76,75,35,31,68,62,7,34,20,33,71,3,60,98,45,92,65,97,95,23,69,74,81,54,17,6]],[[78,92,64,54,70,57,20,60,94,33,31,81,35,66,62,80,30,87,56,9,36,83,34,42,40,69,10,17,19,29,49,71,27,8,53,52,76,77,95,26,3,13,65,98,24,74,37,44,1,48,79,55,99,0,22,68]],[[49,53,68,95,94,69,77,28,62,92,34,55,91,3,99,43,51,21,59,16,79,97,86,50,75,72,93,10,54,17,81,23,6,33,48,41,27,29,20,82,65,56,24,70,96,98,26,80,5,30,1,47,89,73,22,14,64,4,84,2,85,15,12,39,9,38,8,76,7,18,67,44,45,66,57,11,83,19,63,46,78,35,61,0,32,88,74,87,37,58,36,13,90,60,40,42]],[[72,5,44,68,54,84,47,8,64,82,43,1,53,62,13]],[[46,81,58,90,19,55,22,66,83,34,78,68,61,59,94,75,96,41,31,11,35,57,98,86,72,48,43,3,63,82,23,62,27,45,33,73,79,56,38,44,88,17,71,0,65,12,5,15,99,26,77,89,52,60,30]],[[91,62,57,2,11,37,28,51,88,31,39,84,74,47,60,70,67,44,54,99,42,45,58,34,89,32,29,15,24,40,72,68,23,71,27,61,35,46,94,48,33,38,18,6,53,12,97,14,83,95,19,0,78,76,8,17,96,3,63,55,86,90,56,85,80,30,98,93,21,5,1,75,65,69,79,43,81,26,66,41,73,4]],[[72,38,10,31,15,71,97,53,77,76,79,28,99,66,48,57,56,75,54]],[[72,79,7,78,94,12,26,80,27,33,84,10,20,30,22,70,9,87,0,52,57,76,60,37,4,29,36,73,58,83,74,90,25,54,14,28,19,71,17]],[[9,7,21,39,76,95,72,36,56,15,59,88,38,89,51,34,64,69]],[[56,10,76,5,55,94,41,77,32,3,11,29,86,73,75,2,34,87,96,22,60,66,99,35,23,74,95,62,89,79,44,52,42,93,13,20,67,26,69,31,18,63,25,68,48,97,84,88,81,64,16,50,7,57,91,0,58,83,92,72,90,12,33]],[[79,96,63,80,56,6,26,34,70,16,36,95,62,15,3,98,77,30,20,39,91,1,99,52,11,28,14,59,86,19,97,37,65,92,53,61,60,71,29,35,9,24,12,38,32,47]],[[8,35,98,53,43,64,34,0,36,92,38,75,74,84,62,19,57]],[[61,44,42,70,69,48,58,41,24,89,30,73,49,29,52,5,40,60,94,87,19,63,4,16,64,97,12,56,88,67,93,1,18,85,79,9,82,50,76,21,39,98,25,92,84,54,78,43,34,91,20,83,45,31,51,2,59,77,15,81,96,14,55,27,6,35,28,10]],[[38,3,5,41,7,37,45,47,55,18,31,67,52,72,23,21,22,10,78,48,79,30,63,74,90,29,59,32,58,86,1,73,36,20,9,56,44,94,19,40,27,77,16,76,54,61,12,24,81,6,15,87,88,83,92,75,71,69,25,17,0,93,98,89,43,14,46,34,53,91,8,84,80,85,68,28,96,4,66,62,42,65,70,51,11,49,2,57]],[[41,95,53,22,25,16,69,46,67,64,34,21,32,61,37,43,14,59,9,18,28,50,71,92,11,78,1,33,68,15,58,47,72,48,77,13,29]],[[3,79,71,41,78,28,82,8,81,59,89,38,83,52,14,17,5,4,88,63,85,12,30,68,84,49,58,47,69,53,19,70,95,62,86,35,93,44,23,13,94,90,15,54,61,6,43,55,34,96,22,99,25,75,67,7,29,87,60,40]],[[2,6,42,31,16,72,26,8,70,93,75,27,29,97,18,76,0,35,85,95,69,32,22,14,3,80,1,45,30,41,99,77,33,98,74,53,84,47,4,71,28,49,23,78,37,66,59,56,63,39,79,46,86,67,19,87,91,73,89,60,25,88,54,96,64,61,5,20,9,58,34,92,94,52,81,17]],[[41,48,76,67,37,58,64,77,55,12,89,14,83,87,70,27,91,57,29,52,43,94,51,53,90,40,54,74,32,47,19,60,8,11,10,66,86,6,85,61,23,92,96,35,3,95,56,97,21,42,7,26,22,50,84,63,18,38,69,68,62,36,71,13,9,30,88,39,72,45,17,93,44,24,82,79,49,46,81,99,20,78,0,25,98,2,4,28,31,5,65]],[[]],[[18,72,84,51,8,99,81,3,11,67,27,48,53,58,43,20,47,39,41,98,76,10,6]],[[20,96,79,6,86,10,34,56,84,54,62,77,53,27,65,14,44,55,36]],[[86,75,62,67,85,39,5,28,50,76,7,0,26,38,27,17,32,37,41,15,88,63,55,22,16,48,68,29,64,45,9,91,93,77,2,58,69,66,20,36,95,60,25,70,40,87,18,89,57,1,61,10,94,72,44,23,96,59,6,80,42,82,51,33,43,99,19,21,14,74,24,35,65,98,49,3,54,56,81,11,34,4,52,46,53,97]],[[22,77,19,83,9,99,80,63,59,72,74,57,87,90,82,81,79,41,93,40,97,56,8,60,78]],[[38,35,75,7,45,64,9,39,59,57,4,96,47,36,93,82,11,78,76,94,49,91,74,70,5,90,73,24,41,60,80,19,88,77,13,43,10,32,71,83,2,15,95,28,56,33,54,92,63,23,50,18,72,26,21,69,99,3,40,66,89,61,6,98,87,48,16,85,44,84,34,31,52,81,62,20,22,55,12,27]],[[90,10,39,71,48,82,42,16,85,89,87,67,11,94,91,54,65,46,2,86,97,23,27,43,62,24,28,17,19,9,37,12,64,4,76,92,95,70,98,99,53,44,49,79,51,61,80,73,81,26,78,83,59,15,52,56,18,45,14,34,47,96,30,68,57,93,29,63,74,88,69,13,5,50,6,38]],[[32,6,82,61,47,70,13,91,66,15,36,10,97,20,34,57,65]],[[55,11,28,57,44,3,53,6,50,64,47,30,49,10,40,12,91,83]],[[18,17,4,36,60,89,98,90,95,57,78,0,10,2,32,27,19,70,77,67,54,14,96,30,38,15,6,76,53,58,8,94,63,86,65,72,99,80,84,88,39,22]],[[73,53,23,85,96,10,67,46,8,93,69,64,88,70,2,49,60,5,81,84,47,32,95,45,91,44,30,13,42,17]],[[45,69,43,82,22]],[[87,59,89,61,80,23,17,8,91,58,4,37,25,5,99,86,40,39,65,50,69,60,32,97,24,36,45,6,42,34,15,47,55,51,56,49,43,62,11,31,44,78,94,66,33,93,81,84,46,27,52,95,38,96,70,18,20,72,64,63,98,19,28,48,10,88,22,73,2,57,74,53,68,13,92,83,1,90,21,75,12,77,16,41,0,67,26,9,35,7,79,14,30,82,54,85,76,71,29]],[[19,86,57,47,96,56,9,73,17,67,46,50,40,83,35,31,14,3,23,63,66,49,71,15,33,75,97,27,36,62,25,76,91,93,92,22,94,5,51,43,54,20,42,64,45,4,85,34,18,99,10,55,48,44,87,11,81,32,98,7,12,8,68,84,1,60,52,29,38,88,28,2,65,79,39,80,74]],[[67,52,98,73,9,16,40,82,95,57,59,87,66,44,94,70,81,75,23,85,55,64,7,15,88,19,38,21,20,41,28,86,92,36,10,32,25,93,61,35,17,8,62,74,39,34,5,78,84,65,37,49,91,50,42,79,96,72,99,2,1]],[[5,82,98,73,33,83,26,53,79,81]],[[63,80,69]],[[82,38,61,31,87,51,98,58,9,88,7,20,56,53,97,59,26,43,77,18,40,79,44,94,16,47,65,71,13,78,30,84,15,34,57,96,80]],[[6,37,49,78,53,31,20,41,73,92,40,24]],[[20,63,65,59,98,39,95,2,11,50,64,58,30,27,74,45,6,83,36,93,76,60,81,68,1,13,55,17,33,46,51,70,5,69,82,24,79,35,18,4,89,32,28,48,62,72,52,94,43,53,7,8,97,25,23,21,73,84,9,12,38,88,80,90,92,66,34,56,44,37,15,16,14,78,19,57,26,10,87,22,67,40,41,99,29,91,54,42,49,0,31,85,75,3,61,71,96]],[[60,33,83,74,73,29,92,6,96,61,21,67,80,79,48,18,31,4,95,14,24,2,56,40,53,19,52,26,81,64,99,7,17,66,72,41,90,98,86,20,11,94,34,89,57,22,43,49,46,75,70,44,16,39,30,12,15,88,35,91,87,76,84,13,97,69,45,54,42,9,3,37,77,71,85,25]],[[98,18,37,5,36,91,10,44,56,83,32,61,27,25,68,34,71,84,17,13,78,75,30,31,6,67,28,29,79,12,52,42,60,70,81,0,20,26,41,59,94,74,77,57]],[[25,96,36,41,97,82,7,11,83,73,29,68,4,22,53,86,87,50,63,23,37,91,1,38,72,13,42,95,58,69,67,81,17,64,59,34,24,51,93,21,10,46,89,98,16,45,92,0,47,60,18,75,43,12,85,39,40,99,27,32,20,5,90,6,54,8,30,44,15,52,66,71,61,14,88,57,65,9,49,94,33,79,35]],[[30,7,85,15,59,39,20,51,87,64,94,88,96,81,37,47,78,28,82,17,61,19,58,84,53,70,60,68,27,31,10,67,57,46,9,14,98,75,35,72,32,12,36,34,65,69,93,33,86,63,43,13,45,97,74,5,95,92,3,29,8,49,26,40,41,73,83,1,25,89,66,0,23,6,18,2,38,48,11,24,80,71,62,91,76,4,56,52]],[[17,98,82,93,97,53,47,48,57,92,90,10,87,84,69,99,83,44,15,22,68,50,67,16,28,0,2,38,59,85,54,79,89,29,31,58,95,9,86,12,71,56,46,77,7,73,51,42,26,39,49,1,81,13,4,6,72,70,75,43,3,96,52,25,41,14,91,78,8,76,62,55,94,23,18,88,36,19,21,24,35,66,45,30,80,63,61,33,74,65,27,37,34,60,32,11,20,5]],[[48,67,40,89,53,52,19,38,99,23,68,60,30,28,92,18,59,7,71,94,95,81,98,17,49,31,32,26,42,10,57,47,11,24,6,34,91,43,85,61,2,55,4,12,51,63,37,46,78,35,13,87,75,21,93,0,96,56,82,54,15,88,62,25,39,20,84,66,29,76,64,77,9,8,86,16,50,14,3,90,70,65,36,45,79]],[[72,28,94,18,2]],[[70,74,98,92,53,37,19,25,42,29,48,72,31,63,99,83,43,32,62,81,58,21,45,78,17,69,80,23,97,7,67,4,9]],[[6,97,0,52,17,80,29,8,90,19,1,27,64,58,47,7,79,81,78,61,62,2,98,68,70,96,89,82,67,35,76,36,72,87,55,22,13,86,99,33,9,15,12,39,60,16,74,66,95,50,25,5,23,49,93,69,83,14,91,48,71,40,46,24,44,30,3,77,10,56,43,88,63,20,37,31,18,65,54,73,84,94,45,92,26]],[[87,35,69,72,84,4,22,40,2]],[[75,18,96,91,50,9,38,20,72,30,97,49,86,69,42,88,17,10,64,44,6,12,55,29,94,43]],[[98,78,76,50,41,3,81,34,57,62,29,45,70,48,55,23,74,86,10,79,37,31,9,93,92,19,82,83,49,40,46,13,11,0,39,56,69,73,17,6,8,5,67,27,28,35,54,32,26,60,1,58,22,53,90,38,44,20,24,66,18,51,95,88,63,15,33,97,80,36,4,59,77,85,75,89,2]],[[55,35,53,38,61,9,46,32,31,92,80,63,76,78,25,58,13,17,0,50,42]],[[48,42,56,98,55,83,76,17,38,41,77,88,25,61,40,22,50,85,37,62,73,31,90,99,35,94,46,14,87,69,23,3,59,26,97,81,8,52,54,74,60,66,43,78,63,82,19,15,16,96,9,45,27,24,4,28,91,30,64,71,34,32,58,39,2,70,5,6,80,21,67,11,33,20,53,1,18,89,29]],[[51,96,42,55,13,1,12,33,28,65,66,71,74,73,91,57,47,50,59,75,64,19,44,3,61,95,37,53,10,14,18,77,39,43,58,26,80,22,30,6,85,46,68,81,20,4,78,2,99,45,7,94,21,41,60,89,88,15,92,11,35,84,83,67,27,29,70,25,40,5,98,86,87,93,0,23,72,82,90,69,36,79]],[[]],[[27,26,35,96,90,8,73,13,68,23,46,41,25,58,14,33,62,67,81,40,76,49,50,75,85,44,45,86,22,38,10,17,80,15,30,39,79,11,95,74,9,32,24,98,70,94,36,57,99,83,31,82,34,60,88,77,97,69,78,18,54,89,20,28,3,71,0,93,64,6,56,12,91,16,37,66,92,21,52,61,63,47,5,2,84,53,19,43,4,48]],[[28,68,36,21,58,72,63,70,65,14,73,90,34,69,46,86,5,56,84,27,54,13,31,38,4,57,33,44,11,82,15,30,26,94,79]],[[78,17,26,7,72,44,68,35,76,21,41,90,37,73,34,65,86,12,96,52,83]],[[89,16,31,18,91,41,97,86,50,62,73,80,34,53,48,57]],[[81,98,11,51,65,95,35,88,47]],[[62,41,74,0,93,11,95,58,81,85,89,45,8,68,50,27,54,84,63,34,98,36,43,70,73,16,72,99,77,6,5,12,92,2,15,20,56,29,96,82,86,44,87,91,79,19,10,17,69,55,23,97,51,49,42,90,53,3]],[[80,39,92,89,29,54,83,11,90,12,0,27,61,9,16,75,28,66,56,1,99,43,15,94,85,87,86,95,49,97,13,69,40,47,38,17,48,71,52,63,55,8,41,78,73,4,33,36,96,98]],[[21,56,44,92,27,80,19,52,78,87,98,95,11,12,17,15,75,49,97,54,40,85,31,35,10,77,70,36,3,38,26,66,65,24,50,37,6,67,57,62,84,74,68,7,59,58,79,73,4,33,0,23,20,8,61,72,69,48,34,90,30,51,1,96,82,16,13,2,71,39,25,86,41,9,47,22,88,60,45,28,32,91,18]],[[19,35,10,39,97,65,26,99,68,41,50,75,81,83,82,8,96,55,30,7,31,11,85,14,58,80,86,22,15,1,17,70,20,63,44,33,21,23,84,47,49,77,69,46,74,59,91,66,51,27,57,64,4,16,45,36,40,60,79,29,32,62,3,90,95,38,98,56,6,28,18,52,34,37,88,89,73,0]],[[1,31,5,60,46]],[[19,22,4,70,91,94,83,53,28,41,31,92,40,34,9,73,47,15,64,6,98,95,66,5,51,8,59,36,39,90,11,58,1,93,25,37,38,77,71,82,29,23,81,89,49,55,12,46,86]],[[31,19,0,52,3,29,69,44,81,88,1,42,97,84,48,39,13,26,67,30,53,62,7,18,35,11,5,94,66,96,47,58,10,12,64,17,50,4,37,36,95,27,90,8,15,76,16,20,51,25,92,93,70,85,28,65,14,78,71,56,61,6,9,38,91,45,72,46,82,59,49,74,24,60,43,86,63,40,80,2,73,68,89,99,75,32,33,34,21,98,79,22,87,55,23,54,83]],[[51,57,71]],[[70,31,12,59,13,17,15,1,7,28,16,25,51,47,80,82,10,74,75,33,9,2,8,88,56,89,11,42,93,5,96,6,21,55,50,63,3,24,43,27,73,22,95,69,94,66,90,79,78,39,65,49,71,41,18,98,26,35,30,64,99,54,62,77,61,97,85,86,92,34,76,58,81,32,38,72,60,45,84,83,46,36,48,0,20,52,40,67,4,19,91,53,29,68,23]],[[20,12,31,84,30,34,68,7,28,73,49,45,22,87,95,75,40,88,96,3,82,72,78,18,77,24,63,69,39]],[[62,4,11,7,29,77,28,2,67,61,0,42,78,25,16,43,22,41,96,92,18,75]],[[18,14,67,46,9,47,90,84,50,75,12,43,38,41,17,20,55,81,62,40,22,71,45,28,93,79,48,39,37,16,74,0,91,4,23,80,76,64,36,6,59,31,95,21,94,66,15,69,92,10,82,5,77,42,49,56,63,68,70,13,53,54,52,86,60,96,3,24,88,65,83,73,29,72,89,11,85,25,33,26,99,7,58,98,2,78,27,34,87,61]],[[33,13,9,43,21,48,20,97,70,11,96,76,78,61,3,55,83,95,77,84,93,6,12,42,26,24,52,91,69,99,36,38,30,81,87,50,62,92,85,23]],[[]],[[11,37,84,80,76,61,25,12,3,26,21,81,98,10,60,14,39,50,85,62,33,99,69,49,23,47,48,74,75,57,5,79,56,59,68,28,34,36,91,9,73,44,42,6,77,70,22,51,63,90,66,87,97,35]],[[49,66,53,68,87,60,73]],[[60,38,10,50,91,4,64,73,66,92,86,79,18,15,57,22,21,27,24,16,5,54,97,55,25,87,33,40,8,11]],[[71,50,70,41,35,66,58,1,89,79,75,94,53,14,87,19,18,72,91,74,12,13,82,90,36,68,44,52,33,49,62,60,4,22,95,51,83,39,38,43,73,25,2,93,21,59,15,3,47]],[[34,47,2,43,38,39,35,62,89,87,12,29,17,95,56,41,99,53,77,11,24,85,27,52,92,66,98,7,65,20,8,94,64,51,90,3,22,91,78,82,75,60,67,15,97,88,57,23,45,59,71,76,54,32,25,40,72,1,61,48]],[[76,57,22,60,75,70,44,93,20,33,88,11,36,3,49,6,91,73,27,28,80,26,34,52,65,2,1,96,16,97,82,79,32,39,35,54,48,64,94,29,71,13,72,19,43,90,99,66,25,37,84,0,67,42,23,95,41,38,46,18,56,85]],[[8,43,35,81,41,97,33,83,91,92,38,24,19,66,30,7,76,51,40,17,3,63,37,93,53,82,49,4,88,98,28,68,60,45,64,89,21,75,42,56,94,11,18,6,85,99,47,16,46,59,48,58,70,78,95,5,14,22,62,87,26]],[[42,47,33,74,37,59,15,60,6,81,96,89,79,9,92,24,64,93,48,67,38,52,91,19,17,25,43,78,58,18,40,23,10,62,99,22,69,63,3,0,28,75,13,90,49,80,36,56,54,31,72,5,8,39,27,66,45,88,73,30,84,85,2,34,12,68,87,20,35,97,21,44,32,53,7,65,83,11,86,4,61,50,16,29,55,1,57,94,41,26,46,98,82,76,71,14,95,51,77,70]],[[51,2,29,28,93,16,27,75,64,21,15,46,91,83,4,48,81,32,98,68,79]],[[76,6,84,13,83,2]],[[88,14,53,56,48,15]],[[32,60,89,19,26,88,87,80,1,38,53,84,12,94,66,34,79,77,17,97,13,65,15,36,14,83,63,25,72,33,85,71,45,52,37,20,5,35,31,58,74,44,30,21,82,0,54,42,73,7,76,69,61,9,51,99,4,6,16,75,29,18,41,39,3,48,11,2,90,70]],[[40,54,94,14,12,5,1,17,84,82,21,42,45,56,79,34,11,47,43,23,96,51,78,58,91,49,61,53,89,85,16,7,20,13,72,73,86,83,39,24,74,22,64,93,55,81,65,46,8,30,31,68,26,28,2,4,69,41,67,0,33,36,38,70,71,57,75,6,27,35,80,48,15,62,50,25,88,95,44,92,19,63,99,97,59,66]],[[21,9,96,62,41,30,42,35,6,64,28,70,82,48,51,94,10,58,56,73,57,11,63,79,40,15,77,2,13,85,52,4,0,78,38,26,87,60,99,23,69,3,59,14,54,29,61,92,49,39,65,84,45,93,97,89,7,91,81,67,53,22,18]],[[66,47,89,13,5,21,63,17,91,52,96,32,78,25,24,15,50,27,58,85,43,97,53,95,75,84,57,81,64,92,93,0,67,6,55,61,22,44,37,11,46,90,8,99,80,42,38,77,20,88,65,26,72,62,74,70,86,94,18,28,73,39,48,83,19,51,87,12,33,35]],[[37,87,44,86,16,90,83,22,64,69,88,81,41,14,45,71,61,74,73,53,68,36,54,1,66,13,3,48,18,6,7,25,34,20,78,32,84,80,89,97,50,63,82,72,67,2,92,52,28,70,39,43,47,35,96,98,46,24,15,91,58,93,42,99,26,75,38,0,95,59,19,27,65,85,94,55,62,23,51,11,49,17,30,29,9,79,77,10,76,57,12]],[[65,15,48,5,54,35,71,33,16,20,74,32,0,42,59,19,96,84,41,76,6,78,38,62,73,70,45,9,40,67,28,23,66,8,64,90,53,34,80,25,83,22,14,56,13,86,21,63,68,18,55,97,39,92,30,94,81,87,7,58,69,98,77,2,99,24,43,61,91,17,51,72,95,31,88,11,26,29,57,37,1,47,79,10,36,82,44,12,89,60,27,52,3,85]]],"test_outputs":[[1,2,0],[],[0,1,2],[28,46,1,13,37,39,50,78,10,59,7,0,44,6,54,33,29,77,40,57,38,22,71,16,5,17,4,76,49,3,58,65,43,56,55,31,63,47,64,67,69,45,73,24,12,80,26,79,42,66,51,52,18,74,53,35,9,70,21,32,11,41,19,75,48,34,72,20,8,30,61,15,23,60,36,68,2,27,25,14,62],[60,42,16,40,14,20,45,47,69,58,30,28,5,1,71,53,21,12,15,4,38,29,8,59,51,70,17,13,49,65,75,35,7,67,26,18,68,33,43,61,27,6,73,25,54,57,2,63,32,11,22,48,72,50,46,55,24,37,62,0,23,52,56,44,74,36,10,66,34,19,41,3,31,76,39,64,9],[12,51,16,60,49,21,27,24,0,17,47,29,7,9,32,42,6,35,43,20,33,53,52,2,19,59,14,40,61,37,18,8,58,54,34,45,62,31,15,39,4,44,11,28,10,30,23,56,25,13,5,46,22,1,3,48,63,26,41,57,50,55,38,36],[41,23,25,0,16,28,38,8,33,35,15,6,37,2,12,3,27,19,26,14,20,18,32,22,11,5,1,7,9,40,34,39,24,17,30,4,29,13,10,31,21,36],[17,5,54,37,43,40,2,14,6,1,47,25,36,8,26,48,12,7,39,19,21,27,44,55,32,46,16,18,13,9,22,53,45,20,11,10,38,49,33,4,0,23,52,41,50,3,29,28,35,24,51,15,42,30,34,31],[7,6,5,0,4,3,2,1,8,9],[10,38,22,9,14,33,36,3,34,26,17,0,23,1,25,6,8,21,24,2,27,7,18,30,16,28,32,13,39,12,35,5,4,37,31,15,11,29,20,19],[20,29,38,33,19,14,37,31,57,15,46,30,48,22,65,35,0,24,62,45,40,68,4,69,13,10,1,18,2,54,63,61,21,6,59,34,67,42,56,64,17,36,25,41,66,44,12,43,11,39,55,26,28,51,60,3,49,9,27,52,58,50,8,23,16,5,53,47,7,32],[2,1,3,0],[36,3,23,34,9,24,18,20,5,2,1,33,19,40,8,0,27,7,41,11,42,43,31,6,25,38,13,15,35,21,37,28,22,30,12,4,39,29,26,10,16,14,32,17],[29,61,62,79,65,47,93,74,4,60,45,59,39,58,10,20,92,48,57,76,53,24,87,21,1,32,37,66,41,71,40,77,75,70,31,18,11,13,8,16,6,38,63,82,2,44,23,42,17,15,22,91,3,36,43,64,35,80,56,73,12,84,67,72,88,19,78,25,30,89,69,68,50,7,28,90,27,34,9,0,52,49,26,55,54,51,83,46,14,86,33,85,81,5],[53,48,40,33,19,26,41,27,28,6,54,44,39,32,29,16,10,9,22,12,20,46,24,23,47,49,30,35,34,3,51,18,5,7,14,2,42,13,55,25,4,31,45,36,37,0,50,15,11,21,17,1,8,38,43,52],[83,50,59,13,57,48,32,68,66,64,27,75,62,91,55,61,19,29,69,77,38,17,54,31,42,46,36,7,37,49,84,33,10,81,90,88,65,63,94,35,95,15,71,72,79,51,34,0,23,16,1,28,11,41,74,89,18,93,82,8,78,56,40,73,70,2,5,43,25,53,86,24,67,6,80,20,47,30,39,76,58,60,22,87,85,52,92,12,9,26,4,3,44,21,45,14],[11,1,7,14,10,2,6,12,4,13,8,3,0,9,5],[43,27,46,19,45,47,41,4,6,30,49,32,54,18,34,9,20,38,17,26,39,33,0,25,52,5,37,21,2,13,53,12,31,28,44,7,11,42,24,35,15,50,10,36,1,29,8,23,40,51,3,14,16,22,48],[51,70,3,57,81,69,43,54,4,45,47,27,55,42,50,68,32,28,77,34,6,26,65,9,25,40,23,36,5,41,10,29,79,20,75,17,21,37,13,39,7,44,18,59,62,2,22,14,35,1,58,72,78,16,31,73,15,33,30,80,12,71,53,52,74,64,76,48,11,63,60,8,24,61,0,67,38,49,56,46,66,19],[2,4,11,3,1,14,7,18,16,15,13,5,0,17,9,8,10,6,12],[18,24,2,16,11,5,34,38,36,12,14,32,6,8,35,25,13,9,26,23,19,33,20,28,22,15,37,0,27,30,21,3,1,7,29,10,17,31,4],[1,0,9,2,15,7,12,3,14,8,10,16,17,6,4,11,13,5],[55,15,9,3,52,1,10,61,34,50,40,35,19,24,42,37,11,39,8,62,16,23,6,32,30,44,51,31,4,0,53,56,20,27,41,49,21,36,43,38,59,13,25,14,2,7,29,48,57,46,12,17,47,28,60,54,58,33,5,26,18,45,22],[21,14,5,40,24,42,26,13,9,29,18,41,6,25,38,17,44,7,39,10,31,43,19,45,23,34,4,27,36,35,12,2,32,8,37,16,0,3,28,20,33,11,1,30,15,22],[7,0,15,6,1,8,10,4,3,16,14,5,12,11,13,9,2],[31,55,22,15,64,35,67,26,61,58,23,32,20,50,39,8,42,63,66,13,10,53,48,65,40,16,7,2,47,1,52,5,12,37,54,14,45,62,27,6,56,17,0,21,24,29,4,3,11,38,57,46,34,59,36,51,44,33,19,28,9,49,43,30,18,60,25,41],[60,30,86,1,77,2,49,4,70,34,17,84,46,65,50,42,59,9,38,33,15,16,14,47,58,40,75,25,21,10,27,67,32,5,0,39,3,80,64,36,6,66,7,19,85,83,12,68,44,8,35,87,28,26,45,79,22,81,78,11,74,57,82,56,13,31,23,55,43,41,18,20,72,48,53,71,73,29,51,52,63,24,69,54,61,37,76,62],[26,18,24,35,16,29,5,19,11,3,4,20,36,12,27,10,14,0,15,7,31,33,21,2,30,17,13,9,8,28,6,22,32,34,25,23,1],[0,17,16,45,55,7,21,39,14,42,15,30,50,38,52,5,56,22,48,35,11,59,3,46,37,27,25,13,29,43,47,26,9,58,44,33,19,54,23,28,31,2,53,4,1,8,6,12,24,20,34,57,18,10,41,36,40,32,49,51],[16,26,0,24,38,66,1,7,68,23,4,75,14,54,67,22,42,60,6,11,40,12,28,3,21,32,70,17,44,49,29,2,27,51,37,41,73,35,62,47,69,46,59,65,48,64,45,53,20,8,39,5,57,34,10,15,31,43,50,25,74,36,18,52,55,61,58,56,71,9,72,19,63,13,33,30],[82,85,44,86,89,37,50,32,64,34,33,9,63,11,70,56,30,80,48,52,40,73,83,51,15,87,18,65,88,28,43,61,4,57,67,25,0,49,20,72,69,77,29,1,76,53,22,19,23,26,8,46,17,5,31,39,60,55,6,90,35,3,59,58,14,62,68,27,2,7,81,75,78,74,12,54,38,36,13,66,10,24,16,41,71,21,45,42,47,84,79],[],[7,22,4,21,8,0,15,10,17,18,14,16,11,3,12,13,9,1,20,6,2,19,5],[3,5,15,0,13,6,18,16,12,9,17,7,10,14,11,2,8,4,1],[11,49,34,75,81,6,58,10,30,51,79,68,19,24,15,46,66,38,67,23,55,70,42,12,14,7,27,16,63,80,71,39,17,13,5,44,18,60,64,54,29,83,25,74,8,62,82,84,76,22,77,48,35,57,41,50,2,21,28,72,37,3,26,36,43,53,69,1,9,33,59,78,61,4,0,45,20,47,31,32,52,40,56,85,73,65],[22,4,2,0,19,17,21,11,8,23,7,9,10,1,24,16,6,15,14,3,12,13,18,20,5],[40,57,10,24,62,3,6,36,16,78,34,41,66,51,31,75,54,76,49,27,53,79,43,71,37,45,70,1,13,0,7,58,28,35,68,4,12,65,20,50,72,46,77,44,9,8,29,61,74,48,5,59,55,23,38,52,26,22,2,18,33,17,30,73,15,39,69,67,64,32,60,25,21,47,14,19,42,11,63,56],[18,33,72,74,29,1,12,31,71,58,53,7,27,56,28,21,25,49,22,26,66,62,59,30,75,2,6,23,41,57,17,60,4,42,73,44,54,40,15,55,64,52,45,24,67,32,16,11,63,70,37,3,47,68,34,50,43,46,48,5,51,8,19,10,69,9,0,14,35,65,13,36,61,20,38,39],[1,11,6,9,13,0,14,10,4,15,3,16,8,5,2,7,12],[5,7,13,1,15,2,11,14,4,10,12,8,6,0,3,9,17,16],[11,13,2,26,30,12,21,25,1,0,16,41,15,23,14,3,24,40,28,20,9,29,4,32,34,19,17,35,27,18,10,37,38,33,39,5,7,31,8,22,6,36],[14,17,8,5,27,29,2,26,21,28,25,23,7,20,15,1,16,11,6,10,13,0,18,19,3,12,24,9,22,4],[4,2,0,1,3],[84,76,68,10,13,27,89,7,87,64,38,80,73,91,30,82,6,55,61,56,78,66,5,24,12,86,49,62,98,92,39,22,44,29,88,25,11,52,17,16,83,28,36,40,26,48,31,63,35,19,33,50,71,94,32,34,69,9,1,21,3,37,59,58,18,43,85,72,20,54,97,57,67,70,79,96,81,41,90,4,46,93,75,47,95,15,0,65,2,77,8,74,45,42,51,53,23,60,14],[64,71,17,45,37,59,61,6,50,55,60,16,23,8,48,0,41,35,18,30,27,70,67,15,57,24,47,14,28,68,74,12,42,39,53,44,10,3,52,21,11,38,66,40,51,5,2,65,29,19,43,72,20,9,62,22,7,76,25,31,73,75,56,13,63,46,1,54,69,32,34,33,36,4,26,58,49],[60,59,46,22,41,4,34,23,5,40,25,28,27,18,36,30,35,45,39,33,50,26,44,6,29,54,13,51,53,1,20,9,10,38,42,21,49,12,0,15,57,3,43,17,47,55,16,7,48,19,31,11,24,52,32,37,14,8,56,2,58],[0,6,4,7,3,8,9,1,5,2],[0,2,1],[10,8,28,32,24,19,11,16,30,3,33,1,20,17,22,25,5,13,12,34,7,15,2,26,27,18,29,21,36,0,31,4,9,23,35,14,6],[0,6,11,5,1,10,7,2,4,8,3,9],[89,24,7,93,39,32,16,50,51,58,77,8,59,25,72,70,71,27,38,74,0,55,79,54,35,53,76,13,42,84,12,90,41,28,66,37,18,69,60,5,81,82,87,48,68,15,29,43,88,9,30,46,49,86,26,67,75,11,3,21,94,44,1,10,2,65,80,23,33,31,95,45,56,14,92,20,73,36,62,22,34,17,57,91,78,61,40,63,85,64,19,47,6,96,52,4,83],[21,70,17,7,31,69,40,55,63,19,56,52,32,15,25,39,10,45,20,75,27,5,54,16,1,42,58,71,53,23,35,68,46,51,66,48,14,47,26,24,67,22,44,0,9,29,33,11,65,50,73,34,4,3,49,61,72,13,12,28,2,62,74,38,60,57,43,36,59,6,41,18,8,64,37,30],[35,3,24,6,29,19,18,1,36,13,37,12,26,27,22,23,10,15,4,2,38,31,7,30,8,43,39,32,11,25,14,33,16,41,21,42,20,28,34,9,17,5,40,0],[47,22,12,61,63,6,65,77,40,7,53,25,73,68,44,32,50,60,39,13,19,36,0,58,10,66,59,80,35,82,2,20,23,55,56,3,26,52,67,45,41,48,78,17,37,69,14,64,75,28,34,49,72,18,33,76,70,30,11,29,71,24,9,51,81,31,5,8,54,15,16,74,42,62,21,46,38,79,27,1,4,43,57],[71,67,75,58,85,55,73,1,60,34,30,78,41,51,35,3,19,74,21,6,72,79,68,62,28,17,59,0,29,40,47,43,38,42,14,76,5,63,64,50,52,33,15,77,61,7,87,24,86,32,22,4,26,20,82,49,9,44,70,31,27,45,25,81,39,65,54,37,84,16,80,13,18,66,23,2,48,8,11,69,83,57,46,10,56,12,53,36],[25,51,26,60,54,97,55,44,68,37,11,95,39,53,65,18,23,0,74,77,96,78,19,73,79,63,48,90,24,33,83,34,94,87,92,80,76,91,27,49,64,47,59,17,82,42,6,7,50,21,46,62,5,30,71,41,8,35,28,93,86,70,85,89,81,22,20,14,57,40,56,45,88,58,69,43,67,31,84,52,2,16,13,29,38,12,75,32,10,66,9,3,72,36,61,4,1,15],[55,40,78,42,34,17,73,72,29,32,43,50,77,60,75,23,15,6,65,53,9,33,63,27,13,68,12,25,26,35,49,82,46,7,64,2,28,37,83,47,31,0,24,76,44,5,4,59,41,57,30,16,11,39,62,45,70,81,67,1,10,80,18,52,69,71,48,84,21,58,66,38,74,51,61,3,79,36,14,54,19,20,56,22,8],[4,3,1,0,2],[31,29,32,24,6,21,27,7,9,12,17,5,8,16,22,10,4,20,18,13,30,25,0,11,1,23,26,19,15,3,28,2,14],[2,10,21,66,51,0,15,7,40,68,42,36,57,41,45,4,76,9,73,35,52,63,50,84,11,6,65,75,39,29,31,74,43,61,70,64,82,62,14,59,53,49,3,78,34,69,13,44,19,20,72,12,77,47,28,23,55,24,60,32,79,46,30,67,18,16,5,17,27,56,80,37,33,71,26,8,58,83,54,81,48,25,1,22,38],[8,5,6,1,7,2,3,4,0],[20,5,17,21,16,1,7,23,9,6,14,25,19,11,4,22,18,13,8,0,12,15,3,24,2,10],[33,50,76,5,70,41,39,40,22,18,32,31,65,38,60,25,57,52,15,58,48,43,44,10,21,47,66,7,45,69,20,55,34,29,4,56,11,30,13,28,3,61,53,46,14,35,8,51,71,49,9,64,59,42,36,12,37,16,74,2,72,1,19,68,6,26,27,73,17,63,75,54,24,23,62,67,0],[18,5,16,17,14,8,7,1,3,20,6,19,2,0,15,4,11,12,13,10,9],[75,64,31,54,66,67,36,50,71,27,47,48,7,76,46,73,69,15,30,53,12,33,52,55,78,57,21,61,72,60,24,18,8,63,14,9,1,42,51,26,0,16,37,74,38,4,2,62,32,40,13,19,44,58,41,70,29,65,59,20,39,6,10,43,68,35,45,5,17,28,11,77,22,56,25,49,34,3,23],[74,5,47,23,45,69,39,50,28,59,6,4,29,57,30,21,44,52,37,75,67,35,64,8,65,38,7,60,80,26,32,68,53,2,33,22,49,41,16,17,0,27,3,15,34,18,54,24,20,9,10,63,42,79,66,11,76,13,12,19,31,46,81,36,43,77,62,61,40,71,72,56,55,78,14,58,73,51,25,1,70,48],[],[66,83,64,88,82,69,5,40,30,37,71,7,14,33,73,31,59,86,62,77,28,9,42,12,1,0,63,34,50,41,15,52,2,46,74,29,35,19,11,87,25,26,10,81,89,21,22,78,85,60,70,47,13,53,79,16,80,68,75,17,8,57,44,65,6,39,23,20,55,58,36,32,18,51,49,84,24,27,54,61,4,72,76,67,45,38,3,56,43,48],[24,16,28,21,9,30,3,32,19,0,31,22,26,12,2,23,27,14,20,17,25,4,6,8,1,13,7,5,10,34,29,18,15,11,33],[3,17,1,9,2,14,7,12,10,5,19,15,6,4,13,8,0,20,16,11,18],[1,3,2,12,5,14,8,13,15,9,10,11,7,0,4,6],[2,6,8,3,4,0,7,5,1],[3,33,57,30,29,12,46,5,31,34,25,47,45,35,50,15,37,19,21,1,54,22,41,11,53,14,52,56,16,49,36,7,0,18,13,48,23,26,24,2,28,44,8,39,17,9,40,42,10,55,43,32,4,6,38,51,20,27],[10,19,45,41,13,7,9,30,22,14,35,11,16,4,46,47,34,1,32,42,21,33,36,28,38,5,40,18,12,39,17,31,37,44,15,43,0,6,24,26,25,3,8,2,23,27,48,29,49,20],[50,62,67,28,48,36,43,53,73,24,12,13,66,15,65,14,82,6,52,0,75,51,33,70,30,4,79,60,22,80,49,58,23,27,35,29,69,20,72,2,78,74,57,17,34,61,7,19,1,38,45,44,77,54,39,32,31,37,42,56,26,68,55,47,41,16,25,8,46,5,64,40,21,71,9,76,59,81,3,11,63,18,10],[77,29,62,52,68,19,15,2,21,23,28,53,30,70,0,32,36,27,37,6,49,69,59,18,20,60,35,72,1,55,73,65,3,56,9,34,54,43,39,40,10,48,71,17,67,50,24,45,57,61,33,51,5,47,8,42,31,76,44,11,41,58,25,12,14,13,38,22,26,74,75,63,46,64,16,4,66,7],[0,2,1,4,3],[32,2,23,19,25,14,30,46,17,0,1,41,34,8,40,10,13,27,35,36,28,12,9,47,16,44,24,7,45,31,26,18,22,3,38,15,37,42,39,6,48,43,29,4,11,33,5,21,20],[2,10,79,4,37,26,61,22,43,62,32,25,33,16,56,44,46,35,23,1,47,88,91,94,72,49,17,41,54,5,19,0,85,86,87,24,39,38,63,15,77,11,74,7,65,67,30,14,70,36,48,3,20,95,93,59,31,69,73,60,21,76,34,55,28,18,81,6,52,58,66,80,71,84,45,57,90,78,8,68,96,13,53,75,92,9,82,42,64,50,51,27,40,29,12,89,83],[0,1,2],[83,7,21,36,88,29,31,8,22,20,16,26,2,4,6,10,5,54,89,84,32,41,94,37,11,56,39,9,92,58,1,73,19,69,57,81,74,49,86,53,27,38,77,80,13,82,51,34,12,85,91,61,33,24,71,3,76,64,62,35,59,50,45,87,93,43,0,52,75,40,17,18,70,63,48,47,14,72,15,79,78,66,67,23,25,46,90,68,28,44,42,30,65,55,60],[19,7,1,23,0,12,25,8,4,2,5,28,16,11,10,26,6,27,21,9,15,24,22,20,3,13,17,14,18],[10,7,1,3,2,14,20,16,13,6,4,17,11,15,9,0,8,21,5,12,19,18],[31,84,66,33,51,39,81,4,49,75,10,59,1,46,29,14,0,15,43,20,34,67,77,79,86,23,72,41,78,87,38,28,12,27,19,13,53,11,22,3,5,26,54,8,62,60,61,16,55,82,40,64,89,18,56,37,69,45,2,57,47,58,21,73,71,30,9,36,52,85,25,35,17,50,70,7,76,63,88,68,74,6,32,48,24,44,42,65,83,80],[14,21,2,9,22,1,6,4,39,25,24,32,0,30,31,23,3,5,35,26,15,13,36,28,8,11,18,12,33,16,19,38,34,27,37,20,17,10,7,29],[],[8,30,43,39,13,0,7,15,10,46,24,6,9,35,20,36,53,37,1,16,42,41,25,26,23,17,47,32,29,33,14,5,19,48,50,34,22,45,40,27,28,4,44,31,3,11,2,18,51,49,38,52,12,21],[0,2,5,1,3,6,4],[5,20,28,2,29,13,19,12,16,15,18,24,17,26,1,27,3,21,23,14,0,6,8,7,11,10,25,4,9,22],[7,42,47,32,20,21,13,46,16,15,44,33,41,28,4,24,38,37,3,39,26,48,29,1,35,27,12,6,45,31,30,5,25,2,0,17,40,19,10,9,22,36,14,8,23,18,43,11,34],[57,2,35,27,30,19,10,43,12,29,36,47,20,54,22,11,53,0,6,4,5,55,15,3,48,1,59,33,23,17,52,14,46,49,41,58,7,32,28,25,42,50,56,40,51,18,38,39,21,9,45,8,34,37,24,31,13,44,26,16],[51,26,25,13,15,11,41,28,59,43,8,2,54,48,21,18,19,39,32,9,22,34,12,49,57,33,56,53,44,6,58,36,14,23,35,60,1,3,37,24,47,52,5,40,42,17,4,0,31,20,30,50,61,10,45,16,7,38,55,27,29,46],[20,27,55,43,15,0,41,56,47,19,42,12,36,57,11,60,30,14,6,2,22,10,18,4,38,1,33,48,46,50,26,17,24,39,51,49,32,58,21,34,13,31,52,37,16,53,3,25,7,44,59,28,35,8,9,23,40,54,5,29,45],[39,85,62,38,79,51,8,74,52,13,32,77,64,42,95,6,82,24,29,23,67,70,35,31,15,25,89,54,40,83,59,49,72,2,63,68,46,4,20,53,30,88,0,26,71,56,90,1,18,44,81,97,21,73,48,84,47,86,28,5,7,80,33,37,16,75,55,19,65,36,99,94,50,58,3,41,93,98,27,12,45,9,92,76,60,61,78,66,57,11,43,22,14,17,87,96,10,69,91,34],[1,14,10,5,9,6,3,2,17,11,15,0,8,19,7,20,16,13,12,4,18],[5,1,3,0,4,2],[1,5,4,2,3,0],[45,8,67,64,56,36,57,49,53,66,12,20,24,22,58,18,61,3,35,43,27,4,60,42,38,0,29,15,37,23,34,9,63,62,47,41,32,65,54,33,10,46,39,1,52,26,21,14,51,69,31,28,48,40,59,50,17,16,7,44,25,11,30,6,5,2,68,13,19,55],[59,6,54,55,5,67,31,48,16,4,33,3,72,30,7,80,32,10,41,19,39,75,52,68,53,49,50,60,15,69,61,62,38,0,57,11,18,78,12,47,17,71,25,74,21,27,1,44,13,65,23,84,26,73,81,42,46,85,58,51,56,63,64,34,35,40,66,22,14,70,45,9,37,8,29,36,76,28,24,79,43,2,77,20,83,82],[32,27,41,31,8,56,1,16,21,28,43,25,62,0,61,39,35,10,45,5,7,34,49,24,4,6,52,13,48,14,30,60,44,18,20,17,42,37,46,3,22,9,50,59,40,11,19,26,33,23,58,12,51,29,36,55,57,47,53,15,2,54,38],[31,4,33,42,39,67,3,15,7,58,64,48,5,36,14,13,51,17,59,11,68,69,38,46,61,45,20,37,40,1,62,16,65,9,22,34,26,18,35,53,6,28,50,0,32,55,52,60,54,24,47,12,44,27,63,25,19,56,66,49,2,41,8,29,30,57,23,10,21,43],[67,23,45,26,29,30,84,87,79,90,25,13,58,4,81,28,70,33,7,77,57,31,64,71,48,83,82,35,32,53,21,0,66,50,12,62,51,2,14,56,52,27,80,40,78,47,19,22,75,89,60,69,16,76,41,8,72,24,44,20,9,49,15,43,18,17,65,88,86,34,85,37,11,42,6,36,73,3,1,10,38,5,59,46,61,74,68,54,39,55,63],[12,80,63,92,3,20,58,33,27,83,75,87,44,42,1,8,69,49,15,9,46,41,31,65,39,76,90,30,77,54,73,11,7,37,5,84,79,22,52,28,18,13,66,86,26,81,2,70,91,36,4,50,43,78,59,14,89,67,23,47,34,0,32,29,48,60,25,6,71,24,10,19,62,21,82,38,56,85,40,17,93,45,57,74,88,35,68,53,55,72,16,51,61,64]],"language":"python"}
{"task_id":4,"prompt":"\ndef is_balanced(string: str) -> bool:\n    \"\"\"Determine if the input string is balanced.\n    A balanced string is one where all characters appear \n    the same number of times.\n    >>> is_balanced('xxxyyy')\n    True\n    >>> is_balanced('abcc')\n    False\n    >>> is_balanced('a')\n    True\n    \"\"\"\n","entry_point":"is_balanced","canonical_solution":"\ndef is_balanced(string: str) -> bool:\n    \"\"\"Determine if the input string is balanced.\n    A balanced string is one where all characters appear \n    the same number of times.\n    >>> is_balanced('xxxyyy')\n    True\n    >>> is_balanced('abcc')\n    False\n    >>> is_balanced('a')\n    True\n    \"\"\"\n# SOLUTION\n    from collections import Counter\n    counts = Counter(string)\n    return len(set(counts.values())) == 1\n","test":"tests","test_inputs":[["xxxyyy"],["abcc"],["a"],["aabbcc"],["aabbccc"],["aabbccdd"],["abcdbcda"]],"test_outputs":[true,false,true,true,false,true,true],"language":"python"}
{"task_id":5,"prompt":"\ndef bankers_rounding(n):\n    \"\"\"Computes the Banker's rounding of a number.\n    Rounds to nearest integer, on tie rounds to the nearest even integer.\n    >>> bankers_rounding(2.3)\n    2\n    >>> bankers_rounding(3.5)\n    4\n    >>> bankers_rounding(0.5)\n    0\n    \"\"\"\n","entry_point":"bankers_rounding","canonical_solution":"\ndef bankers_rounding(n):\n    \"\"\"Computes the Banker's rounding of a number.\n    Rounds to nearest integer, on tie rounds to the nearest even integer.\n    >>> bankers_rounding(2.3)\n    2\n    >>> bankers_rounding(3.5)\n    4\n    >>> bankers_rounding(0.5)\n    0\n    \"\"\"\n# SOLUTION\n    # round does this as it's the IEEE754 standard\n    if n < 0:\n        return -bankers_rounding(-n)  # use symmetry\n    int_part, frac_part = divmod(n, 1)\n    return int(int_part) + (frac_part > 0.5 or (frac_part == 0.5 and int_part % 2.0 == 1.0))\n","test":"tests","test_inputs":[[2.3],[3.5],[0.5],[-100],[-99.5],[-99.6],[-99.4],[-199.5],[-200.5],[-99],[-98.5],[-98.6],[-98.4],[-197.5],[-198.5],[-98],[-97.5],[-97.6],[-97.4],[-195.5],[-196.5],[-97],[-96.5],[-96.6],[-96.4],[-193.5],[-194.5],[-96],[-95.5],[-95.6],[-95.4],[-191.5],[-192.5],[-95],[-94.5],[-94.6],[-94.4],[-189.5],[-190.5],[-94],[-93.5],[-93.6],[-93.4],[-187.5],[-188.5],[-93],[-92.5],[-92.6],[-92.4],[-185.5],[-186.5],[-92],[-91.5],[-91.6],[-91.4],[-183.5],[-184.5],[-91],[-90.5],[-90.6],[-90.4],[-181.5],[-182.5],[-90],[-89.5],[-89.6],[-89.4],[-179.5],[-180.5],[-89],[-88.5],[-88.6],[-88.4],[-177.5],[-178.5],[-88],[-87.5],[-87.6],[-87.4],[-175.5],[-176.5],[-87],[-86.5],[-86.6],[-86.4],[-173.5],[-174.5],[-86],[-85.5],[-85.6],[-85.4],[-171.5],[-172.5],[-85],[-84.5],[-84.6],[-84.4],[-169.5],[-170.5],[-84],[-83.5],[-83.6],[-83.4],[-167.5],[-168.5],[-83],[-82.5],[-82.6],[-82.4],[-165.5],[-166.5],[-82],[-81.5],[-81.6],[-81.4],[-163.5],[-164.5],[-81],[-80.5],[-80.6],[-80.4],[-161.5],[-162.5],[-80],[-79.5],[-79.6],[-79.4],[-159.5],[-160.5],[-79],[-78.5],[-78.6],[-78.4],[-157.5],[-158.5],[-78],[-77.5],[-77.6],[-77.4],[-155.5],[-156.5],[-77],[-76.5],[-76.6],[-76.4],[-153.5],[-154.5],[-76],[-75.5],[-75.6],[-75.4],[-151.5],[-152.5],[-75],[-74.5],[-74.6],[-74.4],[-149.5],[-150.5],[-74],[-73.5],[-73.6],[-73.4],[-147.5],[-148.5],[-73],[-72.5],[-72.6],[-72.4],[-145.5],[-146.5],[-72],[-71.5],[-71.6],[-71.4],[-143.5],[-144.5],[-71],[-70.5],[-70.6],[-70.4],[-141.5],[-142.5],[-70],[-69.5],[-69.6],[-69.4],[-139.5],[-140.5],[-69],[-68.5],[-68.6],[-68.4],[-137.5],[-138.5],[-68],[-67.5],[-67.6],[-67.4],[-135.5],[-136.5],[-67],[-66.5],[-66.6],[-66.4],[-133.5],[-134.5],[-66],[-65.5],[-65.6],[-65.4],[-131.5],[-132.5],[-65],[-64.5],[-64.6],[-64.4],[-129.5],[-130.5],[-64],[-63.5],[-63.6],[-63.4],[-127.5],[-128.5],[-63],[-62.5],[-62.6],[-62.4],[-125.5],[-126.5],[-62],[-61.5],[-61.6],[-61.4],[-123.5],[-124.5],[-61],[-60.5],[-60.6],[-60.4],[-121.5],[-122.5],[-60],[-59.5],[-59.6],[-59.4],[-119.5],[-120.5],[-59],[-58.5],[-58.6],[-58.4],[-117.5],[-118.5],[-58],[-57.5],[-57.6],[-57.4],[-115.5],[-116.5],[-57],[-56.5],[-56.6],[-56.4],[-113.5],[-114.5],[-56],[-55.5],[-55.6],[-55.4],[-111.5],[-112.5],[-55],[-54.5],[-54.6],[-54.4],[-109.5],[-110.5],[-54],[-53.5],[-53.6],[-53.4],[-107.5],[-108.5],[-53],[-52.5],[-52.6],[-52.4],[-105.5],[-106.5],[-52],[-51.5],[-51.6],[-51.4],[-103.5],[-104.5],[-51],[-50.5],[-50.6],[-50.4],[-101.5],[-102.5],[-50],[-49.5],[-49.6],[-49.4],[-99.5],[-100.5],[-49],[-48.5],[-48.6],[-48.4],[-97.5],[-98.5],[-48],[-47.5],[-47.6],[-47.4],[-95.5],[-96.5],[-47],[-46.5],[-46.6],[-46.4],[-93.5],[-94.5],[-46],[-45.5],[-45.6],[-45.4],[-91.5],[-92.5],[-45],[-44.5],[-44.6],[-44.4],[-89.5],[-90.5],[-44],[-43.5],[-43.6],[-43.4],[-87.5],[-88.5],[-43],[-42.5],[-42.6],[-42.4],[-85.5],[-86.5],[-42],[-41.5],[-41.6],[-41.4],[-83.5],[-84.5],[-41],[-40.5],[-40.6],[-40.4],[-81.5],[-82.5],[-40],[-39.5],[-39.6],[-39.4],[-79.5],[-80.5],[-39],[-38.5],[-38.6],[-38.4],[-77.5],[-78.5],[-38],[-37.5],[-37.6],[-37.4],[-75.5],[-76.5],[-37],[-36.5],[-36.6],[-36.4],[-73.5],[-74.5],[-36],[-35.5],[-35.6],[-35.4],[-71.5],[-72.5],[-35],[-34.5],[-34.6],[-34.4],[-69.5],[-70.5],[-34],[-33.5],[-33.6],[-33.4],[-67.5],[-68.5],[-33],[-32.5],[-32.6],[-32.4],[-65.5],[-66.5],[-32],[-31.5],[-31.6],[-31.4],[-63.5],[-64.5],[-31],[-30.5],[-30.6],[-30.4],[-61.5],[-62.5],[-30],[-29.5],[-29.6],[-29.4],[-59.5],[-60.5],[-29],[-28.5],[-28.6],[-28.4],[-57.5],[-58.5],[-28],[-27.5],[-27.6],[-27.4],[-55.5],[-56.5],[-27],[-26.5],[-26.6],[-26.4],[-53.5],[-54.5],[-26],[-25.5],[-25.6],[-25.4],[-51.5],[-52.5],[-25],[-24.5],[-24.6],[-24.4],[-49.5],[-50.5],[-24],[-23.5],[-23.6],[-23.4],[-47.5],[-48.5],[-23],[-22.5],[-22.6],[-22.4],[-45.5],[-46.5],[-22],[-21.5],[-21.6],[-21.4],[-43.5],[-44.5],[-21],[-20.5],[-20.6],[-20.4],[-41.5],[-42.5],[-20],[-19.5],[-19.6],[-19.4],[-39.5],[-40.5],[-19],[-18.5],[-18.6],[-18.4],[-37.5],[-38.5],[-18],[-17.5],[-17.6],[-17.4],[-35.5],[-36.5],[-17],[-16.5],[-16.6],[-16.4],[-33.5],[-34.5],[-16],[-15.5],[-15.6],[-15.4],[-31.5],[-32.5],[-15],[-14.5],[-14.6],[-14.4],[-29.5],[-30.5],[-14],[-13.5],[-13.6],[-13.4],[-27.5],[-28.5],[-13],[-12.5],[-12.6],[-12.4],[-25.5],[-26.5],[-12],[-11.5],[-11.6],[-11.4],[-23.5],[-24.5],[-11],[-10.5],[-10.6],[-10.4],[-21.5],[-22.5],[-10],[-9.5],[-9.6],[-9.4],[-19.5],[-20.5],[-9],[-8.5],[-8.6],[-8.4],[-17.5],[-18.5],[-8],[-7.5],[-7.6],[-7.4],[-15.5],[-16.5],[-7],[-6.5],[-6.6],[-6.4],[-13.5],[-14.5],[-6],[-5.5],[-5.6],[-5.4],[-11.5],[-12.5],[-5],[-4.5],[-4.6],[-4.4],[-9.5],[-10.5],[-4],[-3.5],[-3.6],[-3.4],[-7.5],[-8.5],[-3],[-2.5],[-2.6],[-2.4],[-5.5],[-6.5],[-2],[-1.5],[-1.6],[-1.4],[-3.5],[-4.5],[-1],[-0.5],[-0.6],[-0.4],[-1.5],[-2.5],[0],[0.5],[0.4],[0.6],[0.5],[-0.5],[1],[1.5],[1.4],[1.6],[2.5],[1.5],[2],[2.5],[2.4],[2.6],[4.5],[3.5],[3],[3.5],[3.4],[3.6],[6.5],[5.5],[4],[4.5],[4.4],[4.6],[8.5],[7.5],[5],[5.5],[5.4],[5.6],[10.5],[9.5],[6],[6.5],[6.4],[6.6],[12.5],[11.5],[7],[7.5],[7.4],[7.6],[14.5],[13.5],[8],[8.5],[8.4],[8.6],[16.5],[15.5],[9],[9.5],[9.4],[9.6],[18.5],[17.5],[10],[10.5],[10.4],[10.6],[20.5],[19.5],[11],[11.5],[11.4],[11.6],[22.5],[21.5],[12],[12.5],[12.4],[12.6],[24.5],[23.5],[13],[13.5],[13.4],[13.6],[26.5],[25.5],[14],[14.5],[14.4],[14.6],[28.5],[27.5],[15],[15.5],[15.4],[15.6],[30.5],[29.5],[16],[16.5],[16.4],[16.6],[32.5],[31.5],[17],[17.5],[17.4],[17.6],[34.5],[33.5],[18],[18.5],[18.4],[18.6],[36.5],[35.5],[19],[19.5],[19.4],[19.6],[38.5],[37.5],[20],[20.5],[20.4],[20.6],[40.5],[39.5],[21],[21.5],[21.4],[21.6],[42.5],[41.5],[22],[22.5],[22.4],[22.6],[44.5],[43.5],[23],[23.5],[23.4],[23.6],[46.5],[45.5],[24],[24.5],[24.4],[24.6],[48.5],[47.5],[25],[25.5],[25.4],[25.6],[50.5],[49.5],[26],[26.5],[26.4],[26.6],[52.5],[51.5],[27],[27.5],[27.4],[27.6],[54.5],[53.5],[28],[28.5],[28.4],[28.6],[56.5],[55.5],[29],[29.5],[29.4],[29.6],[58.5],[57.5],[30],[30.5],[30.4],[30.6],[60.5],[59.5],[31],[31.5],[31.4],[31.6],[62.5],[61.5],[32],[32.5],[32.4],[32.6],[64.5],[63.5],[33],[33.5],[33.4],[33.6],[66.5],[65.5],[34],[34.5],[34.4],[34.6],[68.5],[67.5],[35],[35.5],[35.4],[35.6],[70.5],[69.5],[36],[36.5],[36.4],[36.6],[72.5],[71.5],[37],[37.5],[37.4],[37.6],[74.5],[73.5],[38],[38.5],[38.4],[38.6],[76.5],[75.5],[39],[39.5],[39.4],[39.6],[78.5],[77.5],[40],[40.5],[40.4],[40.6],[80.5],[79.5],[41],[41.5],[41.4],[41.6],[82.5],[81.5],[42],[42.5],[42.4],[42.6],[84.5],[83.5],[43],[43.5],[43.4],[43.6],[86.5],[85.5],[44],[44.5],[44.4],[44.6],[88.5],[87.5],[45],[45.5],[45.4],[45.6],[90.5],[89.5],[46],[46.5],[46.4],[46.6],[92.5],[91.5],[47],[47.5],[47.4],[47.6],[94.5],[93.5],[48],[48.5],[48.4],[48.6],[96.5],[95.5],[49],[49.5],[49.4],[49.6],[98.5],[97.5],[50],[50.5],[50.4],[50.6],[100.5],[99.5],[51],[51.5],[51.4],[51.6],[102.5],[101.5],[52],[52.5],[52.4],[52.6],[104.5],[103.5],[53],[53.5],[53.4],[53.6],[106.5],[105.5],[54],[54.5],[54.4],[54.6],[108.5],[107.5],[55],[55.5],[55.4],[55.6],[110.5],[109.5],[56],[56.5],[56.4],[56.6],[112.5],[111.5],[57],[57.5],[57.4],[57.6],[114.5],[113.5],[58],[58.5],[58.4],[58.6],[116.5],[115.5],[59],[59.5],[59.4],[59.6],[118.5],[117.5],[60],[60.5],[60.4],[60.6],[120.5],[119.5],[61],[61.5],[61.4],[61.6],[122.5],[121.5],[62],[62.5],[62.4],[62.6],[124.5],[123.5],[63],[63.5],[63.4],[63.6],[126.5],[125.5],[64],[64.5],[64.4],[64.6],[128.5],[127.5],[65],[65.5],[65.4],[65.6],[130.5],[129.5],[66],[66.5],[66.4],[66.6],[132.5],[131.5],[67],[67.5],[67.4],[67.6],[134.5],[133.5],[68],[68.5],[68.4],[68.6],[136.5],[135.5],[69],[69.5],[69.4],[69.6],[138.5],[137.5],[70],[70.5],[70.4],[70.6],[140.5],[139.5],[71],[71.5],[71.4],[71.6],[142.5],[141.5],[72],[72.5],[72.4],[72.6],[144.5],[143.5],[73],[73.5],[73.4],[73.6],[146.5],[145.5],[74],[74.5],[74.4],[74.6],[148.5],[147.5],[75],[75.5],[75.4],[75.6],[150.5],[149.5],[76],[76.5],[76.4],[76.6],[152.5],[151.5],[77],[77.5],[77.4],[77.6],[154.5],[153.5],[78],[78.5],[78.4],[78.6],[156.5],[155.5],[79],[79.5],[79.4],[79.6],[158.5],[157.5],[80],[80.5],[80.4],[80.6],[160.5],[159.5],[81],[81.5],[81.4],[81.6],[162.5],[161.5],[82],[82.5],[82.4],[82.6],[164.5],[163.5],[83],[83.5],[83.4],[83.6],[166.5],[165.5],[84],[84.5],[84.4],[84.6],[168.5],[167.5],[85],[85.5],[85.4],[85.6],[170.5],[169.5],[86],[86.5],[86.4],[86.6],[172.5],[171.5],[87],[87.5],[87.4],[87.6],[174.5],[173.5],[88],[88.5],[88.4],[88.6],[176.5],[175.5],[89],[89.5],[89.4],[89.6],[178.5],[177.5],[90],[90.5],[90.4],[90.6],[180.5],[179.5],[91],[91.5],[91.4],[91.6],[182.5],[181.5],[92],[92.5],[92.4],[92.6],[184.5],[183.5],[93],[93.5],[93.4],[93.6],[186.5],[185.5],[94],[94.5],[94.4],[94.6],[188.5],[187.5],[95],[95.5],[95.4],[95.6],[190.5],[189.5],[96],[96.5],[96.4],[96.6],[192.5],[191.5],[97],[97.5],[97.4],[97.6],[194.5],[193.5],[98],[98.5],[98.4],[98.6],[196.5],[195.5],[99],[99.5],[99.4],[99.6],[198.5],[197.5]],"test_outputs":[2,4,0,-100,-100,-100,-99,-200,-200,-99,-98,-99,-98,-198,-198,-98,-98,-98,-97,-196,-196,-97,-96,-97,-96,-194,-194,-96,-96,-96,-95,-192,-192,-95,-94,-95,-94,-190,-190,-94,-94,-94,-93,-188,-188,-93,-92,-93,-92,-186,-186,-92,-92,-92,-91,-184,-184,-91,-90,-91,-90,-182,-182,-90,-90,-90,-89,-180,-180,-89,-88,-89,-88,-178,-178,-88,-88,-88,-87,-176,-176,-87,-86,-87,-86,-174,-174,-86,-86,-86,-85,-172,-172,-85,-84,-85,-84,-170,-170,-84,-84,-84,-83,-168,-168,-83,-82,-83,-82,-166,-166,-82,-82,-82,-81,-164,-164,-81,-80,-81,-80,-162,-162,-80,-80,-80,-79,-160,-160,-79,-78,-79,-78,-158,-158,-78,-78,-78,-77,-156,-156,-77,-76,-77,-76,-154,-154,-76,-76,-76,-75,-152,-152,-75,-74,-75,-74,-150,-150,-74,-74,-74,-73,-148,-148,-73,-72,-73,-72,-146,-146,-72,-72,-72,-71,-144,-144,-71,-70,-71,-70,-142,-142,-70,-70,-70,-69,-140,-140,-69,-68,-69,-68,-138,-138,-68,-68,-68,-67,-136,-136,-67,-66,-67,-66,-134,-134,-66,-66,-66,-65,-132,-132,-65,-64,-65,-64,-130,-130,-64,-64,-64,-63,-128,-128,-63,-62,-63,-62,-126,-126,-62,-62,-62,-61,-124,-124,-61,-60,-61,-60,-122,-122,-60,-60,-60,-59,-120,-120,-59,-58,-59,-58,-118,-118,-58,-58,-58,-57,-116,-116,-57,-56,-57,-56,-114,-114,-56,-56,-56,-55,-112,-112,-55,-54,-55,-54,-110,-110,-54,-54,-54,-53,-108,-108,-53,-52,-53,-52,-106,-106,-52,-52,-52,-51,-104,-104,-51,-50,-51,-50,-102,-102,-50,-50,-50,-49,-100,-100,-49,-48,-49,-48,-98,-98,-48,-48,-48,-47,-96,-96,-47,-46,-47,-46,-94,-94,-46,-46,-46,-45,-92,-92,-45,-44,-45,-44,-90,-90,-44,-44,-44,-43,-88,-88,-43,-42,-43,-42,-86,-86,-42,-42,-42,-41,-84,-84,-41,-40,-41,-40,-82,-82,-40,-40,-40,-39,-80,-80,-39,-38,-39,-38,-78,-78,-38,-38,-38,-37,-76,-76,-37,-36,-37,-36,-74,-74,-36,-36,-36,-35,-72,-72,-35,-34,-35,-34,-70,-70,-34,-34,-34,-33,-68,-68,-33,-32,-33,-32,-66,-66,-32,-32,-32,-31,-64,-64,-31,-30,-31,-30,-62,-62,-30,-30,-30,-29,-60,-60,-29,-28,-29,-28,-58,-58,-28,-28,-28,-27,-56,-56,-27,-26,-27,-26,-54,-54,-26,-26,-26,-25,-52,-52,-25,-24,-25,-24,-50,-50,-24,-24,-24,-23,-48,-48,-23,-22,-23,-22,-46,-46,-22,-22,-22,-21,-44,-44,-21,-20,-21,-20,-42,-42,-20,-20,-20,-19,-40,-40,-19,-18,-19,-18,-38,-38,-18,-18,-18,-17,-36,-36,-17,-16,-17,-16,-34,-34,-16,-16,-16,-15,-32,-32,-15,-14,-15,-14,-30,-30,-14,-14,-14,-13,-28,-28,-13,-12,-13,-12,-26,-26,-12,-12,-12,-11,-24,-24,-11,-10,-11,-10,-22,-22,-10,-10,-10,-9,-20,-20,-9,-8,-9,-8,-18,-18,-8,-8,-8,-7,-16,-16,-7,-6,-7,-6,-14,-14,-6,-6,-6,-5,-12,-12,-5,-4,-5,-4,-10,-10,-4,-4,-4,-3,-8,-8,-3,-2,-3,-2,-6,-6,-2,-2,-2,-1,-4,-4,-1,0,-1,0,-2,-2,0,0,0,1,0,0,1,2,1,2,2,2,2,2,2,3,4,4,3,4,3,4,6,6,4,4,4,5,8,8,5,6,5,6,10,10,6,6,6,7,12,12,7,8,7,8,14,14,8,8,8,9,16,16,9,10,9,10,18,18,10,10,10,11,20,20,11,12,11,12,22,22,12,12,12,13,24,24,13,14,13,14,26,26,14,14,14,15,28,28,15,16,15,16,30,30,16,16,16,17,32,32,17,18,17,18,34,34,18,18,18,19,36,36,19,20,19,20,38,38,20,20,20,21,40,40,21,22,21,22,42,42,22,22,22,23,44,44,23,24,23,24,46,46,24,24,24,25,48,48,25,26,25,26,50,50,26,26,26,27,52,52,27,28,27,28,54,54,28,28,28,29,56,56,29,30,29,30,58,58,30,30,30,31,60,60,31,32,31,32,62,62,32,32,32,33,64,64,33,34,33,34,66,66,34,34,34,35,68,68,35,36,35,36,70,70,36,36,36,37,72,72,37,38,37,38,74,74,38,38,38,39,76,76,39,40,39,40,78,78,40,40,40,41,80,80,41,42,41,42,82,82,42,42,42,43,84,84,43,44,43,44,86,86,44,44,44,45,88,88,45,46,45,46,90,90,46,46,46,47,92,92,47,48,47,48,94,94,48,48,48,49,96,96,49,50,49,50,98,98,50,50,50,51,100,100,51,52,51,52,102,102,52,52,52,53,104,104,53,54,53,54,106,106,54,54,54,55,108,108,55,56,55,56,110,110,56,56,56,57,112,112,57,58,57,58,114,114,58,58,58,59,116,116,59,60,59,60,118,118,60,60,60,61,120,120,61,62,61,62,122,122,62,62,62,63,124,124,63,64,63,64,126,126,64,64,64,65,128,128,65,66,65,66,130,130,66,66,66,67,132,132,67,68,67,68,134,134,68,68,68,69,136,136,69,70,69,70,138,138,70,70,70,71,140,140,71,72,71,72,142,142,72,72,72,73,144,144,73,74,73,74,146,146,74,74,74,75,148,148,75,76,75,76,150,150,76,76,76,77,152,152,77,78,77,78,154,154,78,78,78,79,156,156,79,80,79,80,158,158,80,80,80,81,160,160,81,82,81,82,162,162,82,82,82,83,164,164,83,84,83,84,166,166,84,84,84,85,168,168,85,86,85,86,170,170,86,86,86,87,172,172,87,88,87,88,174,174,88,88,88,89,176,176,89,90,89,90,178,178,90,90,90,91,180,180,91,92,91,92,182,182,92,92,92,93,184,184,93,94,93,94,186,186,94,94,94,95,188,188,95,96,95,96,190,190,96,96,96,97,192,192,97,98,97,98,194,194,98,98,98,99,196,196,99,100,99,100,198,198],"language":"python"}
{"task_id":73,"prompt":"\nimport math\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"Computes the binomial coefficient (n choose k) using Pascal's triangle.\n    >>> binomial_coefficient(5, 2)\n    10\n    >>> binomial_coefficient(5, 0)\n    1\n    >>> binomial_coefficient(1, 1)\n    1\n    \"\"\"\n","entry_point":"binomial_coefficient","canonical_solution":"\nimport math\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"Computes the binomial coefficient (n choose k) using Pascal's triangle.\n    >>> binomial_coefficient(5, 2)\n    10\n    >>> binomial_coefficient(5, 0)\n    1\n    >>> binomial_coefficient(1, 1)\n    1\n    \"\"\"\n# SOLUTION\n    return math.comb(n, k)\n\n","test":"tests","test_inputs":[[5,2],[5,0],[1,1],[82,15],[82,0],[82,15],[4,3],[4,0],[4,3],[32,15],[32,0],[32,15],[18,4],[18,0],[18,4],[87,70],[87,0],[87,70],[12,10],[12,0],[12,10],[55,3],[55,0],[55,3],[4,1],[4,0],[4,1],[28,8],[28,0],[28,8],[65,4],[65,0],[65,4],[72,26],[72,0],[72,26],[92,84],[92,0],[92,84],[90,70],[90,0],[90,70],[54,15],[54,0],[54,15],[58,38],[58,0],[58,38],[36,1],[36,0],[36,1],[98,21],[98,0],[98,21],[90,55],[90,0],[90,55],[44,18],[44,0],[44,18],[20,7],[20,0],[20,7],[98,44],[98,0],[98,44],[14,2],[14,0],[14,2],[49,7],[49,0],[49,7],[46,23],[46,0],[46,23],[78,34],[78,0],[78,34],[6,6],[6,0],[6,6],[59,35],[59,0],[59,35],[16,13],[16,0],[16,13],[11,9],[11,0],[11,9],[38,24],[38,0],[38,24],[74,25],[74,0],[74,25],[91,9],[91,0],[91,9],[6,6],[6,0],[6,6],[30,25],[30,0],[30,25],[38,6],[38,0],[38,6],[30,28],[30,0],[30,28],[13,7],[13,0],[13,7],[36,30],[36,0],[36,30],[82,47],[82,0],[82,47],[21,12],[21,0],[21,12],[46,14],[46,0],[46,14],[86,35],[86,0],[86,35],[90,88],[90,0],[90,88],[83,10],[83,0],[83,10],[78,22],[78,0],[78,22],[69,32],[69,0],[69,32],[21,15],[21,0],[21,15],[49,18],[49,0],[49,18],[82,72],[82,0],[82,72],[29,22],[29,0],[29,22],[42,4],[42,0],[42,4],[30,27],[30,0],[30,27],[5,3],[5,0],[5,3],[52,18],[52,0],[52,18],[9,4],[9,0],[9,4],[73,41],[73,0],[73,41],[28,21],[28,0],[28,21],[64,51],[64,0],[64,51],[83,59],[83,0],[83,59],[19,9],[19,0],[19,9],[18,8],[18,0],[18,8],[96,72],[96,0],[96,72],[69,34],[69,0],[69,34],[96,75],[96,0],[96,75],[55,38],[55,0],[55,38],[52,24],[52,0],[52,24],[29,5],[29,0],[29,5],[66,64],[66,0],[66,64],[12,1],[12,0],[12,1],[15,3],[15,0],[15,3],[81,21],[81,0],[81,21],[88,55],[88,0],[88,55],[77,9],[77,0],[77,9],[50,25],[50,0],[50,25],[77,60],[77,0],[77,60],[68,33],[68,0],[68,33],[71,2],[71,0],[71,2],[88,15],[88,0],[88,15],[88,69],[88,0],[88,69],[97,35],[97,0],[97,35],[99,83],[99,0],[99,83],[44,8],[44,0],[44,8],[38,28],[38,0],[38,28],[21,15],[21,0],[21,15],[1,1],[1,0],[1,1],[65,23],[65,0],[65,23],[65,14],[65,0],[65,14],[81,39],[81,0],[81,39],[82,65],[82,0],[82,65],[78,26],[78,0],[78,26],[20,12],[20,0],[20,12],[98,21],[98,0],[98,21],[70,68],[70,0],[70,68],[1,1],[1,0],[1,1],[63,2],[63,0],[63,2],[15,15],[15,0],[15,15],[47,20],[47,0],[47,20],[31,2],[31,0],[31,2],[31,29],[31,0],[31,29],[73,11],[73,0],[73,11]],"test_outputs":[10,1,1,9967310565986160,1,9967310565986160,4,1,4,565722720,1,565722720,3060,1,3060,494705855605882455,1,494705855605882455,66,1,66,26235,1,26235,4,1,4,3108105,1,3108105,677040,1,677040,27593523553342842144,1,27593523553342842144,93080887185,1,93080887185,50980740277700939310,1,50980740277700939310,8654327655120,1,8654327655120,1847253511032930,1,1847253511032930,36,1,36,1270891593430793753328,1,1270891593430793753328,11324588512110271581775824,1,11324588512110271581775824,1029530696964,1,1029530696964,77520,1,77520,15362117803534044899180148240,1,15362117803534044899180148240,91,1,91,85900584,1,85900584,8233430727600,1,8233430727600,14429347509452441488650,1,14429347509452441488650,1,1,1,21631432489303455,1,21631432489303455,560,1,560,55,1,55,9669554100,1,9669554100,35059031427432595752,1,35059031427432595752,783768050065,1,783768050065,1,1,1,142506,1,142506,2760681,1,2760681,435,1,435,1716,1,1716,1947792,1,1947792,177879702602584113899040,1,177879702602584113899040,293930,1,293930,239877544005,1,239877544005,1511553949020530244061128,1,1511553949020530244061128,4005,1,4005,2432332329570,1,2432332329570,14170178259145435020,1,14170178259145435020,47249626017378270486,1,47249626017378270486,54264,1,54264,11554258485616,1,11554258485616,2139280241670,1,2139280241670,1560780,1,1560780,111930,1,111930,4060,1,4060,10,1,10,42671977361650,1,42671977361650,126,1,126,507829667681396572974,1,507829667681396572974,1184040,1,1184040,13136858812224,1,13136858812224,458538089303496313800,1,458538089303496313800,92378,1,92378,43758,1,43758,26101718353106752508100,1,26101718353106752508100,56093138908331422716,1,56093138908331422716,782375089917631500576,1,782375089917631500576,68248282427325,1,68248282427325,426384982032100,1,426384982032100,118755,1,118755,2145,1,2145,12,1,12,455,1,455,13636219405675529520,1,13636219405675529520,1682429504296032856718256,1,1682429504296032856718256,161322559475,1,161322559475,126410606437752,1,126410606437752,49053802362729780,1,49053802362729780,27640097433090845976,1,27640097433090845976,2485,1,2485,31731084956648880,1,31731084956648880,8910491434304783400,1,8910491434304783400,295810347874151013485613408,1,295810347874151013485613408,1130522928399324306,1,1130522928399324306,177232627,1,177232627,472733756,1,472733756,54264,1,54264,1,1,1,227068876035237600,1,227068876035237600,60992558771040,1,60992558771040,202278371832757962680400,1,202278371832757962680400,162042085745554410,1,162042085745554410,348131422929868015284,1,348131422929868015284,125970,1,125970,1270891593430793753328,1,1270891593430793753328,2415,1,2415,1,1,1,1953,1,1953,1,1,1,9762479679106,1,9762479679106,465,1,465,465,1,465,3558497368608,1,3558497368608],"language":"python"}
{"task_id":7,"prompt":"\ndef catalan_number(n: int) -> int:\n    \"\"\"Compute the nth Catalan number.\n    >>> [catalan_number(i) for i in range(10)]\n    [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]\n    \"\"\"\n","entry_point":"catalan_number","canonical_solution":"\ndef catalan_number(n: int) -> int:\n    \"\"\"Compute the nth Catalan number.\n    >>> [catalan_number(i) for i in range(10)]\n    [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862]\n    \"\"\"\n# SOLUTION\n    numbers = [1]\n    for i in range(1, n+1):\n        numbers.append(sum(numbers[j] * numbers[i - 1 - j] for j in range(i)))\n    return numbers[n]\n\n","test":"tests","test_inputs":[[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],"test_outputs":[1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012,742900,2674440,9694845,35357670,129644790,477638700,1767263190,6564120420,24466267020,91482563640,343059613650,1289904147324,4861946401452,18367353072152,69533550916004,263747951750360,1002242216651368],"language":"python"}
{"task_id":8,"prompt":"\ndef circular_shift(data: list, shift: int) -> list:\n    \"\"\"Shift the elements of a list by a given amount.\n    If shift is positive, the elements are shifted to the right.\n    If shift is negative, the elements are shifted to the left.\n    >>> circular_shift([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    >>> circular_shift([1, 2, 3, 4, 5], -2)\n    [3, 4, 5, 1, 2]\n    >>> circular_shift([1, 2, 3, 4, 5], 0)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n","entry_point":"circular_shift","canonical_solution":"\ndef circular_shift(data: list, shift: int) -> list:\n    \"\"\"Shift the elements of a list by a given amount.\n    If shift is positive, the elements are shifted to the right.\n    If shift is negative, the elements are shifted to the left.\n    >>> circular_shift([1, 2, 3, 4, 5], 2)\n    [4, 5, 1, 2, 3]\n    >>> circular_shift([1, 2, 3, 4, 5], -2)\n    [3, 4, 5, 1, 2]\n    >>> circular_shift([1, 2, 3, 4, 5], 0)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n# SOLUTION\n    shift = shift % len(data)\n    return data[-shift:] + data[:-shift]\n","test":"tests","test_inputs":[[[1,2,3,4,5],2],[[1,2,3,4,5],-2],[[1,2,3,4,5],0],[[1],1],[[1],-1],[[1,2],1],[[1,2],-1]],"test_outputs":[[4,5,1,2,3],[3,4,5,1,2],[1,2,3,4,5],[1],[1],[2,1],[2,1]],"language":"python"}
{"task_id":4041,"prompt":"\nimport math\n\ndef closest_power_of_two(n: int) -> int:\n    \"\"\"Return the closest power of two to the given number n.\n    >>> closest_power_of_two(8)\n    8\n    >>> closest_power_of_two(9)\n    8\n    >>> closest_power_of_two(100)\n    128\n    \"\"\"\n","entry_point":"closest_power_of_two","canonical_solution":"\nimport math\n\ndef closest_power_of_two(n: int) -> int:\n    \"\"\"Return the closest power of two to the given number n.\n    >>> closest_power_of_two(8)\n    8\n    >>> closest_power_of_two(9)\n    8\n    >>> closest_power_of_two(100)\n    128\n    \"\"\"\n# SOLUTION\n    if n == 0 or n == 1:\n        return 1\n    return int(2 ** math.floor(math.log2(n) + 0.5))\n","test":"tests","test_inputs":[[8],[9],[100],[0],[1],[2],[3],[4],[1825],[410],[4507],[4013],[3658],[2287],[1680],[8936],[1425],[9675],[6913],[521],[489],[1536],[3583],[3812],[8280],[9864],[435],[9196],[3258],[8929],[6874],[3612],[7360],[9655],[4558],[107],[2616],[6925],[5575],[4553],[2548],[3528],[5515],[1675],[1520],[6225],[1585],[5882],[5636],[9892],[4334],[712],[7528],[8786],[2046],[6202],[1292],[9045],[4804],[5926],[9460],[3151],[1140],[751],[3734],[4742],[1308],[3815],[1655],[6228],[4555],[7429],[5978],[2665],[6066],[5821],[3433],[4375],[1170],[9981],[2804],[8752],[4011],[2678],[7574],[6217],[4423],[9126],[3599],[5314],[917],[3753],[526],[5169],[6573],[4387],[1085],[3457],[9293],[5156],[3484],[8180],[6483],[7518],[2341],[4340],[2288],[4041]],"test_outputs":[8,8,128,1,1,2,4,4,2048,512,4096,4096,4096,2048,2048,8192,1024,8192,8192,512,512,2048,4096,4096,8192,8192,512,8192,4096,8192,8192,4096,8192,8192,4096,128,2048,8192,4096,4096,2048,4096,4096,2048,2048,8192,2048,8192,4096,8192,4096,512,8192,8192,2048,8192,1024,8192,4096,8192,8192,4096,1024,1024,4096,4096,1024,4096,2048,8192,4096,8192,8192,2048,8192,8192,4096,4096,1024,8192,2048,8192,4096,2048,8192,8192,4096,8192,4096,4096,1024,4096,512,4096,8192,4096,1024,4096,8192,4096,4096,8192,8192,8192,2048,4096,2048,4096],"language":"python"}
{"task_id":10,"prompt":"\ndef contains_anagram(string: str, anagram: str) -> bool:\n    \"\"\"Determine if a string contains a substring that is an anagram of a given string.\n    >>> contains_anagram('hello', 'lo')\n    True\n    >>> contains_anagram('hello', 'world')\n    False\n    >>> contains_anagram('hello world', 'row')\n    True\n    \"\"\"\n","entry_point":"contains_anagram","canonical_solution":"\ndef contains_anagram(string: str, anagram: str) -> bool:\n    \"\"\"Determine if a string contains a substring that is an anagram of a given string.\n    >>> contains_anagram('hello', 'lo')\n    True\n    >>> contains_anagram('hello', 'world')\n    False\n    >>> contains_anagram('hello world', 'row')\n    True\n    \"\"\"\n# SOLUTION\n    if len(anagram) > len(string):\n        return False\n    anagram = sorted(anagram)\n    for i in range(len(string) - len(anagram) + 1):\n        if sorted(string[i:i + len(anagram)]) == anagram:\n            return True\n    return False\n\n","test":"tests","test_inputs":[["hello","lo"],["hello","world"],["hello world","row"],["hello world","lorw"],["mynBIQ","BIQ"],["myn","BIQ"],["mynQIB","BIQ"],["pmzJPL","JPL"],["pmz","JPL"],["pmzLPJ","JPL"],["sgqEJY","EJY"],["sgq","EJY"],["sgqYJE","EJY"],["dtzIRW","IRW"],["dtz","IRW"],["dtzWRI","IRW"],["zteJDX","JDX"],["zte","JDX"],["zteXDJ","JDX"],["cvkPRD","PRD"],["cvk","PRD"],["cvkDRP","PRD"],["lnkTUG","TUG"],["lnk","TUG"],["lnkGUT","TUG"],["rpoQIB","QIB"],["rpo","QIB"],["rpoBIQ","QIB"],["zraCXM","CXM"],["zra","CXM"],["zraMXC","CXM"],["wzvUAT","UAT"],["wzv","UAT"],["wzvTAU","UAT"],["pkhXKW","XKW"],["pkh","XKW"],["pkhWKX","XKW"],["cgsHZE","HZE"],["cgs","HZE"],["cgsEZH","HZE"],["zroCKQ","CKQ"],["zro","CKQ"],["zroQKC","CKQ"],["pdjRJW","RJW"],["pdj","RJW"],["pdjWJR","RJW"],["drkRGZ","RGZ"],["drk","RGZ"],["drkZGR","RGZ"],["trsJOC","JOC"],["trs","JOC"],["trsCOJ","JOC"],["tzmKSH","KSH"],["tzm","KSH"],["tzmHSK","KSH"],["jfgFBT","FBT"],["jfg","FBT"],["jfgTBF","FBT"],["vipCVY","CVY"],["vip","CVY"],["vipYVC","CVY"],["ebcWRV","WRV"],["ebc","WRV"],["ebcVRW","WRV"],["mwqIQZ","IQZ"],["mwq","IQZ"],["mwqZQI","IQZ"],["hgvSNI","SNI"],["hgv","SNI"],["hgvINS","SNI"],["opvUWZ","UWZ"],["opv","UWZ"],["opvZWU","UWZ"],["lckTDP","TDP"],["lck","TDP"],["lckPDT","TDP"],["sukGHA","GHA"],["suk","GHA"],["sukAHG","GHA"],["xidWHL","WHL"],["xid","WHL"],["xidLHW","WHL"],["zfkNBD","NBD"],["zfk","NBD"],["zfkDBN","NBD"],["zewHBS","HBS"],["zew","HBS"],["zewSBH","HBS"],["urtVCA","VCA"],["urt","VCA"],["urtACV","VCA"],["dugTSD","TSD"],["dug","TSD"],["dugDST","TSD"],["mclDBT","DBT"],["mcl","DBT"],["mclTBD","DBT"],["agfWDP","WDP"],["agf","WDP"],["agfPDW","WDP"],["gxzBVA","BVA"],["gxz","BVA"],["gxzAVB","BVA"],["rntDIC","DIC"],["rnt","DIC"],["rntCID","DIC"],["hcuJLN","JLN"],["hcu","JLN"],["hcuNLJ","JLN"],["fbqOBT","OBT"],["fbq","OBT"],["fbqTBO","OBT"],["dwmGIL","GIL"],["dwm","GIL"],["dwmLIG","GIL"],["xpsFWV","FWV"],["xps","FWV"],["xpsVWF","FWV"],["gybZVF","ZVF"],["gyb","ZVF"],["gybFVZ","ZVF"],["fkqIDT","IDT"],["fkq","IDT"],["fkqTDI","IDT"],["ovfAPV","APV"],["ovf","APV"],["ovfVPA","APV"],["nsqJUL","JUL"],["nsq","JUL"],["nsqLUJ","JUL"],["mviERW","ERW"],["mvi","ERW"],["mviWRE","ERW"],["aoxCKX","CKX"],["aox","CKX"],["aoxXKC","CKX"],["briEHY","EHY"],["bri","EHY"],["briYHE","EHY"],["pltJVL","JVL"],["plt","JVL"],["pltLVJ","JVL"],["sutEWJ","EWJ"],["sut","EWJ"],["sutJWE","EWJ"],["mxnUCA","UCA"],["mxn","UCA"],["mxnACU","UCA"],["tgwKFH","KFH"],["tgw","KFH"],["tgwHFK","KFH"],["huoMWV","MWV"],["huo","MWV"],["huoVWM","MWV"],["snbMWS","MWS"],["snb","MWS"],["snbSWM","MWS"],["nyvWBF","WBF"],["nyv","WBF"],["nyvFBW","WBF"],["ociWFO","WFO"],["oci","WFO"],["ociOFW","WFO"],["qprTYA","TYA"],["qpr","TYA"],["qprAYT","TYA"],["bpkJOB","JOB"],["bpk","JOB"],["bpkBOJ","JOB"],["zngRUC","RUC"],["zng","RUC"],["zngCUR","RUC"],["xeaMVN","MVN"],["xea","MVN"],["xeaNVM","MVN"],["kagAWY","AWY"],["kag","AWY"],["kagYWA","AWY"],["avqTDG","TDG"],["avq","TDG"],["avqGDT","TDG"],["dtuGJI","GJI"],["dtu","GJI"],["dtuIJG","GJI"],["wfdPMU","PMU"],["wfd","PMU"],["wfdUMP","PMU"],["caiOZD","OZD"],["cai","OZD"],["caiDZO","OZD"],["ieuQUL","QUL"],["ieu","QUL"],["ieuLUQ","QUL"],["deiABG","ABG"],["dei","ABG"],["deiGBA","ABG"],["virKLS","KLS"],["vir","KLS"],["virSLK","KLS"],["bxwTUP","TUP"],["bxw","TUP"],["bxwPUT","TUP"],["wuoUNL","UNL"],["wuo","UNL"],["wuoLNU","UNL"],["rfgMSJ","MSJ"],["rfg","MSJ"],["rfgJSM","MSJ"],["aeiKZL","KZL"],["aei","KZL"],["aeiLZK","KZL"],["wckYTB","YTB"],["wck","YTB"],["wckBTY","YTB"],["bifESJ","ESJ"],["bif","ESJ"],["bifJSE","ESJ"],["lmrEJD","EJD"],["lmr","EJD"],["lmrDJE","EJD"],["pxhBJF","BJF"],["pxh","BJF"],["pxhFJB","BJF"],["qxcJMK","JMK"],["qxc","JMK"],["qxcKMJ","JMK"],["jndDRP","DRP"],["jnd","DRP"],["jndPRD","DRP"],["pkzZKD","ZKD"],["pkz","ZKD"],["pkzDKZ","ZKD"],["pdwPNB","PNB"],["pdw","PNB"],["pdwBNP","PNB"],["jkxVEF","VEF"],["jkx","VEF"],["jkxFEV","VEF"],["usmZUC","ZUC"],["usm","ZUC"],["usmCUZ","ZUC"],["czgXHB","XHB"],["czg","XHB"],["czgBHX","XHB"],["madMRQ","MRQ"],["mad","MRQ"],["madQRM","MRQ"],["jopZSW","ZSW"],["jop","ZSW"],["jopWSZ","ZSW"],["vgnCLH","CLH"],["vgn","CLH"],["vgnHLC","CLH"],["isyFNG","FNG"],["isy","FNG"],["isyGNF","FNG"],["ldcWAQ","WAQ"],["ldc","WAQ"],["ldcQAW","WAQ"],["oyvGDP","GDP"],["oyv","GDP"],["oyvPDG","GDP"],["migUBZ","UBZ"],["mig","UBZ"],["migZBU","UBZ"],["gteDGO","DGO"],["gte","DGO"],["gteOGD","DGO"],["mlrEDT","EDT"],["mlr","EDT"],["mlrTDE","EDT"],["pesMUV","MUV"],["pes","MUV"],["pesVUM","MUV"],["nqpVKP","VKP"],["nqp","VKP"],["nqpPKV","VKP"],["puvGRT","GRT"],["puv","GRT"],["puvTRG","GRT"],["hakWXK","WXK"],["hak","WXK"],["hakKXW","WXK"],["kbqEIT","EIT"],["kbq","EIT"],["kbqTIE","EIT"],["zemSJW","SJW"],["zem","SJW"],["zemWJS","SJW"],["wzpCZQ","CZQ"],["wzp","CZQ"],["wzpQZC","CZQ"],["bchEBJ","EBJ"],["bch","EBJ"],["bchJBE","EBJ"],["ayoKFZ","KFZ"],["ayo","KFZ"],["ayoZFK","KFZ"],["euoLQM","LQM"],["euo","LQM"],["euoMQL","LQM"],["qbsCVZ","CVZ"],["qbs","CVZ"],["qbsZVC","CVZ"]],"test_outputs":[true,false,true,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true,true,false,true],"language":"python"}
{"task_id":1,"prompt":"\ndef convolve(a: list[int], b: list[int]) -> list[int]:\n    \"\"\"Convolve two lists of integers.\n    The convolution of two lists a and b is the list c such that\n    c[i] = sum_j a[j] * b[i - j]\n    >>> convolve([1, 2, 3], [2])\n    [2, 4, 6]\n    >>> convolve([1, 2, 3], [3, 4])\n    [3, 10, 17, 12]\n    >>> convolve([1, 2, 3], [4, 5, 6])\n    [4, 13, 28, 27, 18]\n    \"\"\"\n","entry_point":"convolve","canonical_solution":"\ndef convolve(a: list[int], b: list[int]) -> list[int]:\n    \"\"\"Convolve two lists of integers.\n    The convolution of two lists a and b is the list c such that\n    c[i] = sum_j a[j] * b[i - j]\n    >>> convolve([1, 2, 3], [2])\n    [2, 4, 6]\n    >>> convolve([1, 2, 3], [3, 4])\n    [3, 10, 17, 12]\n    >>> convolve([1, 2, 3], [4, 5, 6])\n    [4, 13, 28, 27, 18]\n    \"\"\"\n# SOLUTION\n    return [sum(a[i] * b[j - i] for i in range(j + 1) if i < len(a) and j - i < len(b)) for j in range(len(a) + len(b) - 1)]\n\n","test":"tests","test_inputs":[[[1,2,3],[2]],[[1,2,3],[3,4]],[[1,2,3],[4,5,6]],[[4,3],[3]],[[10,8,1],[9,6]],[[1],[3]],[[9,0,8,3],[10,8,6,3,7,9,4,0,2]],[[4,2,3,5,1,1,6],[1,5,5,9,4,0]],[[1,6,1,8,4,10,9,5],[9,3,1,0,10,3,4,1,3]],[[4,7],[10,5,2,5,5,3,10]],[[9,10,2,8,3],[2,7]],[[10,8,3,10,5,0,3],[0,5,6,4,1]],[[5,3,10,7],[6,10,7,2,4,2,3,8,8,4]],[[9,6,5,3,2,8,7,1,0,1],[2,10,2,10,6,9,1]],[[9,7,8,4,8,0,10],[1,10,8,4,10,5,1]],[[2,7,0,4,8],[2,8,1,10,4,10,8]],[[2,5,2,8,8,0,9,5,7,0],[1,5,4,3]],[[9],[1,1,7,1]],[[2,10,7,8,2,4,8,9,6],[3,8,3]],[[10,10,5,7,8],[7,1,3,3,1,5,0]],[[3,9,3,0,1,10,0,3,1,0],[5,1,8,3,4,10,7,3,8]],[[9,7,3],[7,6,3,1,1,10,6,5,6,6]],[[10,10,10,1,0,6,5,1],[3]],[[8,7,2,6],[2,4,7,3]],[[8,1],[0,10,8,0,1,3,2,6]],[[3,6,0,2,6,0,6,4],[7,4,6,8,10,7,2,3]],[[0,9,8,0,5],[0,0,9,7]],[[2,0,8,1,2,1,9,1,10],[3,6,1,9,3,9,9,0,9]],[[10,9],[9,8,5,4,3,10,5]],[[6,2,10,10],[4,7,5,1,0]],[[9,1,1,8,3,8,4,2],[5,1,3,5,4,2,7,8,4,9]],[[10,8,4,10,1,2,4,1,1],[8]],[[4,9,3],[5,3,10,10,4]],[[4,0,1,10,6,4,0,0,5],[2,10,4,2,7,8,6,8]],[[1],[2,8]],[[9],[8,2,6,2,0,4]],[[5,3,10,3,10,1],[5]],[[9,2,3,2,2,6,0,2,5],[6,10,3,4,2,1,6]],[[3],[3,7,5,4,3,3,0,10]],[[5,4,1,4],[5,10,8,6,10,8,5]],[[4],[2,9]],[[1,9,6,5,5],[6]],[[1,6,9,3,4,0,6,0,8,8],[10,10,3,5,6,1,10,5,9]],[[4,8,4,10,6,5],[6,4]],[[3,6,10,6,10,2,9,9,4],[6,8,0]],[[3,6,9,9,10],[5,7,7,7,10]],[[7,2,10,1],[4,8,10,10,9,5,1,3,10]],[[3,2,0,0,3],[7,9,1,7]],[[3,6,7,6,3,2,10],[0,1,6,3,2,8,7,0,8,3]],[[2,7],[10,8,8,9,5,7,9,8]],[[7,2,7,7,4,3,10],[4,8,7,10,3,4,7,1,4]],[[5,5,8,1],[2,2,3,6,2]],[[6,6,5,8],[7,6]],[[6],[6,9,0,9]],[[0,5,4,6,6,8,8],[9,3,7,3,4,6,7,0]],[[10,10,6,2,7,2,9],[8,0,6,9,9,10]],[[10],[6,2]],[[0,4,6,5,3,7,5,5],[6,4,6]],[[7,0,8,0,5],[3,10]],[[0,3],[3]],[[2],[3,2,7,10,1,9,3,7,4,5]],[[9,1,2],[4,1,9,0,4,9,10,6,6,3]],[[10,3],[1,4,10,9,1,9,0,5,8,6]],[[8,10,5,0,6,7],[1,6]],[[2,6,2,8,10,4],[9,8,7,7,6,9,4,5]],[[4,7,3,7],[9,9]],[[0,7,5,2,7,3,5],[4,5,4,9,4,8]],[[3],[1,3,6,7,8,3,7,10,7]],[[1,4,3,6,3,4,10,9],[5]],[[8,5,6,8,5,5,7,4],[4,4,3,1,3,5,1,8,2]],[[7,4,9,8],[9,4,1,3]],[[5,2,4,0,8],[2,4,0,0]],[[2,10,7,1,0,9,4,7,7],[7,5,2,0,4]],[[1,6,7,1,9,10,10,0],[2,2]],[[1,3,1,8,6,9,9,9,3,8],[6,7,7,4,9]],[[9,9,0,9,1,3,10],[3,4,10,1,2]],[[8,1,2,0],[6,7,9]],[[0,3,4,4,7,1,10,3],[4,10,9,10,3]],[[8,3,10,2,4,2,1],[0,2]],[[9,4,7,1,7],[4,6,4,8,8,7,7,1,9,0]],[[9,4,0,1,3,10,9],[9,0,10,4,9,0]],[[8,10,7],[4,2,9,6,10,7,1,7]],[[5,5,10,1,2,5],[6,7,4,10,6,8,0]],[[5,4,5,1,6,8,0,10],[8,7]],[[3,8,5,9,7,10,7],[0]],[[8,2,4,7],[7,1,0,10,9]],[[4,8,0,8],[6,1,3]],[[1,10],[2,7,4,8,4,6,7,7]],[[8,2,6,3],[9,8,2,1,4,6,5,8]],[[4,4,9,9,10],[7]],[[8,7,5],[5,8,8,6,7,5,3,3]],[[3,6,0,5,7,6,6,10,10,2],[7,0,2,8,9,5,1]],[[8,7,0,2,6,10,2,1],[7,4]],[[6,10,1,5,10,8],[6,5,10,7,8,0,9,1,3,10]],[[1,6,1,10,1],[7,2,4,0]],[[0],[4,5,5,6,2,3]],[[9,10,2,2,2,1,9,6,9],[10,3,7,9,2,3,7]],[[4,10,0,7,4],[10,8,2,1,7,5,9,4]],[[7,4,3,6,7,1,3],[6,9,5,9,4]],[[10,6,4,0,9],[10]],[[7],[4,3,9,5,3,10,3,9,4,10]],[[10,10,0],[4,7]],[[5],[2,1,4,5,6,2,3,2,8,5]]],"test_outputs":[[2,4,6],[3,10,17,12],[4,13,28,27,18],[12,9],[90,132,57,6],[3],[90,72,134,121,135,123,101,93,77,12,16,6],[4,22,33,66,75,66,73,64,43,58,24,0],[9,57,28,81,71,173,147,190,101,168,147,145,73,59,32,15],[40,90,43,34,55,47,61,70],[18,83,74,30,62,21],[0,50,100,103,110,105,73,45,23,12,3],[30,68,125,173,166,91,75,97,108,145,148,96,28],[18,102,88,158,158,209,221,177,148,143,136,79,26,7,9,1],[9,97,150,176,230,259,214,219,188,84,108,50,10],[4,30,58,35,126,116,134,152,72,112,64],[2,15,35,44,71,78,65,74,68,82,43,21,0],[9,9,63,9],[6,46,107,110,91,52,62,103,114,75,18],[70,80,75,114,118,104,100,56,43,40,0],[15,48,48,84,68,126,141,200,114,156,148,88,72,111,16,27,8,0],[63,103,90,48,25,100,127,117,107,111,60,18],[30,30,30,3,0,18,15,3],[16,46,88,93,59,48,18],[0,80,74,8,8,25,19,50,6],[21,54,42,74,128,117,142,141,144,118,110,100,40,26,12],[0,0,0,81,135,56,45,35],[6,12,26,69,26,106,86,151,159,172,145,192,138,108,171,9,90],[90,161,122,85,66,127,140,45],[24,50,84,126,122,60,10,0],[45,14,33,89,67,94,146,166,133,213,140,137,180,105,104,44,18],[80,64,32,80,8,16,32,8,8],[20,57,82,139,136,66,12],[8,40,18,38,144,142,115,138,146,194,168,82,67,40,30,40],[2,8],[72,18,54,18,0,36],[25,15,50,15,50,5],[54,102,65,84,67,87,136,57,98,82,41,60,12,17,30],[9,21,15,12,9,9,0,30],[25,70,85,92,122,118,91,68,37,20],[8,36],[6,54,36,30,30],[10,70,153,143,133,131,157,172,254,323,276,117,184,86,142,120,112,72],[24,64,56,76,76,54,20],[18,60,108,116,108,92,70,126,96,32,0],[15,51,108,171,248,256,223,160,100],[28,64,126,174,191,163,117,82,91,51,103,10],[21,41,21,23,35,27,3,21],[0,3,24,52,72,96,121,141,193,157,131,163,112,25,86,30],[20,86,72,74,73,49,67,79,56],[28,64,93,168,162,197,240,211,219,189,105,93,89,22,40],[10,20,41,63,66,61,22,2],[42,78,71,86,48],[36,54,0,54],[0,45,51,101,115,164,202,181,168,134,122,104,56,0],[80,80,108,166,272,272,286,153,155,169,101,90],[60,20],[0,24,52,78,74,84,76,92,50,30],[21,70,24,80,15,50],[0,9],[6,4,14,20,2,18,6,14,8,10],[36,13,90,11,54,85,107,82,80,45,15,6],[10,43,112,120,37,93,27,50,95,84,18],[8,58,65,30,6,43,42],[18,70,80,144,222,240,232,198,198,156,116,66,20],[36,99,90,90,63],[0,28,55,61,121,128,157,148,91,113,44,40],[3,9,18,21,24,9,21,30,21],[5,20,15,30,15,20,50,45],[32,52,68,79,99,125,122,187,159,125,131,108,77,70,46,8],[63,64,104,133,53,35,24],[10,24,16,16,16,32,0,0],[14,80,103,62,27,105,101,91,92,85,30,28,28],[2,14,26,16,20,38,40,20,0],[6,25,34,80,120,183,200,276,234,249,194,149,59,72],[27,63,126,126,66,121,61,89,105,16,20],[48,62,91,23,18,0],[0,12,46,83,134,159,165,203,151,130,60,9],[0,16,6,20,4,8,4,2],[36,70,88,134,166,197,183,150,197,99,113,16,63,0],[81,36,90,85,124,136,115,121,157,126,81,0],[32,56,120,152,203,198,148,115,77,49],[30,65,115,146,139,218,153,126,70,46,40,0],[40,67,68,43,55,106,56,80,70],[0,0,0,0,0,0,0],[56,22,30,133,99,58,106,63],[24,52,20,72,8,24],[2,27,74,48,84,46,67,77,70],[72,82,86,87,70,68,79,122,64,63,24],[28,28,63,63,70],[40,99,145,144,138,119,94,70,36,15],[21,42,6,71,124,121,129,189,218,176,191,210,162,78,20,2],[56,81,28,14,50,94,54,15,4],[36,90,116,177,213,235,237,286,173,200,198,107,88,124,80],[7,44,23,96,31,42,4,0],[0,0,0,0,0,0],[90,127,113,177,148,95,222,192,204,172,152,127,99,69,63],[40,132,88,94,134,136,101,159,103,83,64,16],[42,87,89,146,175,142,128,119,52,31,12],[100,60,40,0,90],[28,21,63,35,21,70,21,63,28,70],[40,110,70,0],[10,5,20,25,30,10,15,10,40,25]],"language":"python"}
{"task_id":12,"prompt":"\ndef reduce_xor(values: list[int]) -> int:\n    \"\"\"Return the cumulative XOR of the given list of integers.\n    >>> reduce_xor([1, 2, 3, 4, 5])\n    1\n    >>> reduce_xor([1, 2, 3, 4, 5, 6])\n    7\n    >>> reduce_xor([])\n    0\n    \"\"\"\n","entry_point":"reduce_xor","canonical_solution":"\ndef reduce_xor(values: list[int]) -> int:\n    \"\"\"Return the cumulative XOR of the given list of integers.\n    >>> reduce_xor([1, 2, 3, 4, 5])\n    1\n    >>> reduce_xor([1, 2, 3, 4, 5, 6])\n    7\n    >>> reduce_xor([])\n    0\n    \"\"\"\n# SOLUTION\n    result = 0\n    for value in values:\n        result ^= value\n    return result\n","test":"tests","test_inputs":[[1,2,3,4,5],[1,2,3,4,5,6],[],[81,14,3,94,35,31,28,17,94,13,86,94,69,11,75,54,4,3,11,27,29,64,77,3,71,25,91,83,89,69,53,28,57,75,35,0,97,20,89,54,43,35,19,27,97,43,13,11,48,12,45,44,77,33,5,93,58,68,15,48,10,70,37,80,79,46,73,24,90,8,5,84,29,98,37,10,29,12,48,35,58,81,46,20,47,45,26,85,34,89,87,82,9,77,81,21,68,93,31,20],[59,48,34,81,88,71,28,87,41,98,99,7,29,4,40,51,34,8,27,72,91,40,27,83,63,50,82,58,18,33,17,31,95,71,68,33,95,74,54,74,51,46,28,17,65,63,11,96,6,14,19,80,20,87,54,76,8,49,48,76,59,67,32,70,1,87,92,14,87,68,96,34,98,82,43,14,37,55,20,58,0,92,92,33,64,97,22,64,13,80,38,81,64,77,25,19,47,97,20,69],[99,67,0,76,41,62,2,14,46,39,30,7,30,72,10,10,93,62,8,97,68,98,16,16,84,60,70,21,33,67,77,54,27,69,96,93,88,25,91,39,51,85,83,47,56,66,57,15,31,28,8,43,2,75,70,29,75,28,0,9,90,80,7,29,8,4,42,9,65,30,35,85,62,27,69,16,92,73,73,60,31,100,60,52,24,12,12,84,55,45,54,52,59,93,6,86,83,82,12,7],[51,93,43,13,31,24,24,68,57,17,54,23,35,59,31,9,56,70,12,6,83,69,1,11,96,30,21,52,62,61,27,51,7,21,48,0,49,33,100,100,58,36,54,89,93,100,71,84,91,62,19,24,37,27,7,74,94,69,7,95,40,7,6,74,61,64,67,20,7,65,10,23,8,76,8,86,30,51,15,72,31,74,76,5,79,10,53,84,74,72,66,40,33,26,85,91,40,30,33,50],[16,85,82,38,58,40,96,9,1,58,79,72,12,9,68,27,64,33,16,44,8,31,47,36,20,56,69,90,38,78,83,67,1,85,70,38,84,13,17,33,14,13,95,70,19,34,36,77,26,91,43,26,87,81,33,64,62,32,6,11,81,54,35,5,0,42,98,16,81,33,20,94,56,70,90,54,71,1,14,9,88,19,69,4,47,74,70,18,55,16,5,39,46,5,45,26,87,31,85,13],[45,99,71,52,79,95,19,30,20,22,52,3,22,94,42,100,52,85,94,31,34,20,100,89,13,48,4,60,28,25,58,44,39,29,28,3,84,24,51,42,35,8,98,35,44,82,65,51,86,68,42,3,14,33,22,74,33,4,13,76,55,44,93,100,40,55,77,65,14,49,73,24,32,5,90,55,0,66,68,87,92,94,94,85,25,46,55,8,85,42,79,40,84,15,92,38,64,39,85,52],[41,51,89,37,70,16,24,53,85,48,86,95,22,78,72,38,51,70,0,38,36,26,55,100,74,77,83,41,59,56,56,86,27,65,60,94,21,84,10,36,65,84,81,79,42,11,96,30,86,39,28,25,18,3,5,31,60,78,98,9,58,53,80,73,24,91,89,49,63,51,31,18,83,88,0,96,98,13,99,54,28,22,89,66,59,6,71,31,15,58,17,59,85,67,71,76,40,96,56,78],[92,64,54,70,57,20,95,60,57,33,96,31,81,35,98,99,66,62,80,30,35,56,9,91,36,30,34,42,40,69,10,17,19,29,49,88,19,90,27,8,53,52,42,69,59,53,7,26,53,49,98,74,89,2,97,73,48,61,0,45,38,96,49,53,68,95,94,69,77,28,62,28,34,55,62,3,49,43,85,86,51,92,21,59,16,79,68,3,50,75,72,84,3,10,82,54,17,59,23,6],[33,48,41,27,58,41,43,97,48,35,96,53,32,10,60,2,95,69,6,44,28,83,8,99,83,5,96,3,31,25,2,79,19,30,16,60,85,14,72,27,59,89,32,98,47,21,77,77,95,91,14,99,20,39,13,74,3,39,73,86,48,50,91,25,9,75,88,80,31,13,89,98,38,87,76,15,72,100,5,44,68,54,84,47,8,64,82,43,1,53,62,13,55,46,81,58,90,19,55,22],[93,66,83,34,78,68,99,61,59,55,93,75,34,41,31,11,35,57,31,96,59,72,78,85,48,43,3,63,41,23,62,27,45,33,43,35,76,89,35,71,1,66,24,10,30,92,52,62,71,97,30,88,60,82,91,62,57,2,11,37,28,51,88,31,39,84,74,47,60,70,67,44,54,95,70,42,45,89,58,34,39,32,29,15,92,24,40,15,95,68,97,88,23,24,27,94,61,35,92,75],[97,67,76,36,12,24,37,29,46,22,38,1,90,68,16,35,5,6,70,37,89,16,81,96,62,13,1,73,36,60,61,56,43,23,6,32,61,14,8,51,62,9,73,80,87,6,19,19,72,38,10,31,15,71,97,53,77,76,79,28,99,66,48,57,56,38,75,54,39,72,79,7,78,94,12,97,26,80,27,33,84,10,20,30,22,70,9,20,0,52,57,88,76,60,37,4,29,36,90,36],[89,58,9,87,29,33,100,80,75,84,25,54,14,69,28,82,19,34,18,9,7,21,39,76,95,72,36,56,15,59,88,38,89,51,34,64,69,63,56,10,76,5,55,94,41,77,32,3,11,29,86,73,75,2,97,86,34,73,5,97,96,22,60,66,83,56,35,23,74,55,81,62,11,60,44,52,42,41,85,13,20,42,52,88,63,36,84,51,97,70,4,58,11,40,32,41,14,98,51,65],[0,84,69,59,52,6,24,66,46,79,96,63,80,56,97,6,26,34,70,16,36,56,89,62,15,3,80,77,30,90,20,39,70,1,70,52,11,28,14,59,15,82,19,63,91,37,65,90,34,53,61,60,31,58,70,18,49,24,76,65,95,17,8,35,98,53,43,100,64,34,0,36,92,38,75,74,84,62,19,57,68,61,44,42,70,97,69,48,58,41,24,89,30,73,49,29,99,52,5,40],[95,60,90,48,49,84,83,19,63,4,16,64,75,42,12,56,12,67,58,1,92,18,52,83,19,9,60,100,33,43,79,88,50,83,10,42,86,68,48,40,80,91,97,62,69,4,79,8,30,80,87,36,29,95,11,55,12,97,81,90,12,56,21,88,38,3,5,41,7,37,45,47,55,18,31,67,52,72,87,23,21,22,10,78,48,79,87,30,63,74,18,29,59,81,32,58,32,85,1,59],[36,86,69,20,9,56,44,75,38,81,54,88,32,58,38,25,49,61,13,30,48,73,45,73,37,89,37,2,84,50,35,1,72,87,99,95,6,77,95,63,36,99,29,77,45,28,81,24,79,32,86,96,92,98,84,87,17,80,12,80,82,5,39,100,56,4,74,46,93,16,11,37,41,95,53,22,25,16,100,69,46,67,64,34,21,32,61,37,95,43,14,59,9,18,96,28,86,92,86,50],[71,46,11,50,1,33,68,15,58,47,86,95,86,33,74,48,81,47,13,86,29,60,3,79,71,41,78,28,82,8,81,59,89,38,83,52,14,17,5,4,38,63,14,12,30,68,17,49,58,47,85,95,89,69,53,75,95,93,19,53,83,12,62,78,52,35,4,88,47,27,56,56,30,46,12,87,47,69,82,45,7,50,35,24,15,58,11,84,27,82,81,76,2,6,100,42,31,16,100,72],[26,8,97,70,26,75,27,29,42,99,18,100,76,0,35,18,16,69,32,22,14,84,3,16,1,45,100,30,75,41,2,22,33,6,16,94,53,67,14,95,8,60,57,99,46,65,75,13,57,64,28,78,5,93,100,84,66,38,58,82,3,7,61,51,54,87,13,62,91,56,9,10,41,77,18,8,16,35,79,81,74,70,91,41,48,76,67,37,58,64,77,55,12,89,14,83,83,98,70,92],[27,55,57,29,52,43,58,51,53,93,12,40,54,40,85,32,47,19,87,60,8,11,10,11,55,12,95,94,47,16,71,7,75,71,71,42,85,15,52,45,85,96,54,92,6,36,76,39,45,13,73,64,27,19,84,61,28,13,44,71,47,14,97,35,73,28,54,71,98,79,78,86,82,71,3,77,84,88,34,3,23,34,89,97,39,43,44,0,23,18,72,84,51,8,18,94,81,3,11,95],[67,27,48,53,58,43,20,47,39,92,41,99,72,76,10,6,19,20,96,79,6,86,10,34,56,84,54,62,77,56,53,34,27,96,65,14,44,55,14,36,86,86,75,62,67,85,39,5,28,50,76,7,0,26,38,27,98,17,97,32,37,41,15,0,63,95,55,22,16,48,68,90,29,64,71,85,45,9,50,94,5,55,2,58,9,40,73,54,73,51,90,81,53,37,14,51,2,41,21,79],[58,88,46,11,55,13,31,55,75,51,67,10,50,39,95,43,28,42,99,21,9,65,81,14,67,65,24,99,44,44,93,82,18,30,13,18,32,25,22,77,19,97,97,83,9,22,98,80,63,59,96,72,97,74,57,87,72,82,81,79,41,80,40,19,56,8,60,56,80,38,35,75,7,45,64,9,39,59,57,4,7,47,36,9,82,11,78,76,64,49,59,74,70,94,5,57,73,83,24,41],[77,60,64,19,7,57,13,43,91,10,64,82,22,5,31,90,56,56,67,66,78,20,46,47,36,49,52,99,43,86,76,6,80,82,42,8,42,12,71,86,49,36,32,92,84,77,19,42,10,74,84,18,44,39,83,89,84,50,16,76,90,10,39,71,48,82,42,16,85,89,94,87,67,11,82,85,54,65,46,2,46,39,23,27,43,98,62,24,28,17,19,9,37,100,12,64,98,69,94,67],[4,84,43,98,79,16,76,48,19,20,23,88,98,79,21,92,56,5,52,46,86,92,30,56,78,36,96,95,100,57,29,68,30,39,100,60,24,47,86,73,56,59,98,36,99,48,64,67,53,20,25,77,17,32,6,82,61,47,70,13,91,66,15,36,10,97,20,34,57,65,18,55,11,28,57,44,3,53,6,50,64,47,30,49,10,47,28,3,40,12,91,83,42,18,17,4,36,60,89,17],[97,90,60,57,78,0,10,2,32,27,19,70,93,77,67,54,14,99,36,30,38,15,6,30,53,81,79,58,8,14,63,76,68,2,80,65,73,30,91,18,37,54,0,78,45,30,73,53,23,85,85,10,67,46,8,67,69,64,100,64,70,2,49,60,5,81,49,47,32,95,2,45,100,8,44,30,93,84,80,13,98,74,94,96,42,17,5,45,69,43,82,22,99,87,59,89,61,80,23,17],[8,91,99,58,4,37,25,5,25,5,40,39,65,50,69,60,32,4,96,82,24,36,45,99,6,83,42,34,15,47,55,51,95,56,49,43,23,63,88,63,47,66,34,10,93,54,10,55,77,23,69,37,41,13,10,41,84,37,39,57,77,91,54,21,88,56,44,57,5,93,45,78,55,35,81,7,9,85,81,51,46,65,95,86,20,3,18,77,86,100,56,4,16,8,30,99,82,46,46,49],[72,4,77,19,86,57,47,47,56,97,9,73,17,67,46,50,40,83,35,31,14,3,94,23,63,66,49,71,15,33,99,33,90,57,27,78,36,88,62,25,15,17,9,57,22,91,56,11,87,40,85,44,90,8,70,69,37,38,20,91,90,89,81,22,46,65,28,15,25,17,30,63,3,46,70,73,47,59,70,16,78,11,8,39,50,91,92,61,67,52,98,52,73,9,16,40,82,9,57,59],[87,66,44,16,99,70,81,75,23,98,16,55,64,7,15,66,19,38,21,20,41,90,28,44,66,36,10,32,25,81,70,35,16,80,38,78,68,11,64,82,21,75,74,19,21,84,79,92,77,43,72,5,3,10,5,82,98,73,33,83,26,98,73,53,79,81,3,63,80,69,37,82,38,61,31,87,51,38,58,9,88,7,20,56,53,61,59,26,43,77,18,40,91,40,93,44,51,16,97,47],[65,71,13,40,30,59,15,34,57,31,18,12,6,37,49,78,53,31,20,41,73,92,40,24,97,20,63,65,59,63,39,63,2,11,50,64,58,30,27,74,45,6,6,36,63,76,83,86,60,36,68,1,13,55,17,33,93,46,97,51,46,5,51,6,72,71,24,46,70,36,9,49,64,57,97,70,35,79,87,78,15,16,12,50,47,43,71,46,96,18,25,77,65,51,64,5,5,4,17,91],[42,60,66,58,19,77,65,17,41,78,40,20,50,78,94,38,75,43,64,65,68,62,90,72,38,60,2,47,42,86,14,53,74,39,92,88,80,3,76,60,33,83,100,99,74,73,29,92,6,74,61,21,67,80,92,79,99,48,18,87,31,4,73,89,14,24,2,56,40,53,19,52,88,26,52,64,99,78,60,94,93,7,90,17,66,26,71,41,84,61,67,48,40,22,58,68,43,69,45,86],[98,92,87,82,88,33,78,61,24,31,35,71,38,28,38,98,36,90,26,88,90,62,40,61,44,71,92,35,36,15,73,86,69,48,50,44,98,18,37,5,36,91,10,44,56,83,32,95,61,27,25,68,34,71,89,34,17,13,78,94,75,30,31,6,85,67,28,81,29,6,12,52,42,91,60,12,87,98,17,0,70,20,52,83,60,61,83,25,96,36,41,36,82,7,98,11,83,73,29,68],[94,92,4,22,53,22,4,50,100,63,23,95,37,4,1,38,72,77,13,42,36,58,82,69,67,63,17,64,59,34,24,14,42,20,93,58,82,32,91,23,1,94,43,37,72,86,96,24,22,78,81,51,54,65,41,11,51,85,12,23,17,61,41,31,0,33,49,30,57,96,34,42,38,74,92,73,1,33,83,46,88,30,7,85,15,59,39,20,51,87,64,90,98,39,88,15,81,37,47,78],[28,28,17,61,19,58,95,77,47,53,89,70,60,96,68,85,27,97,31,87,96,76,100,10,67,57,67,90,46,9,72,14,7,70,64,25,73,68,19,21,41,66,56,14,87,26,91,74,62,11,65,57,7,58,16,65,53,58,72,7,71,59,86,39,92,2,50,32,0,95,27,74,9,5,54,44,89,8,69,7,8,60,4,36,52,23,98,17,98,82,93,82,53,47,48,57,48,48,10,87],[84,69,17,83,44,15,22,68,50,67,16,93,28,0,96,2,38,59,86,92,69,54,68,48,29,31,58,44,19,35,24,92,97,14,4,84,53,78,98,2,30,26,8,12,76,4,57,76,86,90,6,31,94,5,51,56,29,69,27,96,99,7,17,64,37,29,93,73,40,73,76,98,86,41,30,38,18,84,66,28,52,38,35,7,71,75,94,22,80,86,54,71,63,6,44,82,85,48,100,67],[40,89,53,52,19,38,48,23,96,68,60,30,28,38,90,18,59,7,71,52,53,71,67,17,49,31,32,26,42,82,10,57,47,11,68,92,24,6,34,48,86,77,77,5,9,24,97,75,92,85,71,27,61,26,42,38,1,27,24,94,15,95,96,61,31,89,77,90,26,50,30,70,41,99,36,48,59,68,83,45,39,33,46,65,63,59,12,92,60,97,40,26,47,40,52,5,72,28,94,18],[2,33,70,74,74,92,53,37,19,25,42,29,48,72,31,63,70,83,87,43,32,97,62,92,82,94,62,58,21,93,45,21,17,92,69,62,23,69,82,7,67,4,9,85,6,97,0,52,17,80,29,8,90,19,1,27,64,58,47,7,79,81,85,78,61,84,62,2,0,68,70,52,1,2,67,92,35,68,36,2,64,89,86,55,22,13,12,67,19,30,24,79,67,32,45,34,50,10,47,51],[58,72,31,89,28,38,87,10,83,83,97,4,11,51,48,48,70,60,7,81,1,89,21,10,63,55,82,100,42,72,12,67,5,29,27,88,72,60,34,5,9,87,35,69,72,84,4,22,40,2,26,75,18,96,91,50,9,38,20,72,30,72,49,86,69,42,49,96,94,17,88,92,10,64,95,44,6,12,55,29,9,43,77,98,78,76,50,99,41,3,81,34,100,57,62,29,45,70,48,55],[23,87,74,84,48,10,98,79,37,31,91,9,10,34,19,48,91,100,81,19,94,49,40,46,13,11,0,39,56,46,97,34,13,16,11,23,55,57,71,71,65,52,13,3,11,45,70,11,76,76,100,41,49,1,37,52,49,99,10,92,71,31,73,66,21,87,48,21,17,34,38,34,63,18,8,21,55,35,53,38,61,100,9,46,32,31,92,80,63,76,78,25,58,13,17,38,0,50,42,79],[48,42,56,42,55,83,76,17,38,41,77,88,25,61,40,22,50,40,37,94,88,81,62,73,100,31,41,48,35,100,50,46,14,72,25,75,69,23,87,98,70,3,93,59,90,26,56,37,88,8,52,86,63,17,81,38,30,32,84,19,91,54,48,9,57,76,61,74,51,68,64,88,53,69,4,46,89,68,76,81,10,13,98,31,84,85,45,21,82,78,5,72,82,86,82,51,96,42,55,13],[1,12,33,28,65,95,66,71,74,88,73,28,57,47,50,59,98,86,75,88,64,19,44,3,61,13,37,53,10,14,93,18,44,39,43,58,100,26,66,61,44,60,12,56,92,89,57,40,8,38,5,90,14,2,43,82,13,86,21,94,31,66,22,70,20,42,71,54,59,29,51,80,23,23,81,84,55,50,3,94,78,25,57,75,54,49,0,90,27,26,35,96,90,8,73,13,68,23,46,41],[25,58,14,33,85,62,67,81,40,76,49,78,50,75,14,44,45,58,79,22,86,90,38,78,75,10,86,17,40,15,30,39,14,23,47,88,18,65,49,53,76,17,73,49,54,23,62,81,68,88,82,22,71,21,62,36,17,23,40,57,79,6,45,1,62,17,24,49,71,64,83,63,52,87,62,53,90,56,62,21,10,72,3,97,28,37,4,35,28,68,36,21,99,58,72,95,98,98,63,70],[65,14,73,14,34,99,69,46,69,96,5,97,92,56,69,27,54,13,94,83,96,31,38,4,57,33,44,11,56,15,99,30,26,94,75,88,44,90,78,80,54,21,78,17,100,26,26,7,72,44,68,35,76,68,21,41,90,37,37,73,34,65,86,12,17,96,100,52,7,35,83,16,89,16,31,18,91,41,31,97,86,50,62,18,73,80,34,80,53,48,57,9,81,98,11,51,65,95,35,88],[47,58,62,41,74,0,99,93,11,93,58,81,85,89,45,8,68,50,27,54,27,63,34,41,36,43,70,73,16,72,62,100,43,87,97,6,5,12,80,100,58,2,15,20,56,58,0,54,25,88,16,83,38,20,35,11,83,46,32,10,47,85,83,21,6,50,80,39,92,89,96,29,54,83,11,90,12,0,27,61,9,16,75,28,66,87,56,1,1,89,43,15,54,88,16,61,9,29,49,11],[93,13,13,40,47,38,17,48,99,96,17,82,86,18,8,67,72,1,78,83,21,56,44,92,27,80,95,19,52,78,87,56,27,11,12,17,96,15,75,93,49,44,54,40,17,31,35,82,10,31,70,76,76,92,77,36,99,88,3,84,38,26,66,77,65,24,95,50,37,82,6,100,30,63,49,14,30,63,81,76,9,67,1,46,40,16,49,72,53,46,69,87,22,97,60,98,9,2,75,8],[1,33,27,5,7,50,64,36,80,91,64,98,53,54,89,51,10,81,68,68,78,19,35,10,39,10,65,26,19,68,41,50,75,81,97,83,87,82,8,39,89,55,93,30,7,31,11,55,14,58,78,77,7,39,85,94,84,94,22,15,1,90,17,89,1,20,63,44,66,66,100,92,33,21,47,16,95,99,34,93,15,98,3,42,54,34,67,8,33,91,73,80,9,63,58,65,46,7,63,72],[21,47,20,32,98,13,73,86,92,14,29,94,65,0,5,1,31,5,60,46,49,19,22,4,70,91,94,83,53,28,41,31,53,92,40,34,9,73,47,15,64,86,6,22,28,66,5,51,8,59,36,99,39,41,11,70,58,1,47,25,37,72,100,38,94,79,31,59,47,75,63,98,99,25,93,69,97,31,19,0,52,3,29,69,44,81,88,1,42,0,97,84,48,94,93,39,13,26,67,30],[53,62,7,18,91,35,11,5,29,66,52,89,47,58,95,10,74,12,64,17,81,50,9,75,72,7,55,84,16,30,37,33,40,50,89,94,41,40,57,34,29,9,25,17,99,98,74,13,19,13,21,57,59,40,52,15,68,45,98,26,57,39,59,33,15,11,20,87,38,90,89,77,5,27,41,18,11,91,31,45,50,65,6,86,38,33,22,3,51,57,71,95,70,31,12,59,13,17,15,1],[7,99,28,16,25,51,47,87,80,82,10,74,75,33,9,2,8,25,82,56,16,11,42,15,5,59,6,21,73,55,92,50,63,3,48,87,54,22,45,27,23,35,35,57,19,4,78,79,78,31,82,37,63,52,70,61,7,11,35,49,17,53,25,82,67,31,80,69,2,48,100,91,45,61,69,100,62,44,72,64,41,49,34,23,3,40,76,28,3,99,35,7,60,67,45,98,74,29,20,12],[31,84,30,34,68,94,7,97,28,73,49,45,22,22,30,75,40,94,89,45,75,3,90,89,45,72,72,18,72,24,63,69,39,22,62,4,11,7,29,77,28,2,67,61,0,42,78,25,16,43,91,22,41,7,2,18,75,90,18,99,14,67,46,9,47,90,84,50,75,12,43,38,41,17,20,93,55,81,62,83,40,22,90,71,88,78,100,45,28,85,75,22,48,39,93,88,37,16,22,93],[0,89,73,50,98,72,4,23,77,40,78,28,81,72,13,63,18,42,95,9,30,44,40,21,81,11,90,85,81,93,42,57,1,33,26,31,88,8,44,32,100,13,92,0,6,49,56,93,53,21,52,63,48,44,69,48,12,61,100,73,83,97,87,28,20,57,9,4,37,2,40,33,13,9,43,21,48,20,93,9,70,11,43,76,78,61,90,3,55,83,21,77,55,20,6,12,42,26,24,52],[89,70,92,93,69,33,84,36,38,30,12,6,50,73,70,62,19,6,46,0,54,11,37,84,80,76,61,25,12,3,26,21,81,37,10,60,14,39,100,50,60,62,84,33,11,82,69,49,23,47,48,47,23,57,5,33,56,59,33,28,34,72,7,19,96,89,85,12,10,85,44,69,52,96,75,29,70,7,49,66,53,68,87,60,73,30,60,38,10,50,91,4,64,73,66,73,86,79,18,15],[96,57,22,21,27,24,16,5,54,10,87,55,25,80,18,76,33,40,93,8,11,49,71,50,70,41,35,66,58,1,100,89,79,75,66,100,53,14,53,19,18,72,75,74,97,12,13,72,99,12,100,36,68,44,52,33,49,83,62,73,77,60,4,22,35,51,18,79,77,87,88,51,4,50,42,88,30,6,95,60,34,47,2,43,38,39,35,62,89,87,12,29,17,38,95,56,99,41,34,93],[53,77,82,11,24,56,27,52,94,62,97,66,47,7,65,20,8,39,90,64,51,17,99,67,72,3,22,24,25,7,31,4,58,6,46,90,25,35,47,59,64,50,81,15,87,3,30,47,62,76,57,22,60,75,70,44,44,20,33,95,88,11,36,3,49,6,20,73,99,27,28,82,28,86,26,34,83,52,65,2,99,98,87,1,60,16,82,22,76,1,28,32,77,39,91,90,82,35,54,48],[44,58,32,27,59,38,86,66,79,50,74,13,0,65,84,47,71,82,76,77,36,38,87,13,61,8,43,35,81,41,35,33,83,91,83,38,24,19,66,97,30,7,76,51,84,40,87,17,92,3,83,63,37,33,53,51,49,94,4,74,90,73,24,43,92,91,28,87,68,81,100,60,85,45,64,38,21,84,71,23,37,12,60,16,94,33,92,71,97,23,87,42,83,11,28,45,28,95,39,53],[100,42,47,33,74,37,59,15,60,6,81,74,74,79,9,60,24,64,15,87,48,67,38,52,6,19,17,25,43,52,72,58,18,40,91,23,99,10,62,42,80,22,40,81,7,0,57,35,26,97,99,21,73,97,20,62,100,97,99,11,16,78,55,81,54,51,54,61,49,0,4,68,25,93,47,1,41,96,67,24,2,86,0,80,93,31,28,88,44,39,16,13,49,64,75,39,21,8,5,38],[37,58,93,66,76,67,43,55,87,17,43,62,45,96,24,21,51,2,29,28,93,16,27,93,2,75,64,21,15,46,91,83,4,48,81,32,98,68,79,6,76,6,84,13,83,2,6,88,14,53,56,48,15,70,32,60,89,19,26,88,87,80,1,38,53,84,12,84,66,34,79,77,89,17,53,13,65,92,79,15,36,14,100,13,63,25,77,25,99,33,66,25,45,90,52,37,20,5,70,63],[26,88,61,42,30,0,1,85,11,14,73,85,63,19,11,99,65,9,92,92,12,32,82,29,58,37,33,59,6,12,22,5,37,46,86,40,54,94,14,12,97,5,1,17,84,82,21,42,45,56,79,34,93,11,47,43,23,14,51,51,58,34,49,88,61,53,83,21,14,16,89,92,7,20,13,53,75,61,72,86,56,23,78,48,99,45,78,3,87,93,16,61,62,14,52,56,5,8,33,83],[40,1,90,86,67,98,95,73,92,72,28,85,43,66,66,88,89,79,12,55,84,93,31,61,44,84,86,82,49,19,71,78,6,1,82,20,64,60,63,21,9,96,62,41,30,42,35,6,64,28,70,82,48,51,30,10,58,56,73,57,11,63,57,40,15,63,95,83,2,13,51,52,4,71,70,0,11,77,79,81,38,65,71,26,83,85,58,43,46,6,28,58,42,71,98,79,76,60,91,84],[46,91,57,14,12,97,84,28,0,43,45,81,37,70,66,47,89,13,5,21,63,17,91,95,92,52,13,32,78,25,24,15,50,27,58,100,24,91,43,13,96,53,5,81,86,75,15,98,57,58,84,75,64,17,63,0,67,94,6,70,55,74,61,65,99,22,88,74,22,93,16,13,49,84,76,77,41,64,49,53,77,88,97,31,35,50,43,37,57,17,17,52,77,89,95,65,38,89,70,40],[91,94,70,80,27,25,26,79,91,37,87,44,86,16,90,83,22,64,69,88,81,41,90,14,97,45,71,61,74,73,85,90,53,86,95,68,36,54,1,66,13,3,48,18,6,85,7,25,34,96,100,20,36,87,32,18,7,88,100,37,26,96,69,4,45,57,13,78,86,94,71,28,95,82,71,49,30,65,100,89,36,88,85,6,48,49,53,100,87,40,70,6,1,95,32,25,79,99,56,28],[81,90,90,82,47,96,75,69,94,77,25,99,92,24,37,57,22,87,9,23,22,94,65,15,48,5,54,35,71,33,16,20,74,32,0,42,59,90,19,5,19,41,76,6,99,80,78,84,38,62,73,70,45,9,100,90,40,67,28,23,66,8,100,64,20,53,69,68,51,11,44,28,27,84,42,42,46,37,27,96,79,67,60,71,96,83,1,14,85,44,57,30,82,78,79,31,5,87,41,48],[14,49,32,69,92,36,3,66,98,47,65,65,57,62,5,37,83,24,41,65,10,12,21,98,68,68,0,80,8,26,85,80,99,27,87,54,13,26,68,89,94,99,55,82,9,95,87,19,3,58,91,42,4,11,9,6,22,32,71,9,73,29,33,52,49,57,80,51,55,40,2,49,86,15,68,0,82,92,79,8,96,95,74,5,89,9,45,64,13,37,100,87,38,77,11,36,97,56,48,50],[84,3,60,20,68,28,17,95,50,69,37,81,18,38,86,93,82,47,1,70,71,18,15,5,0,73,76,50,68,70,10,39,26,95,94,92,44,27,52,82,65,18,20,23,28,78,32,24,14,23,85,72,6,96,70,59,82,70,9,37,85,8,32,12,25,92,74,62,42,45,16,85,83,30,12,36,79,8,24,40,62,57,42,78,84,39,88,74,19,72,72,46,40,54,21,0,40,31,100,28],[91,94,82,55,35,46,17,86,93,42,61,59,57,45,99,39,62,70,13,22,82,77,10,35,17,68,25,33,93,80,9,93,9,2,64,80,3,74,74,51,98,75,27,4,70,33,69,69,60,83,99,19,46,50,28,98,75,93,37,17,59,64,65,11,50,46,64,1,84,30,78,87,21,96,65,17,57,20,22,72,72,84,18,94,93,61,45,5,28,97,62,29,8,33,47,29,5,85,26,66],[46,49,60,58,5,5,83,41,13,90,66,81,35,94,33,74,69,72,22,48,83,48,46,75,83,9,66,32,48,28,66,51,45,44,62,61,77,0,64,17,56,21,29,9,65,82,35,27,19,23,20,46,77,91,15,84,29,53,42,92,14,61,86,61,61,26,75,20,82,52,2,31,5,16,73,75,20,17,80,65,5,73,18,7,21,33,23,66,51,76,72,81,2,92,93,84,36,10,27,57],[77,60,61,21,28,52,76,18,74,98,23,79,84,65,33,21,92,87,43,58,76,75,8,29,48,49,16,13,2,25,66,64,87,53,19,77,12,22,60,78,76,4,100,68,64,96,15,11,61,84,16,77,69,0,99,86,83,55,66,53,47,5,89,67,54,29,61,98,48,44,75,94,97,89,73,12,54,17,32,61,98,29,10,36,76,69,52,32,24,0,90,95,0,73,66,15,66,0,48,83],[26,88,40,52,46,13,19,54,83,74,32,33,68,54,72,46,78,35,87,50,96,26,52,70,100,71,61,22,47,71,71,61,32,39,73,44,99,90,50,94,17,84,15,95,29,57,100,89,20,12,27,65,51,100,43,70,78,89,87,90,6,20,49,81,0,11,18,60,76,55,11,8,33,28,47,10,77,4,92,49,51,78,83,66,36,91,76,7,99,22,81,63,56,1,25,84,66,36,24,4],[100,76,65,66,89,29,78,21,86,4,46,30,83,0,20,11,35,99,51,45,85,50,51,75,25,66,1,94,90,8,11,70,36,92,71,74,44,44,35,28,77,24,58,51,73,0,33,22,52,64,13,71,9,64,37,43,14,65,32,68,73,32,88,56,48,72,61,98,31,96,43,99,58,87,58,75,3,61,14,33,8,48,81,100,28,86,89,29,40,52,45,66,68,1,89,33,31,36,11,51],[86,95,43,9,70,22,60,40,45,27,73,34,23,95,87,24,63,94,25,30,94,30,33,26,29,25,31,79,45,19,99,13,15,10,86,84,63,78,0,97,69,5,61,47,79,40,63,73,35,62,23,97,65,35,50,28,96,73,16,6,67,54,61,69,4,64,44,50,87,99,22,58,15,89,66,58,40,88,1,1,86,26,48,74,12,41,46,78,33,23,70,33,30,34,60,78,43,46,23,63],[54,26,53,89,96,47,46,51,35,57,23,73,16,73,87,29,12,92,34,30,71,55,48,25,18,94,19,60,1,22,53,63,17,80,66,68,92,40,100,62,38,32,71,72,6,50,12,88,20,7,27,32,60,80,12,57,95,42,33,46,46,71,71,32,44,2,52,15,44,86,77,25,73,73,83,83,68,22,99,36,45,41,86,65,62,99,94,57,10,48,78,36,59,80,18,21,81,43,53,80],[78,73,51,9,10,20,43,29,40,40,83,37,90,34,77,82,50,34,56,99,46,95,75,66,57,52,21,23,2,16,93,30,84,32,95,89,95,10,26,21,50,13,12,8,60,70,6,3,98,50,67,97,10,13,33,79,19,10,83,49,39,29,31,94,36,56,80,16,16,67,21,3,4,84,45,41,60,59,69,34,70,56,17,89,69,22,75,76,58,80,95,81,72,55,67,81,81,68,39,44],[61,69,29,11,56,39,46,52,33,19,38,1,0,66,97,17,44,36,60,68,1,88,62,96,61,38,1,98,55,37,76,29,0,70,47,24,52,71,55,50,31,20,91,94,82,49,48,28,33,10,54,80,30,66,97,78,88,87,34,36,83,95,68,34,52,24,8,23,17,37,14,81,58,79,57,34,89,79,62,24,41,2,19,6,68,2,23,13,36,34,16,91,56,93,1,29,11,19,1,63],[27,43,53,39,100,63,47,59,89,4,42,10,96,18,7,34,99,50,9,69,60,23,24,32,48,1,15,98,91,31,49,98,56,31,94,4,25,58,94,98,12,66,85,26,60,49,87,39,41,20,80,93,5,95,70,66,15,32,61,81,38,25,46,6,85,27,14,30,81,55,41,1,21,35,74,15,50,31,1,5,74,100,88,60,88,76,19,47,98,11,31,20,63,11,87,79,43,97,80,7],[7,45,82,19,89,68,13,16,62,29,40,71,100,82,96,44,56,93,24,2,88,48,45,92,17,32,5,62,90,56,71,37,69,89,62,24,72,23,69,44,41,93,59,35,76,70,20,8,67,19,57,37,33,69,46,58,0,99,81,64,48,93,23,2,79,46,99,79,30,41,92,8,84,68,49,24,67,87,63,98,70,19,78,36,41,52,82,41,14,12,66,84,8,5,16,22,4,25,13,62],[24,12,4,73,82,49,84,62,67,79,89,75,32,6,46,28,77,91,9,1,26,83,62,10,59,81,7,46,71,95,53,47,90,7,78,34,67,5,93,9,38,9,27,66,12,12,92,29,68,49,24,24,67,84,31,72,80,22,71,95,71,53,95,13,98,81,73,45,86,58,89,85,54,13,21,23,70,51,64,43,84,20,68,76,56,45,40,70,41,47,52,97,81,55,92,41,77,30,72,69],[27,48,98,70,95,32,46,57,57,50,0,92,4,36,76,2,66,17,38,0,38,28,27,40,2,98,88,35,70,65,71,73,73,19,12,4,58,45,19,17,33,46,74,31,29,32,38,11,73,51,72,27,93,9,92,41,61,22,62,88,89,73,12,76,82,38,4,93,73,48,10,99,7,98,42,44,55,53,15,98,29,95,83,77,1,81,99,80,48,6,39,67,5,40,69,72,19,41,64,89],[28,19,6,86,93,50,57,96,76,73,64,11,28,55,37,100,50,18,16,43,10,60,73,95,6,70,51,33,10,51,64,55,99,89,16,97,17,61,71,25,62,50,83,73,25,71,78,94,67,31,31,9,34,99,55,41,87,73,11,14,85,52,54,46,44,24,41,44,76,83,3,98,39,21,44,78,56,79,18,56,5,29,25,87,47,19,96,93,10,14,94,6,31,79,18,36,1,43,88,14],[39,57,60,2,42,26,94,68,27,26,69,66,96,33,70,61,79,93,18,88,89,85,2,48,74,84,67,5,32,21,7,36,25,89,79,34,6,59,83,1,8,49,84,34,84,84,46,13,2,37,83,49,29,48,65,90,12,40,62,76,68,11,23,25,64,58,71,91,2,5,31,67,39,42,62,50,95,20,2,44,87,45,45,80,38,30,64,35,7,80,32,49,3,71,35,28,19,43,50,84],[17,11,93,48,66,86,78,80,87,29,53,30,73,19,54,39,77,42,57,69,16,26,83,17,74,69,87,25,17,39,88,90,67,17,55,98,18,83,72,20,40,8,71,68,92,15,23,40,18,93,3,97,40,52,52,38,56,95,81,94,35,19,99,24,13,16,23,3,97,78,78,34,77,72,78,29,76,29,29,87,3,45,10,88,99,61,17,64,77,60,91,83,47,23,49,62,60,17,20,24],[28,4,52,97,1,34,52,28,95,85,25,96,26,8,22,56,78,62,88,41,58,31,54,51,99,5,77,94,48,92,40,50,78,95,73,76,68,67,82,90,100,4,66,13,57,58,5,31,66,68,50,94,5,71,49,66,97,80,6,24,37,56,50,38,99,36,59,21,54,37,78,6,88,66,18,59,82,57,11,92,64,14,23,99,74,89,69,17,50,52,41,57,3,22,58,75,91,25,58,11],[32,41,88,83,91,20,91,93,15,11,14,90,57,81,46,10,67,90,49,93,65,78,20,48,70,48,5,98,21,42,72,84,19,20,18,22,98,91,6,53,39,39,93,98,57,36,80,23,15,16,25,0,79,97,32,1,58,63,63,69,0,77,63,30,27,75,84,60,58,52,56,10,76,76,0,31,70,35,79,80,71,26,6,23,18,7,83,44,4,18,4,85,73,77,38,42,11,6,13,53],[22,20,86,36,78,84,88,89,76,73,100,71,22,58,95,74,46,4,11,98,38,41,47,48,8,97,54,70,8,37,60,17,15,88,35,42,67,52,67,26,89,26,78,7,13,73,93,80,67,11,61,92,88,77,100,90,36,54,77,40,33,67,73,79,45,16,78,72,63,66,93,80,63,63,23,78,29,90,37,24,0,15,3,59,80,15,94,26,78,53,52,5,42,44,71,81,27,1,81,25],[88,36,32,8,39,38,64,70,41,98,0,14,87,42,43,50,92,72,78,3,22,24,42,43,86,61,60,4,82,17,61,19,80,58,68,42,59,100,52,95,7,66,38,72,92,86,40,71,68,2,26,73,87,42,45,8,19,35,3,43,48,80,68,21,73,77,49,23,76,14,100,96,39,90,40,90,4,34,52,11,63,30,47,57,38,27,67,38,22,14,47,100,4,99,25,11,56,64,3,61],[64,19,24,43,61,93,67,39,99,41,18,98,12,66,86,16,26,92,4,58,49,91,66,14,0,39,5,87,76,11,42,59,5,13,66,98,84,95,39,2,73,97,39,81,26,41,25,24,36,35,68,40,98,56,85,15,34,19,20,35,14,1,79,71,65,13,26,69,44,70,40,34,18,90,36,73,31,21,9,39,78,43,69,56,6,16,3,60,86,6,13,49,6,11,54,50,22,90,76,75],[80,88,89,57,78,45,39,42,25,91,97,85,68,10,96,97,59,72,16,11,89,59,12,58,39,87,82,90,98,59,60,29,28,18,78,33,46,50,23,89,85,42,100,41,58,62,3,8,60,14,44,61,59,21,36,98,44,77,73,16,65,13,51,91,13,41,71,83,9,38,68,59,51,75,52,30,79,31,70,20,61,49,8,43,26,88,75,55,100,55,72,100,43,69,88,30,22,84,85,9],[94,91,73,62,14,75,76,59,41,71,12,56,22,39,51,8,76,13,87,76,98,48,41,63,82,84,7,11,27,17,74,96,81,0,96,18,84,19,57,68,37,49,78,73,57,25,26,87,40,38,72,86,38,55,91,44,11,74,1,78,65,51,16,37,7,47,70,6,0,90,71,45,14,36,3,30,55,89,75,50,80,40,91,48,51,48,55,69,27,84,22,60,17,24,71,49,46,53,19,36],[85,16,17,1,9,82,2,18,92,62,84,55,17,10,17,82,53,58,100,89,77,54,79,23,58,65,54,70,57,49,45,28,23,54,77,0,73,63,93,30,91,64,34,52,69,73,46,4,4,72,61,90,47,14,74,61,88,10,18,93,93,67,96,99,35,59,66,10,66,78,11,31,60,80,94,84,85,9,87,81,69,74,39,78,6,43,68,99,1,60,58,65,60,73,93,42,53,45,37,37],[21,4,88,76,95,38,93,100,72,33,7,80,60,74,21,73,6,84,37,94,79,3,36,62,10,16,64,9,100,35,32,16,78,35,35,32,1,94,14,77,22,75,94,19,84,57,47,22,33,100,89,30,62,23,67,4,43,10,18,76,19,63,96,52,98,49,30,84,56,92,81,21,26,73,93,44,6,82,33,96,14,6,21,59,51,60,38,60,95,96,68,29,48,87,90,49,60,33,18,67],[55,1,36,57,48,86,40,67,87,5,12,68,81,45,55,78,83,34,42,34,34,12,32,83,74,50,59,98,86,95,30,93,86,75,98,24,66,43,86,88,23,40,70,1,86,1,8,1,52,12,67,13,87,57,44,28,92,36,32,24,4,3,79,11,7,76,84,27,76,81,15,90,15,11,77,16,48,84,97,82,72,23,14,89,23,32,37,59,84,9,81,58,35,98,54,88,85,98,98,41],[32,20,99,9,35,99,7,48,49,42,7,33,33,22,56,8,62,25,78,50,22,82,62,13,18,69,98,55,27,78,82,13,56,91,33,13,4,9,9,73,93,32,99,57,2,63,19,83,81,0,4,85,49,34,19,89,42,50,73,0,65,90,98,62,61,55,51,93,99,100,8,69,28,0,49,88,99,61,15,72,68,45,42,87,38,51,7,80,82,11,46,68,43,10,58,97,98,37,82,25],[22,70,5,49,84,24,38,89,49,13,80,88,45,62,10,80,56,94,24,17,4,24,3,92,75,30,62,49,8,69,82,39,63,68,57,2,4,43,7,43,100,92,5,51,15,27,83,85,66,58,86,68,19,94,74,29,9,4,94,18,62,83,2,60,79,5,31,89,83,16,1,22,80,6,39,12,58,78,21,75,8,13,14,63,76,78,28,8,25,54,43,94,86,51,41,15,87,73,69,17],[41,27,97,5,75,22,42,8,15,35,18,96,53,21,89,47,70,21,56,31,74,5,17,12,80,78,48,99,20,2,62,10,0,0,22,11,90,83,75,36,53,88,98,60,88,16,26,18,81,34,66,57,52,30,22,78,88,4,76,23,91,63,78,11,80,100,38,44,53,0,71,30,24,15,67,12,79,46,97,69,64,28,59,98,80,84,26,35,6,24,14,19,87,60,63,22,20,85,5,6],[82,46,36,26,55,32,42,78,97,58,5,13,94,6,68,22,20,100,3,62,65,14,9,30,92,56,75,74,41,53,25,95,86,41,29,99,14,41,29,12,30,94,52,25,48,28,9,60,74,62,6,55,18,27,78,58,22,49,47,17,58,92,24,80,45,34,25,42,16,4,88,72,7,35,17,14,59,58,53,21,97,43,28,37,77,20,81,78,21,73,70,29,11,52,66,62,27,75,60,59],[35,1,93,54,94,31,31,41,55,74,28,75,19,73,0,53,5,5,60,93,98,64,4,54,67,50,61,89,12,57,63,30,10,71,96,1,88,93,52,27,16,45,37,30,82,11,2,61,85,39,20,90,58,73,95,74,3,58,59,98,17,90,51,23,47,80,59,90,81,0,80,9,49,88,42,67,4,37,54,96,34,89,78,69,73,26,100,87,10,79,42,94,7,65,86,46,6,14,49,46],[59,79,5,46,46,22,82,71,90,8,71,90,99,26,17,42,30,69,14,83,61,94,96,74,89,26,96,95,97,28,41,45,34,64,87,54,35,6,8,47,44,57,62,64,67,15,60,90,68,86,68,37,57,79,47,86,88,8,24,58,11,10,50,22,36,9,13,21,35,14,89,18,63,19,26,66,80,2,37,53,87,69,16,60,44,53,56,94,82,2,37,24,8,2,29,66,82,42,52,74],[43,83,82,100,41,62,75,85,89,67,70,56,58,38,72,16,39,21,33,29,61,47,36,98,6,18,45,36,58,21,79,20,91,68,36,23,22,90,88,85,19,20,30,14,5,40,73,16,56,33,47,23,26,71,90,4,85,40,44,18,47,57,69,20,68,38,15,3,51,63,98,18,58,40,19,0,94,69,64,42,82,90,37,60,37,96,73,85,18,72,93,56,43,88,14,93,61,5,17,86],[70,14,39,3,51,79,28,57,45,11,41,7,77,82,24,74,67,28,100,98,35,25,2,10,68,57,86,85,11,65,50,24,62,40,77,77,65,7,85,46,50,18,91,54,47,49,47,1,36,44,44,39,57,71,11,27,93,56,94,53,56,36,20,93,54,93,53,17,75,76,11,18,26,38,60,67,42,8,75,96,48,11,0,52,81,34,53,22,71,59,90,72,96,17,25,23,48,37,70,62],[5,38,74,38,63,71,94,59,28,3,0,19,33,38,81,81,60,15,83,85,36,53,22,62,88,82,31,3,15,97,35,63,8,76,95,46,74,61,72,55,33,80,87,60,88,15,47,65,93,73,2,33,20,74,7,18,40,59,88,17,45,20,6,34,46,53,81,45,6,37,37,67,81,9,65,24,98,80,23,97,12,76,96,21,69,41,40,87,38,34,87,89,88,46,12,68,74,45,18,1],[17,66,36,47,99,62,52,43,20,13,27,19,64,28,24,71,78,88,67,68,91,70,89,96,14,53,58,9,14,16,2,61,44,39,88,46,17,56,76,66,97,43,22,90,38,3,95,15,28,16,88,18,88,29,39,16,26,16,10,54,88,97,100,14,9,2,99,61,96,55,5,25,13,4,84,65,75,7,60,15,32,5,8,38,85,1,96,12,100,15,77,26,75,25,23,85,44,3,11,18],[95,35,74,44,45,20,64,99,93,78,30,64,72,8,12,74,97,1,67,27,91,24,36,21,96,68,0,92,12,27,64,90,60,46,89,75,23,56,86,13,23,45,48,54,27,65,29,52,14,97,40,15,59,14,66,17,63,97,46,90,36,71,92,5,10,41,63,14,49,36,58,76,94,39,87,56,28,70,52,37,54,24,8,60,86,47,22,1,86,62,86,13,50,56,66,84,86,10,15,18],[50,51,88,75,13,94,21,8,46,25,43,25,76,51,15,29,54,92,63,35,97,91,98,74,75,34,96,82,51,45,60,85,77,51,62,65,35,18,98,58,13,15,32,62,63,29,80,17,3,12,94,6,8,63,86,3,22,48,77,86,41,19,38,79,79,12,97,9,84,96,66,98,63,59,25,37,84,63,62,64,33,69,43,69,69,2,97,4,55,15,49,57,40,48,56,58,4,4,22,71],[84,99,38,90,21,62,55,17,39,91,49,62,97,14,72,86,62,84,70,87,69,73,60,60,71,20,64,7,50,33,63,75,48,78,86,45,98,36,41,7,3,75,5,16,46,44,94,74,3,97,80,43,48,12,54,44,45,52,44,7,84,31,31,30,82,39,75,10,88,8,39,14,43,21,2,68,41,4,58,84,54,72,65,53,34,2,89,60,75,2,40,48,73,49,41,73,12,62,12,88]],"test_outputs":[1,7,0,91,59,70,29,127,108,41,92,102,9,73,127,62,13,114,39,64,110,46,46,80,64,123,97,123,12,45,69,71,80,33,102,83,87,19,55,108,94,27,12,0,119,48,108,111,49,100,88,46,53,98,74,88,38,69,104,66,127,0,110,72,115,5,66,73,32,48,47,70,109,93,71,26,119,47,50,63,58,112,80,125,70,50,80,47,76,125,113,39,72,10,81,68,54,93,21,56,71,113,55],"language":"python"}
{"task_id":13,"prompt":"\ndef derangements(n: int) -> int:\n    \"\"\"Return the number of derangements of n items.\n    The derangement of n items is a permutation of n items such that no item\n    appears in its original position.\n    It can be defined recursively as:\n        !n = (n - 1) * (!(n - 1) + !(n - 2))\n    where !0 = 1 and !1 = 0.\n    Examples:\n    >>> derangements(1)\n    1\n    >>> derangements(1)\n    0\n    >>> derangements(2)\n    0    \n    \"\"\"\n","entry_point":"derangements","canonical_solution":"\ndef derangements(n: int) -> int:\n    \"\"\"Return the number of derangements of n items.\n    The derangement of n items is a permutation of n items such that no item\n    appears in its original position.\n    It can be defined recursively as:\n        !n = (n - 1) * (!(n - 1) + !(n - 2))\n    where !0 = 1 and !1 = 0.\n    Examples:\n    >>> derangements(1)\n    1\n    >>> derangements(1)\n    0\n    >>> derangements(2)\n    0    \n    \"\"\"\n# SOLUTION\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangements(n - 1) + derangements(n - 2))\n\n","test":"tests","test_inputs":[[0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23]],"test_outputs":[1,0,1,2,9,44,265,1854,14833,133496,1334961,14684570,176214841,2290792932,32071101049,481066515734,7697064251745,130850092279664,2355301661033953,44750731559645106,895014631192902121,18795307255050944540,413496759611120779881,9510425471055777937262],"language":"python"}
{"task_id":14,"prompt":"\nimport re\n\ndef is_enclosed(string: str) -> bool:\n    \"\"\"A string is enclosed if it starts and ends with the same non empty substring. Namely, a string s is enclosed if there exists a non empty string t such that s = t + r + t, where r can be any string. For example, 'abcabc' is enclosed because it starts and ends with 'abc', 'abCCab' is enclosed because it starts and ends with 'ab'\n    >>> is_enclosed('abcabc')\n    True\n    >>> is_enclosed('abc')\n    False\n    >>> is_enclosed('abCCab')\n    True\n    >>> is_enclosed('abCCa')\n    True\n    \"\"\"\n","entry_point":"is_enclosed","canonical_solution":"\nimport re\n\ndef is_enclosed(string: str) -> bool:\n    \"\"\"A string is enclosed if it starts and ends with the same non empty substring. Namely, a string s is enclosed if there exists a non empty string t such that s = t + r + t, where r can be any string. For example, 'abcabc' is enclosed because it starts and ends with 'abc', 'abCCab' is enclosed because it starts and ends with 'ab'\n    >>> is_enclosed('abcabc')\n    True\n    >>> is_enclosed('abc')\n    False\n    >>> is_enclosed('abCCab')\n    True\n    >>> is_enclosed('abCCa')\n    True\n    \"\"\"\n# SOLUTION\n    return bool(re.match(r'^(.+).*\\1$', string))\n\n","test":"tests","test_inputs":[["abcabc"],["abc"],["abCCab"],["abCCa"],["abCC"],["helloWORLDhello"],["hellohello"],["hello"],["hellohellohello"],[""]],"test_outputs":[true,false,true,true,false,true,true,false,true,false],"language":"python"}
{"task_id":15,"prompt":"\nimport re\n\ndef extract_nums(string: str) -> list[int]:\n    \"\"\"Extracts all valid integer numbers from a string.\n    >>> extract_nums('1 2 3 4 5')\n    [1, 2, 3, 4, 5]\n    >>> extract_nums('I have 15 apples and 3 oranges')\n    [15, 3]\n    >>> extract_nums('123 minus 456 is -333')\n    [123, 456, -333]\n    \"\"\"\n","entry_point":"extract_nums","canonical_solution":"\nimport re\n\ndef extract_nums(string: str) -> list[int]:\n    \"\"\"Extracts all valid integer numbers from a string.\n    >>> extract_nums('1 2 3 4 5')\n    [1, 2, 3, 4, 5]\n    >>> extract_nums('I have 15 apples and 3 oranges')\n    [15, 3]\n    >>> extract_nums('123 minus 456 is -333')\n    [123, 456, -333]\n    \"\"\"\n# SOLUTION\n    return [int(num) for num in re.findall(r'-?\\d+', string)]\n","test":"tests","test_inputs":[["1 2 3 4 5"],["I have 15 apples and 3 oranges"],["123 minus 456 is -333"],["1234"],["Hello World!"],["123 456 789"],["-123+456-789=0"]],"test_outputs":[[1,2,3,4,5],[15,3],[123,456,-333],[1234],[],[123,456,789],[-123,456,-789,0]],"language":"python"}
{"task_id":16,"prompt":"\ndef find_singles(items: list) -> list:\n    \"\"\"Given a list of values, return a list of items that appear only once in the list.\n    >>> find_singles([1, 1, 2])\n    [2]\n    >>> find_singles([1, 2, 2, 3, 3, 4])\n    [1, 4]\n    >>> find_singles([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n","entry_point":"find_singles","canonical_solution":"\ndef find_singles(items: list) -> list:\n    \"\"\"Given a list of values, return a list of items that appear only once in the list.\n    >>> find_singles([1, 1, 2])\n    [2]\n    >>> find_singles([1, 2, 2, 3, 3, 4])\n    [1, 4]\n    >>> find_singles([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n# SOLUTION\n    return [i for i in items if items.count(i) == 1]\n\n","test":"tests","test_inputs":[[[1,1,2]],[[1,2,2,3,3,4]],[[1,2,3,4]],[[1,1,1,1,1]],[[]],[["a","b","c","a","b","c","d"]],[["a","b","c","d"]]],"test_outputs":[[2],[1,4],[1,2,3,4],[],[],["d"],["a","b","c","d"]],"language":"python"}
{"task_id":17,"prompt":"\ndef fix_parentheses(string: str) -> str:\n    \"\"\"Given a string, add as many opening and closing parentheses as needed to make the string valid.\n    >>> fix_parentheses('((')\n    '(())'\n    >>> fix_parentheses('()()(')\n    '()()()'\n    >>> fix_parentheses(')(')\n    '()()'\n    \"\"\"\n","entry_point":"fix_parentheses","canonical_solution":"\ndef fix_parentheses(string: str) -> str:\n    \"\"\"Given a string, add as many opening and closing parentheses as needed to make the string valid.\n    >>> fix_parentheses('((')\n    '(())'\n    >>> fix_parentheses('()()(')\n    '()()()'\n    >>> fix_parentheses(')(')\n    '()()'\n    \"\"\"\n# SOLUTION\n    stack = []\n    missing = 0\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                missing += 1\n    return '(' * missing + string + ')' * len(stack)\n","test":"tests","test_inputs":[["(())"],["((("],["()()("],[")("],[")()()("],["))))("]],"test_outputs":["(())","((()))","()()()","()()","()()()()","(((())))()"],"language":"python"}
{"task_id":18,"prompt":"\ndef flatten(lists: list[list]) -> list:\n    \"\"\"Flatten a list of lists into a single list\n    >>> flatten([[1, 2], [3, 4, 5]])\n    [1, 2, 3, 4, 5]\n    >>> flatten([])\n    []\n    >>> flatten([[1,2,3]])\n    [1, 2, 3]\n    \"\"\"\n","entry_point":"flatten","canonical_solution":"\ndef flatten(lists: list[list]) -> list:\n    \"\"\"Flatten a list of lists into a single list\n    >>> flatten([[1, 2], [3, 4, 5]])\n    [1, 2, 3, 4, 5]\n    >>> flatten([])\n    []\n    >>> flatten([[1,2,3]])\n    [1, 2, 3]\n    \"\"\"\n# SOLUTION\n    return [item for sublist in lists for item in sublist]\n","test":"tests","test_inputs":[[[1,2],[3,4,5]],[[]],[[1,2,3]],[[]],[[],[]],[[],["a"]]],"test_outputs":[[1,2,3,4,5],[],[1,2,3],[],[],["a"]],"language":"python"}
{"task_id":19,"prompt":"\ndef friendly_lists(a: list, b:list) -> bool:\n    \"\"\"Returns True if lists a and b are friendly, False otherwise.\n    Two lists are friendly if there exists an index i such that a[i] = b[i].\n    >>> friendly_lists([1, 2, 3], [4, 5, 6])\n    False\n    >>> friendly_lists([1, 2, 3], [4, 5, 3])\n    True\n    >>> friendly_lists([1, 2, 3], [4, 2, 6])\n    True\n    \"\"\"\n","entry_point":"friendly_lists","canonical_solution":"\ndef friendly_lists(a: list, b:list) -> bool:\n    \"\"\"Returns True if lists a and b are friendly, False otherwise.\n    Two lists are friendly if there exists an index i such that a[i] = b[i].\n    >>> friendly_lists([1, 2, 3], [4, 5, 6])\n    False\n    >>> friendly_lists([1, 2, 3], [4, 5, 3])\n    True\n    >>> friendly_lists([1, 2, 3], [4, 2, 6])\n    True\n    \"\"\"\n# SOLUTION\n    for x, y in zip(a, b):\n        if x == y:\n            return True\n    return False\n","test":"tests","test_inputs":[[[1,2,3],[4,5,6]],[[1,2,3],[4,5,3]],[[1,2,3],[4,2,6]],[[],[1,2,3]],[[],[]],[[1,2,3],[]],[[1,2,3],[1,2,3]],[[1,2,3],[3]],[[1,2],[1,2,3]]],"test_outputs":[false,true,true,false,false,false,true,false,true],"language":"python"}
{"task_id":20,"prompt":"\ndef hamming_distance(a: int, b: int) -> int:\n    \"\"\"Compute the Hamming distance between two integers.\n    The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n    >>> hamming_distance(1, 4)\n    2\n    >>> hamming_distance(127, 0)\n    7\n    >>> hamming_distance(32, 5)\n    3\n    \"\"\"\n","entry_point":"hamming_distance","canonical_solution":"\ndef hamming_distance(a: int, b: int) -> int:\n    \"\"\"Compute the Hamming distance between two integers.\n    The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\n    >>> hamming_distance(1, 4)\n    2\n    >>> hamming_distance(127, 0)\n    7\n    >>> hamming_distance(32, 5)\n    3\n    \"\"\"\n# SOLUTION\n    return bin(a ^ b).count('1')\n","test":"tests","test_inputs":[[1,4],[127,0],[32,5],[0,0],[1024,1],[864,394],[776,911],[430,41],[265,988],[523,497],[414,940],[802,849],[310,991],[488,366],[597,913]],"test_outputs":[2,7,3,0,2,6,4,5,6,8,4,5,6,3,4],"language":"python"}
{"task_id":402418010,"prompt":"\ndef hamming_weight(n: int) -> int:\n    \"\"\"Compute the Hamming weight of an integer. \n    The Hamming weight is the number of one bits in the binary representation of the integer.\n    >>> hamming_weight(0)\n    0\n    >>> hamming_weight(7)\n    3\n    >>> hamming_weight(128)\n    1\n    \"\"\"\n","entry_point":"hamming_weight","canonical_solution":"\ndef hamming_weight(n: int) -> int:\n    \"\"\"Compute the Hamming weight of an integer. \n    The Hamming weight is the number of one bits in the binary representation of the integer.\n    >>> hamming_weight(0)\n    0\n    >>> hamming_weight(7)\n    3\n    >>> hamming_weight(128)\n    1\n    \"\"\"\n# SOLUTION\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n","test":"tests","test_inputs":[[0],[7],[128],[2863311530],[1431655765],[2746317213],[478163327],[107420369],[3184935163],[1181241943],[1051802512],[958682846],[599310825],[3163119785],[440213415],[2906402157],[3181143731],[3831882064],[2342331444],[373399426],[2536146025],[1812140441],[136505587],[127978094],[402418010]],"test_outputs":[0,3,1,16,16,18,14,14,19,14,16,16,15,14,18,18,19,14,14,13,14,12,13,14,18],"language":"python"}
{"task_id":22,"prompt":"\ndef interval_distance(interval1: tuple[int, int], interval2: tuple[int, int]) -> int:\n    \"\"\"\n    Returns the distance between two intervals on the number line.\n    If the intervals overlap, the distance is 0.\n    Otherwise, the distance is the minimum distance between the two intervals.\n    For example:\n    >>> interval_distance((1, 3), (5, 7))\n    2\n    >>> interval_distance((5, 9), (1, 7))\n    0\n    >>> interval_distance((3, 4), (2, 3))\n    0\n    \"\"\"\n","entry_point":"interval_distance","canonical_solution":"\ndef interval_distance(interval1: tuple[int, int], interval2: tuple[int, int]) -> int:\n    \"\"\"\n    Returns the distance between two intervals on the number line.\n    If the intervals overlap, the distance is 0.\n    Otherwise, the distance is the minimum distance between the two intervals.\n    For example:\n    >>> interval_distance((1, 3), (5, 7))\n    2\n    >>> interval_distance((5, 9), (1, 7))\n    0\n    >>> interval_distance((3, 4), (2, 3))\n    0\n    \"\"\"\n# SOLUTION\n    if interval1[1] < interval2[0]:\n        return interval2[0] - interval1[1]\n    if interval2[1] < interval1[0]:\n        return interval1[0] - interval2[1]\n    return 0\n\n","test":"tests","test_inputs":[[[1,3],[5,7]],[[5,9],[1,7]],[[3,4],[2,3]],[[1,3],[2,4]],[[1,3],[3,5]],[[1,3],[4,5]],[[-1,1],[2,3]],[[-1,1],[-3,-2]]],"test_outputs":[2,0,0,0,0,1,1,1],"language":"python"}
{"task_id":54,"prompt":"\ndef is_involution(permutation: list[int]) -> bool:\n    \"\"\"Determine if a permutation is an involution.\n    A permutation is an involution if and only if it is its own inverse.\n    The permutation is represented as a list of integers, where the index\n    represents the element and the value represents the image of the element\n    under the permutation.\n    >>> is_involution([1, 0])\n    True\n    >>> is_involution([0, 2, 1])\n    True\n    >>> is_involution([1, 2, 0])\n    False\n    \"\"\"\n","entry_point":"is_involution","canonical_solution":"\ndef is_involution(permutation: list[int]) -> bool:\n    \"\"\"Determine if a permutation is an involution.\n    A permutation is an involution if and only if it is its own inverse.\n    The permutation is represented as a list of integers, where the index\n    represents the element and the value represents the image of the element\n    under the permutation.\n    >>> is_involution([1, 0])\n    True\n    >>> is_involution([0, 2, 1])\n    True\n    >>> is_involution([1, 2, 0])\n    False\n    \"\"\"\n# SOLUTION\n    return all(permutation[permutation[i]] == i for i in range(len(permutation)))\n\n","test":"tests","test_inputs":[[[0]],[[1,0]],[[0,2,1]],[[1,2,0]],[[1,2,0,3]],[[14,3,35,31,28,17,13,69,11,54,4,80,73,27,29,64,70,25,53,81,77,37,76,51,55,0,48,58,10,44,68,21,59,9,75,50,6,5,24,45,22,41,38,16,2,67,34,7,43,52,18,26,20,19,72,74,78,42,40,60,1,79,57,23,36,65,12,71,49,63,32,66,30,61,39,8,15,56,46,33,62,47]],[[24,17,40,44,35,14,43,20,49,51,3,54,2,52,25,58,4,13,36,46,42,31,45,29,9,16,8,15,34,23,18,39,41,12,11,7,53,38,32,47,1,50,30,5,28,55,19,6,26,48,59,33,56,10,0,22,57,27,21,37]],[[27,10,29,0,16,32,11,33,35,3,37,20,9,26,30,19,6,4,31,5,17,23,34,25,18,7,15,1,13,24,28,22,36,8,21,12,14,2]],[[68,16,96,84,60,70,21,33,67,77,54,27,69,25,39,51,47,56,66,57,15,31,28,8,43,2,92,29,75,0,9,7,71,74,4,55,91,63,32,88,17,42,76,13,34,64,46,36,50,30,58,48,26,12,6,73,86,22,41,45,65,3,80,49,94,61,35,79,62,37,78,14,93,87,5,52,38,82,72,59,83,53,1,10,40,97,81,95,19,85,20,18,11,24,44,90,23,89]],[[16,29,18,27,44,35,42,31,9,12,47,13,3,34,37,20,45,33,30,49,48,46,43,5,1,28,2,26,23,19,21,7,40,32,39,41,14,0,38,25,6,8,22,36,10,11,15,24,4,17]],[[82,38,58,40,9,1,83,72,12,81,68,27,64,33,16,44,8,31,47,36,20,56,84,39,51,41,78,0,42,52,35,19,57,6,69,71,7,73,67,55,76,17,18,63,13,21,60,50,32,75,53,3,5,74,70,80,79,10,24,4,65,61,59,14,66,62,85,29,34,2,26,37,43,23,45,22,46,48,11,25,49,77,28,30,54,15]],[[13,45,71,52,79,19,30,20,22,82,3,77,42,76,31,34,78,85,48,4,60,28,25,72,58,29,74,80,62,50,55,14,54,1,73,12,63,21,17,66,47,59,41,32,49,70,67,57,7,16,11,36,2,6,27,35,23,43,10,68,61,40,75,56,18,51,8,38,26,0,69,5,15,39,83,53,9,81,44,64,33,46,84,65,37,24]],[[44,18,35,8,12,26,42,24,43,11,39,36,19,25,49,0,41,50,13,27,20,14,30,29,21,6,16,15,23,5,32,2,9,38,10,31,7,17,4,3,47,34,40,37,45,51,33,48,46,1,22,28]],[[51,15,9,41,44,0,57,48,55,49,6,54,27,14,11,59,33,29,3,35,62,7,46,8,60,47,56,20,28,32,63,37,10,23,38,43,50,40,24,42,36,26,16,34,25,22,39,2,61,45,4,5,12,18,1,21,31,30,17,53,13,58,52,19]],[[34,29,26,3,13,40,24,1,36,30,0,22,9,42,12,27,37,38,17,23,41,19,7,15,20,8,25,21,32,6,5,10,11,16,2,18,35,4,28,14,33,39,31]],[[54,17,59,23,6,33,48,41,27,58,75,43,76,35,53,32,10,60,2,78,65,22,14,72,4,49,80,64,70,1,15,12,68,39,9,52,8,30,42,7,36,13,29,16,79,66,71,37,19,63,50,34,18,21,51,28,61,77,55,45,26,20,44,3,82,31,67,11,46,25,69,5,57,62,47,0,56,81,38,40,74,24,73]],[[19,55,22,66,83,34,78,68,61,59,89,75,85,41,31,11,35,57,76,81,48,43,3,63,77,23,62,27,88,51,16,21,17,56,38,44,58,74,0,33,12,5,15,46,26,72,53,70,30,87,45,28,1,49,18,14,25,69,90,65,82,54,60,79,13,40,29,10,67,80,8,9,20,7,86,6,37,73,64,36,2,39,32,24,84,71,4,42,52,50,47]],[[11,5,9,0,22,17,4,8,1,21,24,27,23,15,3,13,26,18,19,7,10,12,28,20,14,2,16,25,29,6]],[[4,36,40,43,3,9,57,51,61,19,5,15,7,35,48,26,38,46,39,14,33,24,28,60,53,37,27,45,58,6,13,32,8,21,2,52,50,54,17,44,25,0,31,59,55,56,1,47,62,11,49,20,18,16,34,12,42,22,10,41,30,29,23]],[[19,34,18,9,7,21,39,72,36,56,15,59,38,51,81,64,63,73,10,5,65,27,47,20,70,16,1,66,14,43,74,37,62,48,53,17,52,2,11,30,33,41,28,60,44,69,61,31,55,49,22,26,67,42,77,3,68,29,13,32,75,79,12,76,50,54,45,25,4,35,80,6,8,0,23,78,46,40,71,57,58,82,24]],[[6,26,34,70,16,36,56,89,62,15,3,80,77,30,20,39,94,1,81,52,11,28,14,59,88,19,63,37,65,95,53,61,60,31,58,35,9,24,12,71,38,32,47,8,4,17,49,50,96,21,91,78,0,18,72,79,42,64,66,76,68,84,22,48,69,29,83,27,97,90,7,44,74,92,13,86,10,73,25,43,67,40,57,2,54,82,5,93,33,41,51,45,85,23,87,75,55,46]],[[50,16,21,39,44,25,41,5,58,43,34,24,20,40,45,31,60,2,57,4,15,18,14,53,27,6,35,28,10,19,33,0,1,32,55,30,9,11,23,13,54,7,59,52,37,42,51,26,49,56,12,3,46,38,17,36,8,47,22,29,48]],[[34,10,4,28,22,19,20,13,32,8,14,9,6,12,15,3,7,23,18,11,25,16,0,29,35,24,36,26,33,30,17,2,1,5,27,21,31]],[[84,17,80,12,86,5,39,56,4,74,46,16,11,37,41,53,22,25,75,76,64,34,21,32,58,52,60,30,51,18,47,55,66,62,7,29,78,9,48,14,43,67,69,35,23,81,44,0,68,65,61,71,42,38,24,73,3,54,36,15,82,19,85,10,40,28,20,2,79,49,13,59,70,26,33,50,45,1,63,27,77,8,31,6,72,57,83]],[[41,6,31,39,26,17,2,44,23,13,28,43,15,45,52,40,34,22,3,25,48,12,7,30,27,49,14,47,21,50,20,38,19,0,1,10,51,4,24,37,46,32,8,35,9,18,11,42,29,16,36,5,33,53]]],"test_outputs":[true,true,true,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],"language":"python"}
{"task_id":24,"prompt":"\ndef is_pangram(string: str) -> str:\n    \"\"\"Returns True if the string is a pangram, False otherwise.\n    A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence \"The quick brown fox jumps over the lazy dog\" is a pangram, because it uses the letters A-Z at least once (case is irrelevant).\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"The quick brown fox jumps over the lazy cat\")\n    False\n    >>> is_pangram(\"Glib jocks quiz nymph to vex dwarf.\")\n    True\n    \"\"\"\n","entry_point":"is_pangram","canonical_solution":"\ndef is_pangram(string: str) -> str:\n    \"\"\"Returns True if the string is a pangram, False otherwise.\n    A pangram is a sentence that contains every single letter of the alphabet at least once. For example, the sentence \"The quick brown fox jumps over the lazy dog\" is a pangram, because it uses the letters A-Z at least once (case is irrelevant).\n    >>> is_pangram(\"The quick brown fox jumps over the lazy dog\")\n    True\n    >>> is_pangram(\"The quick brown fox jumps over the lazy cat\")\n    False\n    >>> is_pangram(\"Glib jocks quiz nymph to vex dwarf.\")\n    True\n    \"\"\"\n# SOLUTION\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if char not in string.lower():\n            return False\n    return True\n\n","test":"tests","test_inputs":[["The quick brown fox jumps over the lazy dog"],["The quick brown fox jumps over the lazy cat"],["Glib jocks quiz nymph to vex dwarf."],["Glib jocks quiz nymph to vex dwar."],["abcdefghijklmnopqrstuvwxyz"],["abcdefghijklmnopqrstuvwxy"],["ABCDEFGHIJKLMNOPQRSTUVWXYZ"],["1234567890"],["1234567890 abcdefghijklmnopqrstuvwxyz"]],"test_outputs":[true,false,true,false,true,false,true,false,true],"language":"python"}
{"task_id":25,"prompt":"\ndef is_permutation(sequence: list, permutation: list) -> bool:\n    \"\"\"Check if a sequence is a permutation of another sequence.\n    >>> is_permutation([1, 2, 3], [3, 2, 1])\n    True\n    >>> is_permutation([1, 2, 3], [3, 2, 2])\n    False\n    >>> is_permutation([], [])\n    True\n    >>> is_permutation([1, 2, 3], [1, 2, 3, 4])\n    \"\"\"\n","entry_point":"is_permutation","canonical_solution":"\ndef is_permutation(sequence: list, permutation: list) -> bool:\n    \"\"\"Check if a sequence is a permutation of another sequence.\n    >>> is_permutation([1, 2, 3], [3, 2, 1])\n    True\n    >>> is_permutation([1, 2, 3], [3, 2, 2])\n    False\n    >>> is_permutation([], [])\n    True\n    >>> is_permutation([1, 2, 3], [1, 2, 3, 4])\n    \"\"\"\n# SOLUTION\n    return sorted(sequence) == sorted(permutation)\n","test":"tests","test_inputs":[[[1,2,3],[3,2,1]],[[1,2,3],[3,2,2]],[[],[]],[[1,2,3],[1,2,3,4]],[[2,1,2],[2,2,1]]],"test_outputs":[true,false,true,false,true],"language":"python"}
{"task_id":26,"prompt":"\ndef is_straight(cards: str) -> bool:\n    \"\"\"Return True if the cards form a straight.\n    In poker, a straight is a hand that contains five cards of sequential rank,\n    not all of the same suit. The ranks are A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K.\n    The input string will include the ranks of five cards, separated by spaces.\n    >>> is_straight('A 2 3 4 5')\n    True\n    >>> is_straight('10 J Q K A')\n    True\n    >>> is_straight('2 7 8 5 10')\n    False\n    >>> is_straight('5 A 3 4 2')\n    True\n    \"\"\"\n","entry_point":"is_straight","canonical_solution":"\ndef is_straight(cards: str) -> bool:\n    \"\"\"Return True if the cards form a straight.\n    In poker, a straight is a hand that contains five cards of sequential rank,\n    not all of the same suit. The ranks are A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K.\n    The input string will include the ranks of five cards, separated by spaces.\n    >>> is_straight('A 2 3 4 5')\n    True\n    >>> is_straight('10 J Q K A')\n    True\n    >>> is_straight('2 7 8 5 10')\n    False\n    >>> is_straight('5 A 3 4 2')\n    True\n    \"\"\"\n# SOLUTION\n    ranks = 'A 2 3 4 5 6 7 8 9 10 J Q K'.split()\n    nums = sorted([ranks.index(card) for card in cards.split()])\n \n    if nums == [0, 9, 10, 11, 12]:\n        return True\n\n    return nums[-1] - nums[0] == 4\n\n","test":"tests","test_inputs":[["A 2 3 4 5"],["10 J Q K A"],["2 7 8 5 10"],["5 A 3 4 2"],["A 2 3 4 6"],["A 2 3 4 10"]],"test_outputs":[true,true,false,true,false,false],"language":"python"}
{"task_id":27,"prompt":"\ndef is_titlecase(string: str) -> bool:\n    \"\"\"Return True if the string is titlecase.\n    A string is titlecase if it is nonempty and only contains words that are\n    capitalized at the beginning and lowercase elsewhere.\n    >>> is_titlecase('Python Is Good')\n    True\n    >>> is_titlecase('Python is Good')\n    False\n    >>> is_titlecase('12 Angry Men')\n    True\n    \"\"\"\n","entry_point":"is_titlecase","canonical_solution":"\ndef is_titlecase(string: str) -> bool:\n    \"\"\"Return True if the string is titlecase.\n    A string is titlecase if it is nonempty and only contains words that are\n    capitalized at the beginning and lowercase elsewhere.\n    >>> is_titlecase('Python Is Good')\n    True\n    >>> is_titlecase('Python is Good')\n    False\n    >>> is_titlecase('12 Angry Men')\n    True\n    \"\"\"\n# SOLUTION\n    return string.istitle()\n","test":"tests","test_inputs":[["Python Is Good"],["Python is Good"],["12 Angry Men"],["foobar"],[""],[" "],["A"]],"test_outputs":[true,false,true,false,false,false,true],"language":"python"}
{"task_id":28,"prompt":"\nimport math\n\ndef least_common_multiple(a, b):\n    \"\"\"Return the least common multiple of a and b.\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(4, 6)\n    12\n    >>> least_common_multiple(0, 5)\n    0\n    \"\"\"\n","entry_point":"least_common_multiple","canonical_solution":"\nimport math\n\ndef least_common_multiple(a, b):\n    \"\"\"Return the least common multiple of a and b.\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(4, 6)\n    12\n    >>> least_common_multiple(0, 5)\n    0\n    \"\"\"\n# SOLUTION\n    return math.lcm(a, b)\n","test":"tests","test_inputs":[[3,5],[4,6],[0,5],[82,15],[4,95],[36,32],[29,18],[95,14],[87,95],[70,12],[76,55],[5,4],[12,28],[30,65],[78,4],[72,26],[92,84],[90,70],[54,29],[58,76],[36,1],[98,21],[90,55]],"test_outputs":[15,12,0,1230,380,288,522,1330,8265,420,4180,20,84,390,156,936,1932,630,1566,2204,36,294,990],"language":"python"}
{"task_id":29,"prompt":"\ndef lcm(numbers: list[int]) -> int:\n    \"\"\"Return the least common multiple of the given numbers.\n    >>> lcm([3, 4])\n    12\n    >>> lcm([3, 4, 5])\n    60\n    >>> lcm([17])\n    17\n    \"\"\"\n","entry_point":"lcm","canonical_solution":"\ndef lcm(numbers: list[int]) -> int:\n    \"\"\"Return the least common multiple of the given numbers.\n    >>> lcm([3, 4])\n    12\n    >>> lcm([3, 4, 5])\n    60\n    >>> lcm([17])\n    17\n    \"\"\"\n# SOLUTION\n    import math\n    from functools import reduce\n    return reduce(math.lcm, numbers)\n","test":"tests","test_inputs":[[[3,4]],[[3,4,5]],[[17]],[[4,95]],[[32,29,18,95,14]],[[12,76,55,5,4,12,28,30,65]],[[4,72,26,92,84,90,70,54,29,58]],[[36,1,98,21,90,55,44,36,20,28]],[[14,12,49,13,46,45]],[[34,6,94,59,69,16,49,11,71,38]],[[47,74,25,91,9,6,85,30,99,38]],[[30,13]],[[36,59,82,47,21,48,46]],[[86,35,90,88]],[[78,82]],[[69,94,32]],[[60,49,35]],[[29,88,42,99,100,8,30,5,41]],[[35,9,28,73,92,41,28]],[[51,83,59,19,34,18,32,96]],[[69,34,96,75,55,75,52,47,29]],[[66,64,12]],[[15]]],"test_outputs":[12,60,17,380,5554080,1141140,65552760,97020,2637180,37841520574704,253016413650,390,2635858512,1191960,3198,103776,2940,164795400,86737140,455538528,182902605600,2112,15],"language":"python"}
{"task_id":30,"prompt":"\ndef leap_year(year: int) -> bool:\n    \"\"\"Return True if year is a leap year, False otherwise.\n    A leap year is a year that is evenly divisible by 4, except for\n    years that are divisible by 100. The years that are divisible by\n    100 are leap years only if they are also divisible by 400.\n    >>> leap_year(2000)\n    True\n    >>> leap_year(2001)\n    False\n    >>> leap_year(1900)\n    False\n    \"\"\"\n","entry_point":"leap_year","canonical_solution":"\ndef leap_year(year: int) -> bool:\n    \"\"\"Return True if year is a leap year, False otherwise.\n    A leap year is a year that is evenly divisible by 4, except for\n    years that are divisible by 100. The years that are divisible by\n    100 are leap years only if they are also divisible by 400.\n    >>> leap_year(2000)\n    True\n    >>> leap_year(2001)\n    False\n    >>> leap_year(1900)\n    False\n    \"\"\"\n# SOLUTION\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n","test":"tests","test_inputs":[[2000],[2001],[1900],[2004],[0],[4],[100],[400]],"test_outputs":[true,false,false,true,true,true,false,true],"language":"python"}
{"task_id":31,"prompt":"\ndef longest_common_substring(string1: str, string2: str) -> str:\n    \"\"\"\n    Returns the longest common substring between string1 and string2.\n    >>> longest_common_substring(\"ABABC\", \"BABCA\")\n    \"BABC\"\n    >>> longest_common_substring(\"ABC\", \"DEF\")\n    \"\"\n    >>> longest_common_substring(\"ABC\", \"ABC\")\n    \"ABC\"\n    \"\"\"\n    # Create a 2D list to store the length of the longest common substring\n    # between string1 and string2\n","entry_point":"leap_year","canonical_solution":"\ndef longest_common_substring(string1: str, string2: str) -> str:\n    \"\"\"\n    Returns the longest common substring between string1 and string2.\n    >>> longest_common_substring(\"ABABC\", \"BABCA\")\n    \"BABC\"\n    >>> longest_common_substring(\"ABC\", \"DEF\")\n    \"\"\n    >>> longest_common_substring(\"ABC\", \"ABC\")\n    \"ABC\"\n    \"\"\"\n    # Create a 2D list to store the length of the longest common substring\n    # between string1 and string2\n# SOLUTION\n    dp = [[0 for _ in range(len(string2) + 1)] for _ in range(len(string1) + 1)]\n    max_length = 0\n    ending_index = 0\n    for i in range(1, len(string1) + 1):\n        for j in range(1, len(string2) + 1):\n            if string1[i - 1] == string2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    ending_index = i\n    return string1[ending_index - max_length:ending_index]\n\n","test":"tests","test_inputs":[["ABABC","BABCA"],["ABC","DEF"],["ABC","ABC"],["CBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBAFEFFFDFFDFFDDE","HHICBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBA"],["CBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBAFEFFFDFFDFFDDE","CBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBAFEFFFDFFDFFDDE"],["HHICBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBA",""],["CBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCAFEEDDEEDDDFDDFEDFDDFEFDEFFEDFFFDFEEFFEEFEDDDDEDFFDFDDDFFDDDDEDFDEFEDFDF","IIHGHHGGGIHHHHHIGIIIGGHIHGGGCBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCA"],["CBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCAFEEDDEEDDDFDDFEDFDDFEFDEFFEDFFFDFEEFFEEFEDDDDEDFFDFDDDFFDDDDEDFDEFEDFDF","CBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCAFEEDDEEDDDFDDFEDFDDFEFDEFFEDFFFDFEEFFEEFEDDDDEDFFDFDDDFFDDDDEDFDEFEDFDF"],["IIHGHHGGGIHHHHHIGIIIGGHIHGGGCBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCA",""],["ABABBAABCAACCAAAABBBABAAEDEEEEEFFFFFEDDEDDFFFDFEDDFEFFDDFDDDFDFDEDFDFFDFDEFFFFEEDFFEDEEDFFEE","HGGHIIGGIGIHGHGGHHGHIIHIIIGIIHIGGHGGIIGHHIGIHGIIHIHHGGIHHABABBAABCAACCAAAABBBABAA"],["ABABBAABCAACCAAAABBBABAAEDEEEEEFFFFFEDDEDDFFFDFEDDFEFFDDFDDDFDFDEDFDFFDFDEFFFFEEDFFEDEEDFFEE","ABABBAABCAACCAAAABBBABAAEDEEEEEFFFFFEDDEDDFFFDFEDDFEFFDDFDDDFDFDEDFDFFDFDEFFFFEEDFFEDEEDFFEE"],["HGGHIIGGIGIHGHGGHHGHIIHIIIGIIHIGGHGGIIGHHIGIHGIIHIHHGGIHHABABBAABCAACCAAAABBBABAA",""],["ACBAC","HIIHIGGGIGIGHIIGHGGHHGHGIGIGHIHIIGGGGHGGIHACBAC"],["ACBAC","ACBAC"],["HIIHIGGGIGIGHIIGHGGHHGHGIGIGHIHIIGGGGHGGIHACBAC",""],["CABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABBDEFFFEEEEFDFEFDFDEFFFFEDDFEDDDDDDEFDEEFFDFFEEEDDFFDD","HGGIIHGIGGHGHIIIIHHIIIHIHGIHHHGIHIHIGHHGIHGHHHIGGGGHIGIGGHHHIHHGGHHIIGIHHGHHHHIIIIIGHCABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABB"],["CABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABBDEFFFEEEEFDFEFDFDEFFFFEDDFEDDDDDDEFDEEFFDFFEEEDDFFDD","CABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABBDEFFFEEEEFDFEFDFDEFFFFEDDFEDDDDDDEFDEEFFDFFEEEDDFFDD"],["HGGIIHGIGGHGHIIIIHHIIIHIHGIHHHGIHIHIGHHGIHGHHHIGGGGHIGIGGHHHIHHGGHHIIGIHHGHHHHIIIIIGHCABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABB",""],["BABBCCBCABACCABCCCAACBABAABBEDEEEEEEEDEDFFDEDFDFDDDDDFDDDEFDFD","HIHHGIIIIGGHGIGHIIHHIGGIIIGGIHIIGIGHIHIHGIIHGHHGHHIHIGHBABBCCBCABACCABCCCAACBABAABB"],["BABBCCBCABACCABCCCAACBABAABBEDEEEEEEEDEDFFDEDFDFDDDDDFDDDEFDFD","BABBCCBCABACCABCCCAACBABAABBEDEEEEEEEDEDFFDEDFDFDDDDDFDDDEFDFD"],["HIHHGIIIIGGHGIGHIIHHIGGIIIGGIHIIGIGHIHIHGIIHGHHGHHIHIGHBABBCCBCABACCABCCCAACBABAABB",""],["CBCCBBBCCBBAABBABCCCBBDEEDEDEEEEFFEFDFDDDFEEFDFEFFEEDDEDEFDEFFEEFFEEFFEEFEEEEDDFDEDFFFDDDFEEFFFFEDDEDEDEDFFDEDDFEFD","IHGGIHHHHHGGHHGGHHGIIIGGGIHGGGIHIIIGIHHHHIHHIIGIIGGIGHIGGGGIGGGHHICBCCBBBCCBBAABBABCCCBB"],["CBCCBBBCCBBAABBABCCCBBDEEDEDEEEEFFEFDFDDDFEEFDFEFFEEDDEDEFDEFFEEFFEEFFEEFEEEEDDFDEDFFFDDDFEEFFFFEDDEDEDEDFFDEDDFEFD","CBCCBBBCCBBAABBABCCCBBDEEDEDEEEEFFEFDFDDDFEEFDFEFFEEDDEDEFDEFFEEFFEEFFEEFEEEEDDFDEDFFFDDDFEEFFFFEDDEDEDEDFFDEDDFEFD"],["IHGGIHHHHHGGHHGGHHGIIIGGGIHGGGIHIIIGIHHHHIHHIIGIIGGIGHIGGGGIGGGHHICBCCBBBCCBBAABBABCCCBB",""],["AABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABBEEEFDDEEFEEFEFDEDEEEDEFDFFEEDDFEFEFEDDEFDEEFEDDFFDFDEFDFEDDD","HGIGHIHIIHHHHGHIGHGIIIGGHHHIHGHIHIIIHAABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABB"],["AABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABBEEEFDDEEFEEFEFDEDEEEDEFDFFEEDDFEFEFEDDEFDEEFEDDFFDFDEFDFEDDD","AABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABBEEEFDDEEFEEFEFDEDEEEDEFDFFEEDDFEFEFEDDEFDEEFEDDFFDFDEFDFEDDD"],["HGIGHIHIIHHHHGHIGHGIIIGGHHHIHGHIHIIIHAABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABB",""],["BBBCCBBBACACBABABCBFEEFFDEDDFFEDEDFEDFDEFDDEEEFFEFDEFFEEFFEFDFDDFFEDFDEDFFDE","GIHGGHGHHHHGGIHIIGGGGIHIIGHIGGHIHHHIGHHIIGGHHIHIHIHHHGHHGGHIHIHIHGIHBBBCCBBBACACBABABCB"],["BBBCCBBBACACBABABCBFEEFFDEDDFFEDEDFEDFDEFDDEEEFFEFDEFFEEFFEFDFDDFFEDFDEDFFDE","BBBCCBBBACACBABABCBFEEFFDEDDFFEDEDFEDFDEFDDEEEFFEFDEFFEEFFEFDFDDFFEDFDEDFFDE"],["GIHGGHGHHHHGGIHIIGGGGIHIIGHIGGHIHHHIGHHIIGGHHIHIHIHHHGHHGGHIHIHIHGIHBBBCCBBBACACBABABCB",""],["CCACCBBACBACACBCCCCACACCABBACBCAABBF","HGGGIHIIHGHHHIHGHGGGIIIHIHGHGHIGHHIIIHIHIHGIGHGIIHIGIGIHIHIHGGGGHHGGGIGHCCACCBBACBACACBCCCCACACCABBACBCAABB"],["CCACCBBACBACACBCCCCACACCABBACBCAABBF","CCACCBBACBACACBCCCCACACCABBACBCAABBF"],["HGGGIHIIHGHHHIHGHGGGIIIHIHGHGHIGHHIIIHIHIHGIGHGIIHIGIGIHIHIHGGGGHHGGGIGHCCACCBBACBACACBCCCCACACCABBACBCAABB",""],["CCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACAEDDFEDDFDDDEDFEDDEDDFEFDFDEEEFFDEFDFDFFFEEFDDEE","HIGHIHGGHIGGGHIIIIIHHIIHHIIHGIGIIIIGHHGHHHHHIGHHHIHHGIHGGGGHGIIHGIGIIIHIGHHIHIGHIHHGICCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACA"],["CCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACAEDDFEDDFDDDEDFEDDEDDFEFDFDEEEFFDEFDFDFFFEEFDDEE","CCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACAEDDFEDDFDDDEDFEDDEDDFEFDFDEEEFFDEFDFDFFFEEFDDEE"],["HIGHIHGGHIGGGHIIIIIHHIIHHIIHGIGIIIIGHHGHHHHHIGHHHIHHGIHGGGGHGIIHGIGIIIHIGHHIHIGHIHHGICCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACA",""],["CBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACAEEFEEFEEEDFDEEDEFFFEFFEDDEF","GGGHGGHHHGGHIHGGHIICBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACA"],["CBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACAEEFEEFEEEDFDEEDEFFFEFFEDDEF","CBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACAEEFEEFEEEDFDEEDEFFFEFFEDDEF"],["GGGHGGHHHGGHIHGGHIICBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACA",""],["CBABCABABABCBCBCCBBABABACBCBAEDDEFEFDEEFEDEDDFFDFFDEEFFDDDDEDDFDFDDFEEFFEFFFFFEFEDEDEEFEEFDEF","GHHHGGHHGIGIIIHHIIIGHIIGHIHIGGHGHIGIIGGGIHHIIIGHHHHHHIIGIIHGHGIIHHHIIIGCBABCABABABCBCBCCBBABABACBCBA"],["CBABCABABABCBCBCCBBABABACBCBAEDDEFEFDEEFEDEDDFFDFFDEEFFDDDDEDDFDFDDFEEFFEFFFFFEFEDEDEEFEEFDEF","CBABCABABABCBCBCCBBABABACBCBAEDDEFEFDEEFEDEDDFFDFFDEEFFDDDDEDDFDFDDFEEFFEFFFFFEFEDEDEEFEEFDEF"],["GHHHGGHHGIGIIIHHIIIGHIIGHIHIGGHGHIGIIGGGIHHIIIGHHHHHHIIGIIHGHGIIHHHIIIGCBABCABABABCBCBCCBBABABACBCBA",""],["CABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAABDFFFFDFEFD","IHGGGIIGIHGHHIIGHIHIHGIGHHGHIIHHHHIIHGGIGHGIHHIGIIGHGGHHIGHGGHHGHGHIHGHGHGCABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAAB"],["CABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAABDFFFFDFEFD","CABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAABDFFFFDFEFD"],["IHGGGIIGIHGHHIIGHIHIHGIGHHGHIIHHHHIIHGGIGHGIHHIGIIGHGGHHIGHGGHHGHGHIHGHGHGCABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAAB",""],["CCBDDDEEFDFEEFDDDEDDFFFFEDEDEDDDEFFEDDEFFDF","IIGIGHHGIHGICCB"],["CCBDDDEEFDFEEFDDDEDDFFFFEDEDEDDDEFFEDDEFFDF","CCBDDDEEFDFEEFDDDEDDFFFFEDEDEDDDEFFEDDEFFDF"],["IIGIGHHGIHGICCB",""],["CACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAADEEFEFEEDFDEEDFEEDEEEFE","HHGHIHHIHGIHGHIGIHHGGHIHHHIIHGIHHHGIHIHHIGGIIHHIIIGGGIIHGGGGIHHHIGIGIHHHHGIGIHHHIHGGGCACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAA"],["CACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAADEEFEFEEDFDEEDFEEDEEEFE","CACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAADEEFEFEEDFDEEDFEEDEEEFE"],["HHGHIHHIHGIHGHIGIHHGGHIHHHIIHGIHHHGIHIHHIGGIIHHIIIGGGIIHGGGGIHHHIGIGIHHHHGIGIHHHIHGGGCACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAA",""],["CBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCAEFEDEDFFEDFEFFDFFDFFDDF","IIIHIGGGGIIHIGIHIIGHIIHIHHGIHHHGIGGHHHHGHIGHIHIHHGHIIGHGHGHHGGGCBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCA"],["CBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCAEFEDEDFFEDFEFFDFFDFFDDF","CBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCAEFEDEDFFEDFEFFDFFDFFDDF"],["IIIHIGGGGIIHIGIHIIGHIIHIHHGIHHHGIGGHHHHGHIGHIHIHHGHIIGHGHGHHGGGCBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCA",""],["CBAABCFEDDEFEEEEDDEFEDDFEDDEEFFFEEFDDEDEFEE","HGHGIIGHIHGHIHIHIIIGGGHHHIHGGIIHIGGGGIHHIHGIIGHIHCBAABC"],["CBAABCFEDDEFEEEEDDEFEDDFEDDEEFFFEEFDDEDEFEE","CBAABCFEDDEFEEEEDDEFEDDFEDDEEFFFEEFDDEDEFEE"],["HGHGIIGHIHGHIHIHIIIGGGHHHIHGGIIHIGGGGIHHIHGIIGHIHCBAABC",""],["CBCBCCCBCCBBABBCABCBFFFDFEEFFFDFDFEDFFFFEDFDDFFDDDEEEDEFDEFFEFFDFDFDFE","IHIHHGHIHIHIIIIIHIHGGHIHGHHIGIIHHHHIIHHGIIIHHHGHGHIGHHIHIHGGIHIIHGGIIIGGGIIGIGCBCBCCCBCCBBABBCABCB"],["CBCBCCCBCCBBABBCABCBFFFDFEEFFFDFDFEDFFFFEDFDDFFDDDEEEDEFDEFFEFFDFDFDFE","CBCBCCCBCCBBABBCABCBFFFDFEEFFFDFDFEDFFFFEDFDDFFDDDEEEDEFDEFFEFFDFDFDFE"],["IHIHHGHIHIHIIIIIHIHGGHIHGHHIGIIHHHHIIHHGIIIHHHGHGHIGHHIHIHGGIHIIHGGIIIGGGIIGIGCBCBCCCBCCBBABBCABCB",""],["BCBACADFDEFEEFDEEE","IGGIIGIIIGGHGGHHGIHGGHIIGHHHIIIHGIHHGGHGIHIHIGGIHHIIBCBACA"],["BCBACADFDEFEEFDEEE","BCBACADFDEFEEFDEEE"],["IGGIIGIIIGGHGGHHGIHGGHIIGHHHIIIHGIHHGGHGIHIHIGGIHHIIBCBACA",""]],"test_outputs":["BABC","","ABC","CBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBA","CBAAACACCCACBAAAAACCACACCCCBABCBAACBBBAABAABABBCBACBCABACBCCBCACAACABAAABBBCBABBAFEFFFDFFDFFDDE","","CBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCA","CBAAABBBAACCBACBBCBABAACCCBCCBCBBAACBAAAACACBCABBCBCBCACCACCBCBABBABACCBCACACBCCCAABACCAFEEDDEEDDDFDDFEDFDDFEFDEFFEDFFFDFEEFFEEFEDDDDEDFFDFDDDFFDDDDEDFDEFEDFDF","","ABABBAABCAACCAAAABBBABAA","ABABBAABCAACCAAAABBBABAAEDEEEEEFFFFFEDDEDDFFFDFEDDFEFFDDFDDDFDFDEDFDFFDFDEFFFFEEDFFEDEEDFFEE","","ACBAC","ACBAC","","CABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABB","CABACABABAABBBAAACABBBABBCCBCCBAABACBAACBBCBBCCABCABACBACCCCCCCABBACBCBCACBCBCBBBCBCAABCBCCACCBBCABBDEFFFEEEEFDFEFDFDEFFFFEDDFEDDDDDDEFDEEFFDFFEEEDDFFDD","","BABBCCBCABACCABCCCAACBABAABB","BABBCCBCABACCABCCCAACBABAABBEDEEEEEEEDEDFFDEDFDFDDDDDFDDDEFDFD","","CBCCBBBCCBBAABBABCCCBB","CBCCBBBCCBBAABBABCCCBBDEEDEDEEEEFFEFDFDDDFEEFDFEFFEEDDEDEFDEFFEEFFEEFFEEFEEEEDDFDEDFFFDDDFEEFFFFEDDEDEDEDFFDEDDFEFD","","AABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABB","AABCBCBACABCCCABACACABAAAABCCCBBABCBCBBCCBBACABCBCBAAACCCACBCAABCCBBACBCBABBEEEFDDEEFEEFEFDEDEEEDEFDFFEEDDFEFEFEDDEFDEEFEDDFFDFDEFDFEDDD","","BBBCCBBBACACBABABCB","BBBCCBBBACACBABABCBFEEFFDEDDFFEDEDFEDFDEFDDEEEFFEFDEFFEEFFEFDFDDFFEDFDEDFFDE","","CCACCBBACBACACBCCCCACACCABBACBCAABB","CCACCBBACBACACBCCCCACACCABBACBCAABBF","","CCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACA","CCCBCCCABCABCBBACBABBABACBCCBABBAABACACCCAABAACAACACAABACAEDDFEDDFDDDEDFEDDEDDFEFDFDEEEFFDEFDFDFFFEEFDDEE","","CBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACA","CBAABCBABCABCCCCCCACCCBAABCBBBAAACCBAACCAACCABBBBABBCBCCAAAACACAEEFEEFEEEDFDEEDEFFFEFFEDDEF","","CBABCABABABCBCBCCBBABABACBCBA","CBABCABABABCBCBCCBBABABACBCBAEDDEFEFDEEFEDEDDFFDFFDEEFFDDDDEDDFDFDDFEEFFEFFFFFEFEDEDEEFEEFDEF","","CABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAAB","CABBCCCBACCABCBCBACCCCCACCBCBABBAABBAAAAABDFFFFDFEFD","","CCB","CCBDDDEEFDFEEFDDDEDDFFFFEDEDEDDDEFFEDDEFFDF","","CACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAA","CACBACCCCCABBACBBBCABABACCCACCBAABCBCACBCBCAAACBABAAADEEFEFEEDFDEEDFEEDEEEFE","","CBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCA","CBCABBCBACBCBAAAABACBACBCBCACCBBACCCCABCAAAAABABCCBBCACAABBCCBCBBCAABCABBCCBACCCAABCAACABAABCAEFEDEDFFEDFEFFDFFDFFDDF","","CBAABC","CBAABCFEDDEFEEEEDDEFEDDFEDDEEFFFEEFDDEDEFEE","","CBCBCCCBCCBBABBCABCB","CBCBCCCBCCBBABBCABCBFFFDFEEFFFDFDFEDFFFFEDFDDFFDDDEEEDEFDEFFEFFDFDFDFE","","BCBACA","BCBACADFDEFEEFDEEE",""],"language":"python"}
{"task_id":32,"prompt":"\ndef look_say(n: int) -> int:\n    \"\"\"Return the nth term of the look-and-say sequence.\n    The look-and-say sequence is generated by reading the previous term and counting the number of digits of the same kind.\n    >>> look_say(1)\n    1\n    >>> look_say(2)\n    11\n    >>> [look_say(n) for n in range(1, 6)]\n    [1, 11, 21, 1211, 111221]\n    \"\"\"\n","entry_point":"look_say","canonical_solution":[1,11,21,1211,111221,312211,13112221,1113213211,31131211131221,13211311123113112211,11131221133112132113212221,3113112221232112111312211312113211,1321132132111213122112311311222113111221131221,11131221131211131231121113112221121321132132211331222113112211,311311222113111231131112132112311321322112111312211312111322212311322113212221],"test":"tests","test_inputs":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"test_outputs":[1,11,21,1211,111221,312211,13112221,1113213211,31131211131221,13211311123113112211,11131221133112132113212221,3113112221232112111312211312113211,1321132132111213122112311311222113111221131221,11131221131211131231121113112221121321132132211331222113112211,311311222113111231131112132112311321322112111312211312111322212311322113212221],"language":"python"}
{"task_id":33,"prompt":"\ndef pascals_triangle_row(n: int) -> list[int]:\n    \"\"\"Return the nth row of Pascal's triangle.\n    >>> pascals_triangle_row(0)\n    [1]\n    >>> pascals_triangle_row(1)\n    [1, 1]\n    >>> pascals_triangle_row(5)\n    [1, 5, 10, 10, 5, 1]\n    \"\"\"\n","entry_point":"pascals_triangle_row","canonical_solution":"\ndef pascals_triangle_row(n: int) -> list[int]:\n    \"\"\"Return the nth row of Pascal's triangle.\n    >>> pascals_triangle_row(0)\n    [1]\n    >>> pascals_triangle_row(1)\n    [1, 1]\n    >>> pascals_triangle_row(5)\n    [1, 5, 10, 10, 5, 1]\n    \"\"\"\n# SOLUTION\n    row = [1]\n    for _ in range(n):\n        new_row = []\n        for a, b in zip([0] + row, row + [0]):\n            new_row.append(a + b)\n        row = new_row\n    return row\n\n","test":"tests","test_inputs":[[0],[1],[2],[5],[7],[10]],"test_outputs":[[1],[1,1],[1,2,1],[1,5,10,10,5,1],[1,7,21,35,35,21,7,1],[1,10,45,120,210,252,210,120,45,10,1]],"language":"python"}
{"task_id":34,"prompt":"\ndef is_permutation(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if the given matrix is a permutation matrix.\n    A square matrix is a permutation matrix if it contains only 0s and 1s, and if\n    each row and each column contains exactly one 1.\n    >>> is_permutation([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\n    True\n    >>> is_permutation([[0, 1, 0], [1, 0, 0], [0, 1, 0]])\n    False\n    >>> is_permutation([1, 0], [0, 1])\n    True\n    >>> is_permutation([[2, 0], [0, 3]])\n    False\n    \"\"\"\n","entry_point":"is_permutation","canonical_solution":"\ndef is_permutation(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if the given matrix is a permutation matrix.\n    A square matrix is a permutation matrix if it contains only 0s and 1s, and if\n    each row and each column contains exactly one 1.\n    >>> is_permutation([[0, 1, 0], [1, 0, 0], [0, 0, 1]])\n    True\n    >>> is_permutation([[0, 1, 0], [1, 0, 0], [0, 1, 0]])\n    False\n    >>> is_permutation([1, 0], [0, 1])\n    True\n    >>> is_permutation([[2, 0], [0, 3]])\n    False\n    \"\"\"\n# SOLUTION\n    n = len(matrix)\n    for i in range(n):\n        if not all(matrix[i][j] in (0, 1) for j in range(n)):\n            return False\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if row_sum != 1 or col_sum != 1:\n            return False\n    return True\n\n","test":"tests","test_inputs":[[[[0,1,0],[1,0,0],[0,0,1]]],[[[0,1,0],[1,0,0],[0,1,0]]],[[[1,0],[0,1]]],[[[2,0],[0,3]]],[[[1,0,0],[0,1,0],[0,0,1]]],[[[1,0,0],[0,1,0],[0,1,1]]],[[[1,0,0],[0,1,0],[0,0,0]]],[[[1]]],[[[0]]]],"test_outputs":[true,false,true,false,true,false,false,true,false],"language":"python"}
{"task_id":35,"prompt":"\ndef is_pseudopalindrome(sequence: str) -> bool:\n    \"\"\"Check if a nucleotide sequence is a pseudopalindrome.\n    A pseudopalindrome is a sequence that is equal to its reverse\n    complement.\n    >>> is_pseudopalindrome(\"GGTAATTACC\")\n    True\n    >>> is_pseudopalindrome(\"ATGCGCATG\")\n    False\n    >>> is_pseudopalindrome(\"GATTACA\")\n    False\n    \"\"\"\n","entry_point":"is_pseudopalindrome","canonical_solution":"\ndef is_pseudopalindrome(sequence: str) -> bool:\n    \"\"\"Check if a nucleotide sequence is a pseudopalindrome.\n    A pseudopalindrome is a sequence that is equal to its reverse\n    complement.\n    >>> is_pseudopalindrome(\"GGTAATTACC\")\n    True\n    >>> is_pseudopalindrome(\"ATGCGCATG\")\n    False\n    >>> is_pseudopalindrome(\"GATTACA\")\n    False\n    \"\"\"\n# SOLUTION\n    complement = {\"A\": \"T\", \"C\": \"G\", \"G\": \"C\", \"T\": \"A\"}\n    complement_sequence = \"\".join(complement[base] for base in sequence)\n    return sequence == complement_sequence[::-1]\n","test":"tests","test_inputs":[["ATGCGCAT"],["ATGCGCATG"],["ATGCGCATGC"],["CCATTAATGG"],["GATTACA"],["GGTAATTACC"]],"test_outputs":[true,false,false,true,false,true],"language":"python"}
{"task_id":36,"prompt":"\nQuaternion = tuple[float, float, float, float]\ndef multiply_quaternion(q1: Quaternion, q2: Quaternion) -> Quaternion:\n    \"\"\"Multiply two quaternions.\n    >>> multiply_quaternion((1, 2, 3, 4), (5, 6, 7, 8))\n    (-60.0, 12.0, 30.0, 24.0)\n    \"\"\"\n","entry_point":"multiply_quaternion","canonical_solution":"\nQuaternion = tuple[float, float, float, float]\ndef multiply_quaternion(q1: Quaternion, q2: Quaternion) -> Quaternion:\n    \"\"\"Multiply two quaternions.\n    >>> multiply_quaternion((1, 2, 3, 4), (5, 6, 7, 8))\n    (-60.0, 12.0, 30.0, 24.0)\n    \"\"\"\n# SOLUTION\n    w1, x1, y1, z1 = q1\n    w2, x2, y2, z2 = q2\n    return (w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n            w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n            w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,\n            w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2)\n","test":"tests","test_inputs":[[[1,2,3,4],[5,6,7,8]],[[10,-7,-10,-2],[-3,-3,-6,-7]],[[7,-8,8,3],[-9,-10,-8,-4]],[[-3,6,9,-10],[7,-4,10,7]],[[3,-3,4,8],[-2,-10,-5,3]],[[0,-2,-6,-4],[0,-7,-8,2]],[[-7,1,1,9],[-2,-9,4,7]],[[-7,2,-8,7],[-1,10,9,1]],[[8,-4,-8,-9],[-3,-1,-8,-3]],[[-7,2,-2,4],[10,1,-5,1]],[[1,-4,-2,10],[-8,9,10,-5]]],"test_outputs":[[-60,12,30,24],[-125,49,-73,-52],[-67,-6,-190,89],[-17,217,31,5],[-40,28,-94,48],[-54,-44,32,-26],[-44,32,-118,-54],[52,-143,13,84],[-119,-44,-43,27],[-86,31,17,25],[98,-49,96,-107]],"language":"python"}
{"task_id":37,"prompt":"\ndef remove_most_common(nums: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, remove the most common integer from the list.\n    If there are multiple integers that appear the same number of times,\n    remove the one with the smallest integer value.\n    >>> remove_most_common([1, 2, 3, 4, 5, 5, 5, 5, 5])\n    [1, 2, 3, 4]\n    >>> remove_most_common([])\n    []\n    >>> remove_most_common([1, 1, 1, 1, 1, 1, 1, 1, 1])\n    []\n    >>> remove_most_common([2, 2, 2, 1, 1, 1, 3])\n    [2, 2, 2, 3]\n    \"\"\"\n","entry_point":"remove_most_common","canonical_solution":"\ndef remove_most_common(nums: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, remove the most common integer from the list.\n    If there are multiple integers that appear the same number of times,\n    remove the one with the smallest integer value.\n    >>> remove_most_common([1, 2, 3, 4, 5, 5, 5, 5, 5])\n    [1, 2, 3, 4]\n    >>> remove_most_common([])\n    []\n    >>> remove_most_common([1, 1, 1, 1, 1, 1, 1, 1, 1])\n    []\n    >>> remove_most_common([2, 2, 2, 1, 1, 1, 3])\n    [2, 2, 2, 3]\n    \"\"\"\n# SOLUTION\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    sorted_counts = sorted(counts.items(), key=lambda x: (-x[1], x[0]))\n    return [num for num in nums if num != sorted_counts[0][0]]\n\n","test":"tests","test_inputs":[[[1,2,3,4,5,5,5,5,5]],[[]],[[1,1,1,1,1,1,1,1,1]],[[2,2,2,1,1,1,3]],[[1,2,3]],[[1,2,3,1,2,3]]],"test_outputs":[[1,2,3,4],[],[],[2,2,2,3],[2,3],[2,3,2,3]],"language":"python"}
{"task_id":38,"prompt":"\ndef remove_prefix(string: str, prefix: str) -> str:\n\t\"\"\"If string has prefix, remove it\n\t>>> remove_prefix('hello', '')\n\thello\n\t>>> remove_prefix('DEBUG: Message', 'DEBUG: ')\n\tMessage\n\t>>> remove_prefix('\/path\/to\/file', '\/root')\n\t\/path\/to\/file\n\t\"\"\"\n","entry_point":"remove_prefix","canonical_solution":"\ndef remove_prefix(string: str, prefix: str) -> str:\n\t\"\"\"If string has prefix, remove it\n\t>>> remove_prefix('hello', '')\n\thello\n\t>>> remove_prefix('DEBUG: Message', 'DEBUG: ')\n\tMessage\n\t>>> remove_prefix('\/path\/to\/file', '\/root')\n\t\/path\/to\/file\n\t\"\"\"\n# SOLUTION\n\tif string.startswith(prefix):\n\t\tstring = string[len(prefix):]\n\treturn string\n","test":"tests","test_inputs":[["hello",""],["DEBUG: Message","DEBUG: "],["\/path\/to\/file","\/root"],["123456","123"],["    foobar","  "],["\/path\/to\/file","\/path\/to\/"],["DEBUG: Message","INFO:"],["e3 zvsh d] (b.S43brt#:3*p|@`(RsV.z0\rk`SHzjr\rHdbMcJI:x5~W'fMa)B=<K,o{85[t\u000bBatcMzW>K","e"],["LJq\\y`^?9:>l'~vkXMy>_","LJ"],["s^F\u000b\f7t4EPy8r+|Er@\"O?Wixhv\t*'x\t-S-PKsh$\"b\n6ej=k^S\/8NM\/X&w)1^}e^'\ny\u000b?HeBT","s^F"],["W0}}x#\rm#d=C>#:pjL\rk(","W0}}"],["&0\/F!2eKDu7u+aa~!8\r'\u000bgg[Y)lx&:Sr(\n~_p|DP\\@LU%Vfvs8H2.)t.s09{=7t84G9$uz\\!r(g},,YvYQocc[TJSQX~6]@?c7P~","&0\/F!"],["dvoo'VhSnzXv9U)c6@(1b\nulQ!ZrP7lM0NxWAS`~*[|!","dvoo'V"],["oBr7- (7\tE76-Z#&k7$a","oBr7- ("],["8\/8]uPf+v-\/5<aR[-+%Exq\\|","8\/8]uPf+"],["uxOg\\?CWE\n91W<+c9'r#xgI8vLAkU({C;@&1\\)C[d","uxOg\\?CWE"],["xed\t)jyA:q|Hq^>x#!","xed\t)jyA:q"],["6b>Sz50G\u000bg>xk U){S*1e9_j(4L-)iTg5","6b>Sz50G\u000bg>"],["K5Jq^v\\dJ\f*Q<\tjukmQ3m GQ\\ vyk`dM4YspWIDt","K5Jq^v\\dJ\f*Q"],["3[oPGz8\u000bzI?$P]'G3exm-x4d\/TI~E","3[oPGz8\u000bzI?$P"],[":$eN,ow5{T0%'^}  \\pKT8\\G<E[f}C#D\\QFP`B)goR\\M]\tm;+CP)0CAq",":$eN,ow5{T0%'^"],["-:@FXUU]r$Y l[aA$[><Gb\nu]Dspi35vY;\u000b9WR=,o|`N\"Pvi@_0\n\u000bd\fS","-:@FXUU]r$Y l[a"],["m`%X6*vfWhX\\&*\/E\nU;}#S)Vk\tYVx","m`%X6*vfWhX\\&*\/E"],["v>z\u000b\f%!=uzU9|AuyGE(ahjtN_j{r8RQG(XR7qRN\u000b-`2\r,MZ0JC\nNR'\t (:s!syT!3NH\\]P}lXg<'3O.+[3a?ShXn6xMFrWFH\r","v>z\u000b\f%!=uzU9|AuyG"],["z\nRwaY2\t(6Is@8\f@5\n3vp2<jugY\\e+rX`w\u000bLl::\t|e\fkDd-3D","z\nRwaY2\t(6Is@8\f@5\n"],["]MO|p9._=vd`\u000bC^\/f+5I'S[L8#?H1R!dTK>W{jTm~%@y;'\fZXT~.yFvbzVv\nX+;\\MH3\"Fn!rJx","]MO|p9._=vd`\u000bC^\/f+5"]],"test_outputs":["hello","Message","\/path\/to\/file","456","  foobar","file","DEBUG: Message","3 zvsh d] (b.S43brt#:3*p|@`(RsV.z0\rk`SHzjr\rHdbMcJI:x5~W'fMa)B=<K,o{85[t\u000bBatcMzW>K","q\\y`^?9:>l'~vkXMy>_","\u000b\f7t4EPy8r+|Er@\"O?Wixhv\t*'x\t-S-PKsh$\"b\n6ej=k^S\/8NM\/X&w)1^}e^'\ny\u000b?HeBT","x#\rm#d=C>#:pjL\rk(","2eKDu7u+aa~!8\r'\u000bgg[Y)lx&:Sr(\n~_p|DP\\@LU%Vfvs8H2.)t.s09{=7t84G9$uz\\!r(g},,YvYQocc[TJSQX~6]@?c7P~","hSnzXv9U)c6@(1b\nulQ!ZrP7lM0NxWAS`~*[|!","7\tE76-Z#&k7$a","v-\/5<aR[-+%Exq\\|","\n91W<+c9'r#xgI8vLAkU({C;@&1\\)C[d","|Hq^>x#!","xk U){S*1e9_j(4L-)iTg5","<\tjukmQ3m GQ\\ vyk`dM4YspWIDt","]'G3exm-x4d\/TI~E","}  \\pKT8\\G<E[f}C#D\\QFP`B)goR\\M]\tm;+CP)0CAq","A$[><Gb\nu]Dspi35vY;\u000b9WR=,o|`N\"Pvi@_0\n\u000bd\fS","\nU;}#S)Vk\tYVx","E(ahjtN_j{r8RQG(XR7qRN\u000b-`2\r,MZ0JC\nNR'\t (:s!syT!3NH\\]P}lXg<'3O.+[3a?ShXn6xMFrWFH\r","3vp2<jugY\\e+rX`w\u000bLl::\t|e\fkDd-3D","I'S[L8#?H1R!dTK>W{jTm~%@y;'\fZXT~.yFvbzVv\nX+;\\MH3\"Fn!rJx"],"language":"python"}
{"task_id":39,"prompt":"\ndef remove_suffix(string: str, suffix: str) -> str:\n\t\"\"\"If string has suffix, remove it\n\t>>> remove_suffix('foobar.txt', '.txt')\n\tfoobar\n\t>>> remove_suffix('Hello.', '.')\n\tHello\n\t>>> remove_suffix('\/path\/to\/file.txt', '.py')\n\t\/path\/to\/file.txt\n\t\"\"\"\n","entry_point":"remove_suffix","canonical_solution":"\ndef remove_suffix(string: str, suffix: str) -> str:\n\t\"\"\"If string has suffix, remove it\n\t>>> remove_suffix('foobar.txt', '.txt')\n\tfoobar\n\t>>> remove_suffix('Hello.', '.')\n\tHello\n\t>>> remove_suffix('\/path\/to\/file.txt', '.py')\n\t\/path\/to\/file.txt\n\t\"\"\"\n# SOLUTION\n\tif string.endswith(suffix) and suffix != '':\n\t\tstring = string[:-len(suffix)]\n\treturn string\n","test":"tests","test_inputs":[["foobar.txt",".txt"],["Hello.","."],["\/path\/to\/file.txt",".py"],["hello",""],["e3 zvsh d] (b.S43brt#:3*p|@`(RsV.z0\rk`SHzjr\rHdbMcJI:x5~W'fMa)B=<K,o{85[t\u000bBatcMzW>K","3 zvsh d] (b.S43brt#:3*p|@`(RsV.z0\rk`SHzjr\rHdbMcJI:x5~W'fMa)B=<K,o{85[t\u000bBatcMzW>K"],["LJq\\y`^?9:>l'~vkXMy>_","q\\y`^?9:>l'~vkXMy>_"],["s^F\u000b\f7t4EPy8r+|Er@\"O?Wixhv\t*'x\t-S-PKsh$\"b\n6ej=k^S\/8NM\/X&w)1^}e^'\ny\u000b?HeBT","\u000b\f7t4EPy8r+|Er@\"O?Wixhv\t*'x\t-S-PKsh$\"b\n6ej=k^S\/8NM\/X&w)1^}e^'\ny\u000b?HeBT"],["W0}}x#\rm#d=C>#:pjL\rk(","x#\rm#d=C>#:pjL\rk("],["&0\/F!2eKDu7u+aa~!8\r'\u000bgg[Y)lx&:Sr(\n~_p|DP\\@LU%Vfvs8H2.)t.s09{=7t84G9$uz\\!r(g},,YvYQocc[TJSQX~6]@?c7P~","2eKDu7u+aa~!8\r'\u000bgg[Y)lx&:Sr(\n~_p|DP\\@LU%Vfvs8H2.)t.s09{=7t84G9$uz\\!r(g},,YvYQocc[TJSQX~6]@?c7P~"],["dvoo'VhSnzXv9U)c6@(1b\nulQ!ZrP7lM0NxWAS`~*[|!","hSnzXv9U)c6@(1b\nulQ!ZrP7lM0NxWAS`~*[|!"],["oBr7- (7\tE76-Z#&k7$a","7\tE76-Z#&k7$a"],["8\/8]uPf+v-\/5<aR[-+%Exq\\|","v-\/5<aR[-+%Exq\\|"],["uxOg\\?CWE\n91W<+c9'r#xgI8vLAkU({C;@&1\\)C[d","\n91W<+c9'r#xgI8vLAkU({C;@&1\\)C[d"],["xed\t)jyA:q|Hq^>x#!","|Hq^>x#!"],["6b>Sz50G\u000bg>xk U){S*1e9_j(4L-)iTg5","xk U){S*1e9_j(4L-)iTg5"],["K5Jq^v\\dJ\f*Q<\tjukmQ3m GQ\\ vyk`dM4YspWIDt","<\tjukmQ3m GQ\\ vyk`dM4YspWIDt"],["3[oPGz8\u000bzI?$P]'G3exm-x4d\/TI~E","]'G3exm-x4d\/TI~E"],[":$eN,ow5{T0%'^}  \\pKT8\\G<E[f}C#D\\QFP`B)goR\\M]\tm;+CP)0CAq","}  \\pKT8\\G<E[f}C#D\\QFP`B)goR\\M]\tm;+CP)0CAq"],["-:@FXUU]r$Y l[aA$[><Gb\nu]Dspi35vY;\u000b9WR=,o|`N\"Pvi@_0\n\u000bd\fS","A$[><Gb\nu]Dspi35vY;\u000b9WR=,o|`N\"Pvi@_0\n\u000bd\fS"],["m`%X6*vfWhX\\&*\/E\nU;}#S)Vk\tYVx","\nU;}#S)Vk\tYVx"],["v>z\u000b\f%!=uzU9|AuyGE(ahjtN_j{r8RQG(XR7qRN\u000b-`2\r,MZ0JC\nNR'\t (:s!syT!3NH\\]P}lXg<'3O.+[3a?ShXn6xMFrWFH\r","E(ahjtN_j{r8RQG(XR7qRN\u000b-`2\r,MZ0JC\nNR'\t (:s!syT!3NH\\]P}lXg<'3O.+[3a?ShXn6xMFrWFH\r"],["z\nRwaY2\t(6Is@8\f@5\n3vp2<jugY\\e+rX`w\u000bLl::\t|e\fkDd-3D","3vp2<jugY\\e+rX`w\u000bLl::\t|e\fkDd-3D"],["]MO|p9._=vd`\u000bC^\/f+5I'S[L8#?H1R!dTK>W{jTm~%@y;'\fZXT~.yFvbzVv\nX+;\\MH3\"Fn!rJx","I'S[L8#?H1R!dTK>W{jTm~%@y;'\fZXT~.yFvbzVv\nX+;\\MH3\"Fn!rJx"]],"test_outputs":["foobar","Hello","\/path\/to\/file.txt","hello","e","LJ","s^F","W0}}","&0\/F!","dvoo'V","oBr7- (","8\/8]uPf+","uxOg\\?CWE","xed\t)jyA:q","6b>Sz50G\u000bg>","K5Jq^v\\dJ\f*Q","3[oPGz8\u000bzI?$P",":$eN,ow5{T0%'^","-:@FXUU]r$Y l[a","m`%X6*vfWhX\\&*\/E","v>z\u000b\f%!=uzU9|AuyG","z\nRwaY2\t(6Is@8\f@5\n","]MO|p9._=vd`\u000bC^\/f+5"],"language":"python"}
{"task_id":40,"prompt":"\ndef reverse_dict(d: dict) -> dict:\n    \"\"\"Return a new dictionary that is the reverse of d. \n    If d has multiple keys with the same value, the new dictionary will\n    have a list of keys as the value for each value in the original dictionary.\n    >>> reverse_dict({'a': 1, 'b': 2, 'c': 1})\n    {1: ['a', 'c'], 2: ['b']}\n    >>> reverse_dict({'a': 1, 'b': 2, 'c': 1, 'd': 2})\n    {1: ['a', 'c'], 2: ['b', 'd']}\n    >>> reverse_dict({})\n    {}\n    \"\"\"\n","entry_point":"reverse_dict","canonical_solution":"\ndef reverse_dict(d: dict) -> dict:\n    \"\"\"Return a new dictionary that is the reverse of d. \n    If d has multiple keys with the same value, the new dictionary will\n    have a list of keys as the value for each value in the original dictionary.\n    >>> reverse_dict({'a': 1, 'b': 2, 'c': 1})\n    {1: ['a', 'c'], 2: ['b']}\n    >>> reverse_dict({'a': 1, 'b': 2, 'c': 1, 'd': 2})\n    {1: ['a', 'c'], 2: ['b', 'd']}\n    >>> reverse_dict({})\n    {}\n    \"\"\"\n# SOLUTION\n    result = {}\n    for key in d:\n        value = d[key]\n        if value in result:\n            result[value].append(key)\n        else:\n            result[value] = [key]\n    return result\n","test":"tests","test_inputs":[[{"a":1,"b":2,"c":1}],[{"a":1,"b":2,"c":1,"d":2}],[{}],[{"a":1,"b":1,"c":1}],[{"a":1,"b":2,"c":3}]],"test_outputs":[{"1":["a","c"],"2":["b"]},{"1":["a","c"],"2":["b","d"]},{},{"1":["a","b","c"]},{"1":["a"],"2":["b"],"3":["c"]}],"language":"python"}
{"task_id":41,"prompt":"\ndef rpn_eval(expr: str) -> int:\n    \"\"\"Evaluate a reverse Polish notation expression.\n    >>> rpn_eval('3 4 +')\n    7\n    >>> rpn_eval('5 3 - 8 *')\n    16\n    >>> rpn_eval('1 2 3 * -')\n    -5\n    \"\"\"\n","entry_point":"rpn_eval","canonical_solution":"\ndef rpn_eval(expr: str) -> int:\n    \"\"\"Evaluate a reverse Polish notation expression.\n    >>> rpn_eval('3 4 +')\n    7\n    >>> rpn_eval('5 3 - 8 *')\n    16\n    >>> rpn_eval('1 2 3 * -')\n    -5\n    \"\"\"\n# SOLUTION\n    stack = []\n    for token in expr.split():\n        if token in '+-*\/':\n            b, a = stack.pop(), stack.pop()\n            stack.append(eval(f'{a}{token}{b}'))\n        else:\n            stack.append(int(token))\n    assert len(stack) == 1\n    return stack[0]\n","test":"tests","test_inputs":[["3 4 +"],["5 3 - 8 *"],["1 2 3 * -"],["1 2 3 * - 4 +"],["-1 -2 -3 * - 4 +"]],"test_outputs":[7,16,-5,-1,-3],"language":"python"}
{"task_id":1,"prompt":"\ndef run_length_encoding(data: list[int]) -> list[tuple[int, int]]:\n    \"\"\"Encode a list of numbers using run-length encoding.\n    Run-length encoding is a simple method for compressing data that contains long sequences of repeated values.\n    The basic idea is to represent the data as a list of tuples, where each tuple contains a value and the number of times it is repeated.\n    >>> run_length_encoding([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [(1, 10)]\n    >>> run_length_encoding([2, 2, 2, 3, 3, 3, 5, 5, 5, 5])\n    [(2, 3), (3, 3), (5, 4)]\n    >>> run_length_encoding([])\n    []\n    \"\"\"\n","entry_point":"run_length_encoding","canonical_solution":"\ndef run_length_encoding(data: list[int]) -> list[tuple[int, int]]:\n    \"\"\"Encode a list of numbers using run-length encoding.\n    Run-length encoding is a simple method for compressing data that contains long sequences of repeated values.\n    The basic idea is to represent the data as a list of tuples, where each tuple contains a value and the number of times it is repeated.\n    >>> run_length_encoding([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    [(1, 10)]\n    >>> run_length_encoding([2, 2, 2, 3, 3, 3, 5, 5, 5, 5])\n    [(2, 3), (3, 3), (5, 4)]\n    >>> run_length_encoding([])\n    []\n    \"\"\"\n# SOLUTION\n    if data == []:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(data)):\n        if data[i] == data[i - 1]:\n            count += 1\n        else:\n            result.append((data[i - 1], count))\n            count = 1\n    result.append((data[-1], count))\n    return result\n\n","test":"tests","test_inputs":[[[2,2,2,3,3,3,5,5,5,5]],[[1,2,3,4,5]],[[1,1,1,1,1,1,1,1,1,1]],[[]],[[1,1,2,2,3,3,4,4]],[[7,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,3,3,3,3,3]],[[2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,10,10,10]],[[2,2,6,6,6,6,6,6,6,6,9,9,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]],[[9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,5,9]],[[7,10,10,10,10,10,10,10,10]],[[4,4,4,4,4,4,2,2,2,2,10,10,10,10,4,4,4,9,9,9,9,9,9,9,9,2,2]],[[9,9,9,9,9,9,9,9,2,2,2,2,2,9,9,9,9,9,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4]],[[10,10,10,10,10,8,8,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,3,3,3,3,3,10,10,10,10,10,8,8]],[[3,3,3,1,1]],[[7,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5,4,4,4,4,10,10,10,10,10,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2]],[[6,6,6,6,4,5,5,4,4,4,4,4,4,3,3,3,3,3,3,7,2,2,2,4,10,10,10,10,10,10,10,10,10,10,10]],[[2,2,2,2]],[[10,10,7,7,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,8,8,8,8,1,9,9,9,9,9,9,9,10,10]],[[2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,3,9,9,9,9,9,9,9,9]],[[10,10]],[[4,4,4,4,4,6,6,6,6,6,6,6,6,10,10,10,4,3,3,3,6,6,6,6,6,6,6,6,6,5,5]],[[8,8,8,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,9,9,9,9,9,6,6,6,6,6,6,6,5,5,5,9,8,8,6,9,9,9,9,9]],[[4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5]],[[10,10,10,5,5,5,5,5,5,5,7,7,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]],[[1,1,1,8,8,5,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,1,1,1,1,1,1,1,1]]],"test_outputs":[[[2,3],[3,3],[5,4]],[[1,1],[2,1],[3,1],[4,1],[5,1]],[[1,10]],[],[[1,2],[2,2],[3,2],[4,2]],[[7,1],[5,9],[8,7],[5,8],[6,10],[4,9],[3,5]],[[2,10],[5,9],[10,3]],[[2,2],[6,8],[9,2],[6,17]],[[9,8],[8,9],[5,1],[9,1]],[[7,1],[10,8]],[[4,6],[2,4],[10,4],[4,3],[9,8],[2,2]],[[9,8],[2,5],[9,5],[2,9],[6,9],[4,10]],[[10,5],[8,2],[10,7],[6,10],[4,5],[3,5],[10,5],[8,2]],[[3,3],[1,2]],[[7,9],[5,9],[4,4],[10,12],[8,8],[6,12],[2,8]],[[6,4],[4,1],[5,2],[4,6],[3,6],[7,1],[2,3],[4,1],[10,11]],[[2,4]],[[10,2],[7,2],[6,2],[1,14],[3,2],[8,4],[1,1],[9,7],[10,2]],[[2,9],[6,7],[3,1],[9,8]],[[10,2]],[[4,5],[6,8],[10,3],[4,1],[3,3],[6,9],[5,2]],[[8,3],[1,8],[7,10],[9,5],[6,7],[5,3],[9,1],[8,2],[6,1],[9,5]],[[4,8],[6,10],[5,6]],[[10,3],[5,7],[7,2],[1,10],[4,6],[3,4],[4,8],[7,21]],[[1,3],[8,2],[5,3],[8,18],[10,1],[1,8]]],"language":"python"}
{"task_id":43,"prompt":"\nimport re\ndef same_matches(string: str, regex1: str, regex2: str) -> bool:\n\t\"\"\"Check if two regex produce the same matches in a given string\n\t>>> same_matches('hello', r'\\w', r'[a-z]')\n\tTrue\n\t>>> same_matches('123', r'\\d', r'\\D')\n\tFalse\n\t>>> same_matches('7890', r'..', r'\\d\\d')\n\tTrue\n\t>>> same_matches('Hi There', r'\\W', r'\\s')\n\tTrue\n\t\"\"\"\n","entry_point":"same_matches","canonical_solution":"\nimport re\ndef same_matches(string: str, regex1: str, regex2: str) -> bool:\n\t\"\"\"Check if two regex produce the same matches in a given string\n\t>>> same_matches('hello', r'\\w', r'[a-z]')\n\tTrue\n\t>>> same_matches('123', r'\\d', r'\\D')\n\tFalse\n\t>>> same_matches('7890', r'..', r'\\d\\d')\n\tTrue\n\t>>> same_matches('Hi There', r'\\W', r'\\s')\n\tTrue\n\t\"\"\"\n# SOLUTION\n\treturn re.findall(regex1, string) == re.findall(regex2, string)\n","test":"tests","test_inputs":[["hello","\\w","[a-z]"],["123","\\d","\\D"],["7890","..","\\d\\d"],["Hi There","\\W","\\s"],["Hello",".+","Hello"],["-123","\\d+","-?\\d+"],["abbabab","[ab]","(a|b)"]],"test_outputs":[true,false,true,true,true,false,true],"language":"python"}
{"task_id":44,"prompt":"\ndef sort_len(words: list[str]) -> list[str]:\n    \"\"\"\n    Return a new list containing the words from the input list in increasing order of length.\n    If two words have the same length, they should appear in the same order as in the input list.\n    >>> sort_len(['apple', 'banana', 'pear', 'grape'])\n    ['pear', 'apple', 'grape', 'banana']\n    >>> sort_len(['foo', 'baz', 'bar', 'qux', 'quux'])\n    ['foo', 'baz', 'bar', 'qux', 'quux']\n    >>> sort_len(['abcde', 'ab', 'abc', 'abcd', 'a'])\n    ['a', 'ab', 'abc', 'abcd', 'abcde']\n    \"\"\"\n","entry_point":"sort_len","canonical_solution":"\ndef sort_len(words: list[str]) -> list[str]:\n    \"\"\"\n    Return a new list containing the words from the input list in increasing order of length.\n    If two words have the same length, they should appear in the same order as in the input list.\n    >>> sort_len(['apple', 'banana', 'pear', 'grape'])\n    ['pear', 'apple', 'grape', 'banana']\n    >>> sort_len(['foo', 'baz', 'bar', 'qux', 'quux'])\n    ['foo', 'baz', 'bar', 'qux', 'quux']\n    >>> sort_len(['abcde', 'ab', 'abc', 'abcd', 'a'])\n    ['a', 'ab', 'abc', 'abcd', 'abcde']\n    \"\"\"\n# SOLUTION\n    return sorted(words, key=lambda x: (len(x), words.index(x)))\n","test":"tests","test_inputs":[[["apple","banana","pear","grape"]],[["foo","baz","bar","qux","quux"]],[["abcde","ab","abc","abcd","a"]],[[]],[["a"]],[["a","b"]],[["b","a"]],[["a","bb"]],[["bb","a"]],[["a","bb","ccc"]],[["ccc","bb","a"]]],"test_outputs":[["pear","apple","grape","banana"],["foo","baz","bar","qux","quux"],["a","ab","abc","abcd","abcde"],[],["a"],["a","b"],["b","a"],["a","bb"],["a","bb"],["a","bb","ccc"],["a","bb","ccc"]],"language":"python"}
{"task_id":45,"prompt":"\ndef remove_duplicates(values: list) -> list:\n    \"\"\"Remove duplicates from a list, preserving the order of the elements.\n    >>> remove_duplicates([4, 1, 2, 3, 1])\n    [4, 1, 2, 3]\n    >>> remove_duplicates(['d', 'a', 'b', 'c', 'c', 'a'])\n    ['d', 'a', 'b', 'c']\n    >>> remove_duplicates([])\n    []\n    \"\"\"\n","entry_point":"remove_duplicates","canonical_solution":"\ndef remove_duplicates(values: list) -> list:\n    \"\"\"Remove duplicates from a list, preserving the order of the elements.\n    >>> remove_duplicates([4, 1, 2, 3, 1])\n    [4, 1, 2, 3]\n    >>> remove_duplicates(['d', 'a', 'b', 'c', 'c', 'a'])\n    ['d', 'a', 'b', 'c']\n    >>> remove_duplicates([])\n    []\n    \"\"\"\n# SOLUTION\n    return list(dict.fromkeys(values))\n","test":"tests","test_inputs":[[[4,1,2,3,1]],[["d","a","b","c","c","a"]],[[]],[[1,2,3,4,5,6,7,8,9,10]],[[1,1,1,1,1,1,1,1,1,1]],[[[5,6],[1,2],[1,2],[5,6]]]],"test_outputs":[[4,1,2,3],["d","a","b","c"],[],[1,2,3,4,5,6,7,8,9,10],[1],[[5,6],[1,2]]],"language":"python"}
{"task_id":46,"prompt":"\ndef chunk_by_sum(sequence: list[int], limit: int) -> list[list[int]]:\n    \"\"\"Split the given list into chunks that sum to at most the given limit.\n    Chunks should be a long as possible and respect the order of the original list.\n    Ignore values larger than the limit.\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 7)\n    [[1, 2, 3], [4], [5]]\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 5)\n    [[1, 2], [3], [4], [5]]\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 3)\n    [[1, 2], [3]]\n    \"\"\"\n","entry_point":"chunk_by_sum","canonical_solution":"\ndef chunk_by_sum(sequence: list[int], limit: int) -> list[list[int]]:\n    \"\"\"Split the given list into chunks that sum to at most the given limit.\n    Chunks should be a long as possible and respect the order of the original list.\n    Ignore values larger than the limit.\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 7)\n    [[1, 2, 3], [4], [5]]\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 5)\n    [[1, 2], [3], [4], [5]]\n    >>> chunk_by_sum([1, 2, 3, 4, 5], 3)\n    [[1, 2], [3]]\n    \"\"\"\n# SOLUTION\n    chunks = []\n    chunk = []\n    chunk_sum = 0\n    for value in sequence:\n        if value > limit:\n            continue\n        if chunk_sum + value > limit:\n            chunks.append(chunk)\n            chunk = []\n            chunk_sum = 0\n        chunk.append(value)\n        chunk_sum += value\n    if chunk:\n        chunks.append(chunk)\n    return chunks\n\n","test":"tests","test_inputs":[[[1,2,3,4,5],7],[[1,2,3,4,5],5],[[1,2,3,4,5],3],[[1,2,3,4,5],1],[[1,2,3,4,5],0],[[1,2,3,4,5],10],[[9,8,7,6,5,4,3,2,1],10]],"test_outputs":[[[1,2,3],[4],[5]],[[1,2],[3],[4],[5]],[[1,2],[3]],[[1]],[],[[1,2,3,4],[5]],[[9],[8],[7],[6],[5,4],[3,2,1]]],"language":"python"}
{"task_id":47,"prompt":"\ndef is_symmetric(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\n    >>> is_symmetric([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    True\n    >>> is_symmetric([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    False\n    \"\"\"\n","entry_point":"is_symmetric","canonical_solution":"\ndef is_symmetric(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if a square matrix is symmetric.\n    >>> is_symmetric([[1, 2, 3], [2, 4, 5], [3, 5, 6]])\n    True\n    >>> is_symmetric([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    False\n    \"\"\"\n# SOLUTION\n    N, M = len(matrix), len(matrix[0])\n    for i in range(N):\n        for j in range(M):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n","test":"tests","test_inputs":[[[[1,2],[2,3]]],[[[1,2],[3,4]]],[[[1,2,3],[2,4,5],[3,5,6]]],[[[1,2,3],[4,5,6],[7,8,9]]],[[[1]]]],"test_outputs":[true,false,true,false,true],"language":"python"}
{"task_id":48,"prompt":"\ndef tribonacci(n: int) -> int:\n    \"\"\"Return the n-th tribonacci number.\n    The tribonacci numbers are a generalization of the Fibonacci numbers defined by T_1=0, T_2=0, T_3=1, and the recurrence equation T_n = T_{n-1} + T_{n-2} + T_{n-3}.\n    >>> tribonacci(1)\n    1\n    >>> [tribonacci(n) for n in range(1, 11)]\n    [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]\n    \"\"\"\n","entry_point":"tribonacci","canonical_solution":"\ndef tribonacci(n: int) -> int:\n    \"\"\"Return the n-th tribonacci number.\n    The tribonacci numbers are a generalization of the Fibonacci numbers defined by T_1=0, T_2=0, T_3=1, and the recurrence equation T_n = T_{n-1} + T_{n-2} + T_{n-3}.\n    >>> tribonacci(1)\n    1\n    >>> [tribonacci(n) for n in range(1, 11)]\n    [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]\n    \"\"\"\n# SOLUTION\n    a, b, c = 0, 0, 1\n    for _ in range(n):\n        a, b, c = b, c, a + b + c\n    return a\n\n","test":"tests","test_inputs":[[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37]],"test_outputs":[0,1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136,5768,10609,19513,35890,66012,121415,223317,410744,755476,1389537,2555757,4700770,8646064,15902591,29249425,53798080,98950096,181997601,334745777,615693474,1132436852],"language":"python"}
{"task_id":49,"prompt":"\ndef upsample(signal: list[float]) -> list[float]:\n    \"\"\"Given a signal of N samples, this function returns\n    a signal of 2N-1 samples, by linearly interpolating between the original samples.\n    For example,\n    >>> upsample([1, 2, 3])\n    [1, 1.5, 2, 2.5, 3]\n    >>> upsample([4, 5])\n    [4, 4.5, 5]\n    >>> upsample([6])\n    [6]\n    \"\"\"\n","entry_point":"upsample","canonical_solution":"\ndef upsample(signal: list[float]) -> list[float]:\n    \"\"\"Given a signal of N samples, this function returns\n    a signal of 2N-1 samples, by linearly interpolating between the original samples.\n    For example,\n    >>> upsample([1, 2, 3])\n    [1, 1.5, 2, 2.5, 3]\n    >>> upsample([4, 5])\n    [4, 4.5, 5]\n    >>> upsample([6])\n    [6]\n    \"\"\"\n# SOLUTION\n    upsampled = []\n    for i in range(len(signal) - 1):\n        upsampled.append(signal[i])\n        upsampled.append((signal[i] + signal[i+1]) \/ 2)\n    return upsampled + [signal[-1]]\n\n","test":"tests","test_inputs":[[[1,2,3]],[[4,5]],[[6]],[[1,2,3,4]],[[-1,0,1]],[[0,0,0]],[[0,1.5,1.8]]],"test_outputs":[[1,1.5,2,2.5,3],[4,4.5,5],[6],[1,1.5,2,2.5,3,3.5,4],[-1,-0.5,0,0.5,1],[0,0,0,0,0],[0,0.75,1.5,1.65,1.8]],"language":"python"}
{"task_id":50,"prompt":"\ndef valid_uuid(string: str) -> bool:\n    \"\"\"Return True if string is a valid UUID.\n    A string is a valid UUID if and only if it is a 36-character string\n    that matches the pattern:\n    [8]-[4]-[4]-[4]-[12]\n    where [n] is a string of n hexadecimal digits.\n    >>> valid_uuid('550e8400-e29b-41d4-a716-446655440000')\n    True\n    >>> valid_uuid('550e8400-e29b-41d4-a716-44665544000')\n    False\n    >>> valid_uuid('550e8400-e29b-41d4-a716-4466554400000')\n    False\n    >>> valid_uuid('550e8400-e29b-41d4-a716-44665544000G')\n    False\n    \"\"\"\n","entry_point":"valid_uuid","canonical_solution":"\ndef valid_uuid(string: str) -> bool:\n    \"\"\"Return True if string is a valid UUID.\n    A string is a valid UUID if and only if it is a 36-character string\n    that matches the pattern:\n    [8]-[4]-[4]-[4]-[12]\n    where [n] is a string of n hexadecimal digits.\n    >>> valid_uuid('550e8400-e29b-41d4-a716-446655440000')\n    True\n    >>> valid_uuid('550e8400-e29b-41d4-a716-44665544000')\n    False\n    >>> valid_uuid('550e8400-e29b-41d4-a716-4466554400000')\n    False\n    >>> valid_uuid('550e8400-e29b-41d4-a716-44665544000G')\n    False\n    \"\"\"\n# SOLUTION\n    import re\n    pattern = re.compile(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$')\n    return pattern.match(string) is not None\n\n","test":"tests","test_inputs":[["550e8400-e29b-41d4-a716-446655440000"],["550e8400-e29b-41d4-a716-44665544000"],["550e8400-e29b-41d4-a716-4466554400000"],["550e8400-e29b-41d4-a716-44665544000G"],["potato"],[""],["3355697a-77fe-409b-ba7e-0f70085b8b47"],["6c6f391d-189b-4459-9b26-bc7f05b42063"],["c973a188-05d5-4862-9d35-8d3d5ed09ecc"],["70db6cee-7b2f-4fb7-84ba-cc6e38a466c9"],["a9164110-6d96-45dc-baa0-96d216aedb3b"],["0850e3d5-4c80-44d3-86f5-3dcb021ff1da"],["50c8baac-c96e-44e2-a0aa-dc7274075a38"],["741aa8f0-3344-4e4d-a2cd-3c1c97bd1c90"],["20897fe6-dc66-43aa-ab0e-183a8f5b2b79"],["8acaa881-1eeb-4632-aca6-e95bf17a14f6"],["97c99adb-186c-4a56-b1f0-4c1baf95c65a"],["f0e18150-2f9d-436f-82f7-68c6f980f433"],["f46d4705-928d-4e6c-9366-b1630c6bc04e"],["efa0d67a-8a20-4eff-b9a8-fe0492c6412f"],["9a976720-91e3-4dc9-bb83-49b1b75c8453"],["657f5085-1e22-4d62-b0be-48791d2d67d6"],["84ef5dd4-9a3c-48ae-a0e4-d54a2de0d8a9"],["40e1da94-9652-41a3-9ad2-9aab806348e3"],["e317afc0-69a8-42c7-9470-b60d6586525d"],["d6374744-796e-448d-ac8b-1922d0aad614"]],"test_outputs":[true,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"language":"python"}
